"use strict";(self.webpackChunkbig_bass_bonanza_slots=self.webpackChunkbig_bass_bonanza_slots||[]).push([[228],{4732:(e,t,r)=>{var i=r(8507);class n{static init(e){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame((()=>this.resize())))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let e,t;if(this._cancelResize(),this._resizeTo===globalThis.window)e=globalThis.innerWidth,t=globalThis.innerHeight;else{const{clientWidth:r,clientHeight:i}=this._resizeTo;e=r,t=i}this.renderer.resize(e,t),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}n.extension=i.Ag.Application;var s=r(4458),a=r(7309);class o{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,s.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?a.R.shared:new a.R,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}o.extension=i.Ag.Application,i.XO.add(n),i.XO.add(o)},9935:(e,t,r)=>{var i=r(8507);class n{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}n.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"filter"};var s=r(9313),a=r(5101),o=r(3513),l=r(6011),h=r(5811),d=r(4492),u=r(2437),c=r(5099),p=r(9636),f=r(2208);const g=new s.u;function x(e,t){return t.clear(),_(e,t),t.isValid||t.set(0,0,0,0),e.renderGroup?t.applyMatrix(e.renderGroup.localTransform):t.applyMatrix(e.parentRenderGroup.worldTransform),t}function _(e,t){if(7!==e.localDisplayStatus||!e.measurable)return;const r=!!e.effects.length;let i=t;if((e.renderGroup||r)&&(i=f.o.get().clear()),e.boundsArea)t.addRect(e.boundsArea,e.worldTransform);else{if(e.renderPipeId){const t=e.bounds;i.addFrame(t.minX,t.minY,t.maxX,t.maxY,e.groupTransform)}const t=e.children;for(let e=0;e<t.length;e++)_(t[e],i)}if(r){let r=!1;for(let t=0;t<e.effects.length;t++)e.effects[t].addBounds&&(r||(r=!0,i.applyMatrix(e.parentRenderGroup.worldTransform)),e.effects[t].addBounds(i,!0));r&&(i.applyMatrix(e.parentRenderGroup.worldTransform.copyTo(g).invert()),t.addBounds(i,e.relativeGroupTransform)),t.addBounds(i),f.o.return(i)}else e.renderGroup&&(t.addBounds(i,e.relativeGroupTransform),f.o.return(i))}var m=r(268);const b=new l.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class y{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new h.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new o.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const i=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,0===r.length)return void(i.skip=!0);const n=i.bounds;e.renderables?function(e,t){t.clear();const r=t.matrix;for(let r=0;r<e.length;r++){const i=e[r];i.globalDisplayStatus<7||(t.matrix=i.worldTransform,i.addBounds(t))}t.matrix=r}(e.renderables,n):e.filterEffect.filterArea?(n.clear(),n.addRect(e.filterEffect.filterArea),n.applyMatrix(e.container.worldTransform)):x(e.container,n);const s=t.renderTarget.renderTarget.colorTexture.source;let a=1/0,o=0,l=!0,h=!1,d=!1;for(let e=0;e<r.length;e++){const i=r[e];if(a=Math.min(a,"inherit"===i.resolution?s._resolution:i.resolution),o+=i.padding,"off"===i.antialias?l=!1:"inherit"===i.antialias&&l&&(l=s.antialias),!(i.compatibleRenderers&t.type)){d=!1;break}if(i.blendRequired&&!(t.backBuffer?.useBackBuffer??1)){(0,m.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),d=!1;break}d=i.enabled||d,h=h||i.blendRequired}if(!d)return void(i.skip=!0);const c=t.renderTarget.rootViewPort;n.scale(a).fitBounds(0,c.width,0,c.height).ceil().scale(1/a).pad(0|o),n.isPositive?(i.skip=!1,i.bounds=n,i.blendRequired=h,i.container=e.container,i.filterEffect=e.filterEffect,i.previousRenderSurface=t.renderTarget.renderSurface,i.inputTexture=u.W.getOptimalTexture(n.width,n.height,a,l),t.renderTarget.bind(i.inputTexture,!0),t.globalUniforms.push({offset:n})):i.skip=!0}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,i=t.bounds;let n=d.g.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const r=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,s=e.renderTarget.getRenderTarget(t.previousRenderSurface);n=this.getBackTexture(s,i,r)}t.backTexture=n;const s=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(n.source,3),e.globalUniforms.pop(),1===s.length)s[0].apply(this,r,t.previousRenderSurface,!1),u.W.returnTexture(r);else{let e=t.inputTexture,r=u.W.getOptimalTexture(i.width,i.height,e.source._resolution,!1),n=0;for(n=0;n<s.length-1;++n){s[n].apply(this,e,r,!0);const t=e;e=r,r=t}s[n].apply(this,e,t.previousRenderSurface,!1),u.W.returnTexture(e),u.W.returnTexture(r)}t.blendRequired&&u.W.returnTexture(n)}getBackTexture(e,t,r){const i=e.colorTexture.source._resolution,n=u.W.getOptimalTexture(t.width,t.height,i,!1);let s=t.minX,a=t.minY;r&&(s-=r.minX,a-=r.minY),s=Math.floor(s*i),a=Math.floor(a*i);const o=Math.ceil(t.width*i),l=Math.ceil(t.height*i);return this.renderer.renderTarget.copyToTexture(e,n,{x:s,y:a},{width:o,height:l},{x:0,y:0}),n}applyFilter(e,t,r,i){const n=this.renderer,s=this._filterStack[this._filterStackIndex],o=s.bounds,l=a.b.shared,h=s.previousRenderSurface===r;let u=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,p=this._filterStackIndex-1;for(;p>0&&this._filterStack[p].skip;)--p;p>0&&(u=this._filterStack[p].inputTexture.source._resolution);const f=this._filterGlobalUniforms,g=f.uniforms,x=g.uOutputFrame,_=g.uInputSize,m=g.uInputPixel,y=g.uInputClamp,T=g.uGlobalFrame,v=g.uOutputTexture;if(h){let e=this._filterStackIndex;for(;e>0;){e--;const t=this._filterStack[this._filterStackIndex-1];if(!t.skip){l.x=t.bounds.minX,l.y=t.bounds.minY;break}}x[0]=o.minX-l.x,x[1]=o.minY-l.y}else x[0]=0,x[1]=0;x[2]=t.frame.width,x[3]=t.frame.height,_[0]=t.source.width,_[1]=t.source.height,_[2]=1/_[0],_[3]=1/_[1],m[0]=t.source.pixelWidth,m[1]=t.source.pixelHeight,m[2]=1/m[0],m[3]=1/m[1],y[0]=.5*m[2],y[1]=.5*m[3],y[2]=t.frame.width*_[2]-.5*m[2],y[3]=t.frame.height*_[3]-.5*m[3];const S=this.renderer.renderTarget.rootRenderTarget.colorTexture;T[0]=l.x*u,T[1]=l.y*u,T[2]=S.source.width*u,T[3]=S.source.height*u;const w=this.renderer.renderTarget.getRenderTarget(r);if(n.renderTarget.bind(r,!!i),r instanceof d.g?(v[0]=r.frame.width,v[1]=r.frame.height):(v[0]=w.width,v[1]=w.height),v[2]=w.isRoot?-1:1,f.update(),n.renderPipes.uniformBatch){const e=n.renderPipes.uniformBatch.getUboResource(f);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(f,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,n.encoder.draw({geometry:b,shader:e,state:e._state,topology:"triangle-list"}),n.type===c.W.WEBGL&&n.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new p.c,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,i=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),n=t.worldTransform.copyTo(s.u.shared);return n.invert(),i.prepend(n),i.scale(1/t.texture.frame.width,1/t.texture.frame.height),i.translate(t.anchor.x,t.anchor.y),i}}y.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem],name:"filter"},i.XO.add(y),i.XO.add(n)},2067:(e,t,r)=>{r.d(t,{Ls:()=>i,_Q:()=>n,mA:()=>s});const i={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},n={...i,vertex:{...i.vertex,header:i.vertex.header.replace("group(1)","group(2)")}},s={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},2760:(e,t,r)=>{function i(e,t,r){const i=(e>>24&255)/255;t[r++]=(255&e)/255*i,t[r++]=(e>>8&255)/255*i,t[r++]=(e>>16&255)/255*i,t[r++]=i}r.d(t,{V:()=>i})},8928:(e,t,r)=>{var i=r(8507),n=r(3428),s=r(7547),a=r(8218),o=r(2760),l=r(4389);class h{constructor(e,t){this.state=s.U.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],i=this.renderer.graphicsContext.updateGpuContext(t);return!(!i.isBatchable&&r===i.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e._didGraphicsUpdate&&(e._didGraphicsUpdate=!1,this._rebuild(e)),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let e=0;e<t.length;e++){const r=t[e];r._batcher.updateElement(r)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const n=i.resources.localUniforms.uniforms;n.uTransformMatrix=e.groupTransform,n.uRound=t._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,n.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,i=this._getBatchesForRenderable(e);for(let e=0;e<i.length;e++){const n=i[e];r.addToBatch(n,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),i=this.renderer._roundPixels|e._roundPixels,n=r.batches.map((t=>{const r=a.Z.get(l.G);return t.copyTo(r),r.renderable=e,r.roundPixels=i,r}));return void 0===this._graphicsBatchesHash[e.uid]&&e.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[e.uid]=n,n}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach((e=>{a.Z.return(e)})),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}h.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"graphics"},i.XO.add(h),i.XO.add(n.GH)},5285:(e,t,r)=>{var i=r(8507),n=r(9313),s=r(3513),a=r(5811),o=r(8639),l=r(8218),h=r(2760),d=r(8734);class u{constructor(e,t){this.localUniforms=new a.k({uTransformMatrix:{value:new n.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new s.T({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init()}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,i=e.batched;if(t.batched=i,r!==i)return!0;if(i){const r=e._geometry;if(r.indices.length!==t.indexSize||r.positions.length!==t.vertexSize)return t.indexSize=r.indices.length,t.vertexSize=r.positions.length,!0;const i=this._getBatchableMesh(e),n=e.texture;if(i.texture._source!==n._source&&i.texture._source!==n._source)return!i._batcher.checkAndUpdateTexture(i,n)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:i}=this._getMeshData(e);if(i){const i=this._getBatchableMesh(e);i.texture=e._texture,i.geometry=e._geometry,r.addToBatch(i,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.texture=e._texture,t.geometry=e._geometry,t._batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(l.Z.return(t),this._gpuBatchableMeshHash[e.uid]=null),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;e.state.blendMode=(0,o.i)(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),(0,h.V)(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){return this._meshDataHash[e.uid]={batched:e.batched,indexSize:e._geometry.indices?.length,vertexSize:e._geometry.positions?.length},e.on("destroyed",this._destroyRenderableBound),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=l.Z.get(d.U);return t.renderable=e,t.texture=e._texture,t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&l.Z.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}u.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"mesh"},i.XO.add(u)},8734:(e,t,r)=>{r.d(t,{U:()=>i});class i{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get uvs(){const e=this.geometry.getBuffer("aUV"),t=e.data;let r=t;const i=this.texture.textureMatrix;return i.isSimple||(r=this._transformedUvs,this._textureMatrixUpdateId===i._updateID&&this._uvUpdateId===e._updateID||((!r||r.length<t.length)&&(r=this._transformedUvs=new Float32Array(t.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=e._updateID,i.multiplyUvs(t,r))),r}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},5060:(e,t,r)=>{r.d(t,{u:()=>l});var i=r(949),n=r(1132),s=r(6011),a=r(4670);const o=class e extends s.V{constructor(...t){let r=t[0]??{};r instanceof Float32Array&&((0,a.t6)(a.lj,"use new MeshGeometry({ positions, uvs, indices }) instead"),r={positions:r,uvs:t[1],indices:t[2]}),r={...e.defaultOptions,...r};const s=r.positions||new Float32Array([0,0,1,0,1,1,0,1]),o=r.uvs||new Float32Array([0,0,1,0,1,1,0,1]),l=r.indices||new Uint32Array([0,1,2,0,2,3]),h=r.shrinkBuffersToFit;super({attributes:{aPosition:{buffer:new i.h({data:s,label:"attribute-mesh-positions",shrinkToFit:h,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0},aUV:{buffer:new i.h({data:o,label:"attribute-mesh-uvs",shrinkToFit:h,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0}},indexBuffer:new i.h({data:l,label:"index-mesh-buffer",shrinkToFit:h,usage:n.S.INDEX|n.S.COPY_DST}),topology:r.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};o.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let l=o},7252:(e,t,r)=>{var i=r(8507),n=r(8218),s=r(8734),a=r(4670),o=r(5060);const l=class e extends o.u{constructor(...e){super({});let t=e[0]??{};"number"==typeof t&&((0,a.t6)(a.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(t){t={...e.defaultOptions,...t},this.verticesX=this.verticesX??t.verticesX,this.verticesY=this.verticesY??t.verticesY,this.width=this.width??t.width,this.height=this.height??t.height;const r=this.verticesX*this.verticesY,i=[],n=[],s=[],a=this.verticesX-1,o=this.verticesY-1,l=this.width/a,h=this.height/o;for(let e=0;e<r;e++){const t=e%this.verticesX,r=e/this.verticesX|0;i.push(t*l,r*h),n.push(t/a,r/o)}const d=a*o;for(let e=0;e<d;e++){const t=e%a,r=e/a|0,i=r*this.verticesX+t,n=r*this.verticesX+t+1,o=(r+1)*this.verticesX+t,l=(r+1)*this.verticesX+t+1;s.push(i,n,o,n,l,o)}this.buffers[0].data=new Float32Array(i),this.buffers[1].data=new Float32Array(n),this.indexBuffer.data=new Uint32Array(s),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};l.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let h=l;const d=class e extends h{constructor(t={}){super({width:(t={...e.defaultOptions,...t}).width,height:t.height,verticesX:4,verticesY:4}),this.update(t)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,t=this._leftWidth+this._rightWidth,r=this.width>t?1:this.width/t,i=this._topHeight+this._bottomHeight,n=this.height>i?1:this.height/i,s=Math.min(r,n);e[9]=e[11]=e[13]=e[15]=this._topHeight*s,e[17]=e[19]=e[21]=e[23]=this.height-this._bottomHeight*s,e[25]=e[27]=e[29]=e[31]=this.height,e[2]=e[10]=e[18]=e[26]=this._leftWidth*s,e[4]=e[12]=e[20]=e[28]=this.width-this._rightWidth*s,e[6]=e[14]=e[22]=e[30]=this.width,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};d.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let u=d;class c{constructor(e){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e}addRenderable(e,t){const r=this._getGpuSprite(e);e._didSpriteUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e._didSpriteUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=e._texture,r=this._getGpuSprite(e);return r.texture._source!==t._source&&!r._batcher.checkAndUpdateTexture(r,t)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];n.Z.return(t.geometry),n.Z.return(t),this._gpuSpriteHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(e,t){e._didSpriteUpdate=!1,t.geometry.update(e),t.texture=e._texture}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=n.Z.get(s.U);return t.geometry=n.Z.get(u),t.renderable=e,t.transform=e.groupTransform,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,e._didSpriteUpdate=!0,this._gpuSpriteHash[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}c.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"nineSliceSprite"},i.XO.add(c)},8723:(e,t,r)=>{var i=r(8507),n=r(8639),s=r(7547),a=r(5099),o=r(2760),l=r(8734),h=r(5060),d=r(9313),u=r(5611),c=r(2067),p=r(6665),f=r(8475),g=r(5811),x=r(4492);const _={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},m={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        "}};let b,y;class T extends f.M{constructor(){b??(b=(0,u.v)({name:"tiling-sprite-shader",bits:[c.Ls,_,p.b]})),y??(y=(0,u.I)({name:"tiling-sprite-shader",bits:[c.mA,m,p.m]}));const e=new g.k({uMapCoord:{value:new d.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new d.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:y,gpuProgram:b,resources:{localUniforms:new g.k({uTransformMatrix:{value:new d.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:x.g.EMPTY.source,uSampler:x.g.EMPTY.source.style}})}updateUniforms(e,t,r,i,n,s){const a=this.resources.tilingUniforms,o=s.width,l=s.height,h=s.textureMatrix,d=a.uniforms.uTextureTransform;d.set(r.a*o/e,r.b*o/t,r.c*l/e,r.d*l/t,r.tx/e,r.ty/t),d.invert(),a.uniforms.uMapCoord=h.mapCoord,a.uniforms.uClampFrame=h.uClampFrame,a.uniforms.uClampOffset=h.uClampOffset,a.uniforms.uTextureTransform=d,a.uniforms.uSizeAnchor[0]=e,a.uniforms.uSizeAnchor[1]=t,a.uniforms.uSizeAnchor[2]=i,a.uniforms.uSizeAnchor[3]=n,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class v extends h.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const S=new v;class w{constructor(e){this._state=s.U.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const i=t.canBatch;if(i&&i===r){const{batchableMesh:r}=t;if(r&&r.texture._source!==e.texture._source)return!r._batcher.checkAndUpdateTexture(r,e.texture)}return r!==i}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const i=this._getTilingSpriteData(e),{geometry:n,canBatch:s}=i;if(s){i.batchableMesh||(i.batchableMesh=new l.U);const s=i.batchableMesh;e._didTilingSpriteUpdate&&(e._didTilingSpriteUpdate=!1,this._updateBatchableMesh(e),s.geometry=n,s.renderable=e,s.transform=e.groupTransform,s.texture=e._texture),s.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(s,t)}else r.break(t),i.shader||(i.shader=new T),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,r.uColor,0),this._state.blendMode=(0,n.i)(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:S,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:r}=t;e._didTilingSpriteUpdate&&this._updateBatchableMesh(e),r._batcher.updateElement(r)}else if(e._didTilingSpriteUpdate){const{shader:r}=t;r.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}e._didTilingSpriteUpdate=!1}destroyRenderable(e){const t=this._getTilingSpriteData(e);t.batchableMesh=null,t.shader?.destroy(),this._tilingSpriteDataHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new h.u({indices:S.indices,positions:S.positions.slice(),uvs:S.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,i=e.texture.source.style;"repeat"!==i.addressMode&&(i.addressMode="repeat",i.update()),function(e,t){const r=e.texture,i=r.frame.width,n=r.frame.height;let s=0,a=0;e._applyAnchorToTexture&&(s=e.anchor.x,a=e.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-a,t[5]=t[7]=1-a;const o=d.u.shared;o.copyFrom(e._tileTransform.matrix),o.tx/=e.width,o.ty/=e.height,o.invert(),o.scale(e.width/i,e.height/n),function(e,t,r,i){let n=0;const s=e.length/2,a=i.a,o=i.b,l=i.c,h=i.d,d=i.tx,u=i.ty;for(r*=2;n<s;){const t=e[r],i=e[r+1];e[r]=a*t+l*i+d,e[r+1]=o*t+h*i+u,r+=2,n++}}(t,0,0,o)}(e,r.uvs),function(e,t){const r=e.anchor.x,i=e.anchor.y;t[0]=-r*e.width,t[1]=-i*e.height,t[2]=(1-r)*e.width,t[3]=-i*e.height,t[4]=(1-r)*e.width,t[5]=(1-i)*e.height,t[6]=-r*e.width,t[7]=(1-i)*e.height}(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let i=!0;return this._renderer.type===a.W.WEBGL&&(i=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(i||r.source.isPowerOfTwo),t.canBatch}}w.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"tilingSprite"},i.XO.add(w)},8422:(e,t,r)=>{r.d(t,{K:()=>i});class i{constructor(){this.batcherName="default",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}}},4243:(e,t,r)=>{var i=r(8507),n=r(1979),s=r(8218),a=r(4670),o=r(6500),l=r(4835);class h extends o.l{constructor(e){e instanceof l.T&&(e={context:e});const{context:t,roundPixels:r,...i}=e||{};super({label:"Graphics",...i}),this.renderPipeId="graphics",this._context=t||(this._ownedContext=new l.T),this._context.on("update",this.onViewUpdate,this),this.allowChildren=!1,this.roundPixels=r??!1}set context(e){e!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=e,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}addBounds(e){e.addBounds(this._context.bounds)}containsPoint(e){return this._context.containsPoint(e)}onViewUpdate(){if(this._didViewChangeTick++,this._didGraphicsUpdate=!0,this.didViewUpdate)return;this.didViewUpdate=!0;const e=this.renderGroup||this.parentRenderGroup;e&&e.onChildViewUpdate(this)}destroy(e){this._ownedContext&&!e?this._ownedContext.destroy(e):!0!==e&&!0!==e?.context||this._context.destroy(e),this._ownedContext=null,this._context=null,super.destroy(e)}_callContextMethod(e,t){return this.context[e](...t),this}setFillStyle(...e){return this._callContextMethod("setFillStyle",e)}setStrokeStyle(...e){return this._callContextMethod("setStrokeStyle",e)}fill(...e){return this._callContextMethod("fill",e)}stroke(...e){return this._callContextMethod("stroke",e)}texture(...e){return this._callContextMethod("texture",e)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...e){return this._callContextMethod("arc",e)}arcTo(...e){return this._callContextMethod("arcTo",e)}arcToSvg(...e){return this._callContextMethod("arcToSvg",e)}bezierCurveTo(...e){return this._callContextMethod("bezierCurveTo",e)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...e){return this._callContextMethod("ellipse",e)}circle(...e){return this._callContextMethod("circle",e)}path(...e){return this._callContextMethod("path",e)}lineTo(...e){return this._callContextMethod("lineTo",e)}moveTo(...e){return this._callContextMethod("moveTo",e)}quadraticCurveTo(...e){return this._callContextMethod("quadraticCurveTo",e)}rect(...e){return this._callContextMethod("rect",e)}roundRect(...e){return this._callContextMethod("roundRect",e)}poly(...e){return this._callContextMethod("poly",e)}regularPoly(...e){return this._callContextMethod("regularPoly",e)}roundPoly(...e){return this._callContextMethod("roundPoly",e)}roundShape(...e){return this._callContextMethod("roundShape",e)}filletRect(...e){return this._callContextMethod("filletRect",e)}chamferRect(...e){return this._callContextMethod("chamferRect",e)}star(...e){return this._callContextMethod("star",e)}svg(...e){return this._callContextMethod("svg",e)}restore(...e){return this._callContextMethod("restore",e)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...e){return this._callContextMethod("rotate",e)}scaleTransform(...e){return this._callContextMethod("scale",e)}setTransform(...e){return this._callContextMethod("setTransform",e)}transform(...e){return this._callContextMethod("transform",e)}translateTransform(...e){return this._callContextMethod("translate",e)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(e){this._context.fillStyle=e}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(e){this._context.strokeStyle=e}clone(e=!1){return e?new h(this._context.clone()):(this._ownedContext=null,new h(this._context))}lineStyle(e,t,r){(0,a.t6)(a.lj,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const i={};return e&&(i.width=e),t&&(i.color=t),r&&(i.alpha=r),this.context.strokeStyle=i,this}beginFill(e,t){(0,a.t6)(a.lj,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const r={};return e&&(r.color=e),t&&(r.alpha=t),this.context.fillStyle=r,this}endFill(){(0,a.t6)(a.lj,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const e=this.context.strokeStyle;return e.width===l.T.defaultStrokeStyle.width&&e.color===l.T.defaultStrokeStyle.color&&e.alpha===l.T.defaultStrokeStyle.alpha||this.context.stroke(),this}drawCircle(...e){return(0,a.t6)(a.lj,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",e)}drawEllipse(...e){return(0,a.t6)(a.lj,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",e)}drawPolygon(...e){return(0,a.t6)(a.lj,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",e)}drawRect(...e){return(0,a.t6)(a.lj,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",e)}drawRoundedRect(...e){return(0,a.t6)(a.lj,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",e)}drawStar(...e){return(0,a.t6)(a.lj,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",e)}}var d=r(9313),u=r(6563),c=r(5611),p=r(4459),f=r(4e3),g=r(6665),x=r(6040),_=r(8475),m=r(5811);const b={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:" \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},y={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:" \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},T={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        "}},v={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        "}};let S,w;class C extends _.M{constructor(){const e=new m.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new d.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=(0,u.a)();S??(S=(0,c.v)({name:"sdf-shader",bits:[p.F,(0,f._)(t),b,T,g.b]})),w??(w=(0,c.I)({name:"sdf-shader",bits:[p.a,(0,f.P)(t),y,v,g.m]})),super({glProgram:w,gpuProgram:S,resources:{localUniforms:e,batchSamplers:(0,x.n)(t)}})}}var M=r(1312),R=r(2763);class U{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);B(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(s.Z.return(t.customShader),t.customShader=null),s.Z.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);B(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,i=M.c.getFont(e.text,e._style);r.clear(),"none"!==i.distanceField.type&&(r.customShader||(r.customShader=s.Z.get(C)));const n=Array.from(e.text),a=e._style;let o=i.baseLineOffset;const l=(0,R.Z)(n,a,i,!0);let h=0;const d=a.padding,u=l.scale;let c=l.width,p=l.height+l.offsetY;a._stroke&&(c+=a._stroke.width/u,p+=a._stroke.width/u),r.translate(-e._anchor._x*c-d,-e._anchor._y*p-d).scale(u,u);const f=i.applyFillAsTint?a._fill.color:16777215;for(let e=0;e<l.lines.length;e++){const t=l.lines[e];for(let e=0;e<t.charPositions.length;e++){const s=n[h++],a=i.chars[s];a?.texture&&r.texture(a.texture,f||"black",Math.round(t.charPositions[e]+a.xOffset),Math.round(o+a.yOffset))}o+=i.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=s.Z.get(h);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,i=n.l.get(`${r}-bitmap`),{a:s,b:a,c:o,d:l}=e.groupTransform,h=Math.sqrt(s*s+a*a),d=Math.sqrt(o*o+l*l),u=(Math.abs(h)+Math.abs(d))/2,c=i.baseRenderedFontSize/e._style.fontSize,p=u*i.distanceField.range*(1/c);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}function B(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}U.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"bitmapText"},i.XO.add(U)},7559:(e,t,r)=>{var i=r(8507),n=r(4492),s=r(2048),a=r(8218),o=r(8422);class l{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this)}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e,t){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),a.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),i=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch((e=>{console.error(e)})),e._didTextUpdate=!1;const n=e._style.padding;(0,s.y)(i.bounds,e._anchor,i.texture,n)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const i=e.resolution??this._renderer.resolution,n=await this._renderer.htmlText.getManagedTexture(e.text,i,e._style,e._getKey()),a=t.batchableSprite;a.texture=t.texture=n,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate();const o=e._style.padding;(0,s.y)(a.bounds,e._anchor,a.texture,o)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:n.g.EMPTY,currentKey:"--",batchableSprite:a.Z.get(o.K),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.transform=e.groupTransform,r.texture=n.g.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}l.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"htmlText"};var h=r(2437),d=r(5099),u=r(1761),c=r(268),p=r(2558);const f="http://www.w3.org/2000/svg",g="http://www.w3.org/1999/xhtml";class x{constructor(){this.svgRoot=document.createElementNS(f,"svg"),this.foreignObject=document.createElementNS(f,"foreignObject"),this.domElement=document.createElementNS(g,"div"),this.styleElement=document.createElementNS(g,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:r,domElement:i}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(i)}}var _=r(8291),m=r(8011),b=r(2577);function y(e){const t=b.Q.shared.setValue(e.color).setAlpha(e.alpha).toHexa(),r=`${Math.round(Math.cos(e.angle)*e.distance)}px ${Math.round(Math.sin(e.angle)*e.distance)}px`;return e.blur>0?`text-shadow: ${r} ${e.blur}px ${t}`:`text-shadow: ${r} ${t}`}function T(e){return[`-webkit-text-stroke-width: ${e.width}px`,`-webkit-text-stroke-color: ${b.Q.shared.setValue(e.color).toHex()}`,`text-stroke-width: ${e.width}px`,`text-stroke-color: ${b.Q.shared.setValue(e.color).toHex()}`,"paint-order: stroke"].join(";")}const v={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},S={fill:e=>`color: ${b.Q.shared.setValue(e).toHex()}`,breakWords:e=>"word-wrap: "+(e?"break-all":"break-word"),stroke:T,dropShadow:y};class w extends _.x{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=(0,m.V)(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new w({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=function(e){const t=e._stroke,r=e._fill,i=[`div { ${[`color: ${b.Q.shared.setValue(r.color).toHex()}`,`font-size: ${e.fontSize}px`,`font-family: ${e.fontFamily}`,`font-weight: ${e.fontWeight}`,`font-style: ${e.fontStyle}`,`font-variant: ${e.fontVariant}`,`letter-spacing: ${e.letterSpacing}px`,`text-align: ${e.align}`,`padding: ${e.padding}px`,`white-space: ${"pre"===e.whiteSpace&&e.wordWrap?"pre-wrap":e.whiteSpace}`,...e.lineHeight?[`line-height: ${e.lineHeight}px`]:[],...e.wordWrap?["word-wrap: "+(e.breakWords?"break-all":"break-word"),`max-width: ${e.wordWrapWidth}px`]:[],...t?[T(t)]:[],...e.dropShadow?[y(e.dropShadow)]:[],...e.cssOverrides].join(";")} }`];return function(e,t){for(const r in e){const i=e[r],n=[];for(const e in i)S[e]?n.push(S[e](i[e])):v[e]&&n.push(v[e].replace("{{VALUE}}",i[e]));t.push(`${r} { ${n.join(";")} }`)}}(e.tagStyles,i),i.join(" ")}(this)),this._cssStyle}addOverride(...e){const t=e.filter((e=>!this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter((e=>this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides=this.cssOverrides.filter((e=>!t.includes(e))),this.update())}set fill(e){"string"!=typeof e&&"number"!=typeof e&&(0,c.R)("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&"string"!=typeof e&&"number"!=typeof e&&(0,c.R)("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}var C=r(1979);async function M(e,t){const r=await async function(e){const t=await u.e.get().fetch(e),r=await t.blob(),i=new FileReader;return await new Promise(((e,t)=>{i.onloadend=()=>e(i.result),i.onerror=t,i.readAsDataURL(r)}))}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        src: url('${r}');\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n    }`}const R=new Map;var U=r(7608),B=r(4016);let P;class k{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===d.W.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,i){if(this._activeTextures[i])return this._increaseReferenceCount(i),this._activeTextures[i].promise;const n=this._buildTexturePromise(e,t,r).then((e=>(this._activeTextures[i].texture=e,e)));return this._activeTextures[i]={texture:null,promise:n,usageCount:1},n}async _buildTexturePromise(e,t,r){const i=a.Z.get(x),n=function(e,t){const r=t.fontFamily,i=[],n={},s=e.match(/font-family:([^;"\s]+)/g);function a(e){n[e]||(i.push(e),n[e]=!0)}if(Array.isArray(r))for(let e=0;e<r.length;e++)a(r[e]);else a(r);s&&s.forEach((e=>{a(e.split(":")[1].trim())}));for(const e in t.tagStyles)a(t.tagStyles[e].fontFamily);return i}(e,r),s=await async function(e,t,r){const i=e.filter((e=>C.l.has(`${e}-and-url`))).map(((e,i)=>{if(!R.has(e)){const{url:n}=C.l.get(`${e}-and-url`);0===i?R.set(e,M({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:e},n)):R.set(e,M({fontWeight:r.fontWeight,fontStyle:r.fontStyle,fontFamily:e},n))}return R.get(e)}));return(await Promise.all(i)).join("\n")}(n,r,w.defaultTextStyle),o=function(e,t,r,i){i=i||P||(P=new x);const{domElement:n,styleElement:s,svgRoot:a}=i;n.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,n.setAttribute("style","transform-origin: top left; display: inline-block"),r&&(s.textContent=r),document.body.appendChild(a);const o=n.getBoundingClientRect();a.remove();const l=B.P.measureFont(t.fontStyle).descent,h=2*t.padding;return{width:o.width-h,height:o.height+l-h}}(e,r,s,i),l=Math.ceil(Math.ceil(Math.max(1,o.width)+2*r.padding)*t),h=Math.ceil(Math.ceil(Math.max(1,o.height)+2*r.padding)*t),d=i.image;d.width=2+(0|l),d.height=2+(0|h);const c=function(e,t,r,i,n){const{domElement:s,styleElement:a,svgRoot:o}=n;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,s.setAttribute("style",`transform: scale(${r});transform-origin: top left; display: inline-block`),a.textContent=i;const{width:l,height:h}=n.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",h.toString()),(new XMLSerializer).serializeToString(o)}(e,r,t,s,i);await function(e,t,r){return new Promise((async i=>{r&&await new Promise((e=>setTimeout(e,100))),e.onload=()=>{i()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"}))}(d,c,function(){const{userAgent:e}=u.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(e)}()&&n.length>0);let f=d;this._createCanvas&&(f=function(e,t){const r=U.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:i}=r;return i.clearRect(0,0,e.width,e.height),i.drawImage(e,0,0),U.N.returnCanvasAndContext(r),r.canvas}(d,t));const g=(0,p.M)(f,d.width-2,d.height-2,t);return this._createCanvas&&this._renderer.texture.initSource(g.source),a.Z.return(i),g}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,0===t.usageCount&&(t.texture?this._cleanUp(t):t.promise.then((e=>{t.texture=e,this._cleanUp(t)})).catch((()=>{(0,c.R)("HTMLTextSystem: Failed to clean texture")})),this._activeTextures[e]=null))}_cleanUp(e){h.W.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}k.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"htmlText"},k.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"},i.XO.add(k),i.XO.add(l)},6958:(e,t,r)=>{var i=r(8507),n=r(2048),s=r(8218),a=r(8422);class o{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this)}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();if(t.currentKey!==r){const{width:r,height:i}=this._renderer.canvasText.getTextureSize(e.text,e.resolution,e._style);return 1!==this._renderer.canvasText.getReferenceCount(t.currentKey)||r!==t.texture._source.width||i!==t.texture._source.height}return!1}addRenderable(e,t){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),s.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),i=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1;const s=e._style.padding;(0,n.y)(i.bounds,e._anchor,i.texture,s)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=r.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:s.Z.get(a.K)};return t.batchableSprite.renderable=e,t.batchableSprite.transform=e.groupTransform,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._updateText(e),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}o.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"text"};var l=r(2577),h=r(9939),d=r(7608),u=r(2437),c=r(9252);function p(e,t,r){for(let i=0,n=4*r*t;i<t;++i,n+=4)if(0!==e[n+3])return!1;return!0}function f(e,t,r,i,n){const s=4*t;for(let t=i,a=i*s+4*r;t<=n;++t,a+=s)if(0!==e[a+3])return!1;return!0}var g=r(4670),x=r(8291),_=r(2558),m=r(4016),b=r(1242),y=r(3548);class T{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,r){const i=m.P.measureText(e||" ",r);let n=Math.ceil(Math.ceil(Math.max(1,i.width)+2*r.padding)*t),s=Math.ceil(Math.ceil(Math.max(1,i.height)+2*r.padding)*t);return n=Math.ceil(n-1e-6),s=Math.ceil(s-1e-6),n=(0,h.U5)(n),s=(0,h.U5)(s),{width:n,height:s}}getTexture(e,t,r,i){"string"==typeof e&&((0,g.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof x.x||(e.style=new x.x(e.style));const{texture:n,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(n._source),d.N.returnCanvasAndContext(s),n}createTextureAndCanvas(e){const{text:t,style:r}=e,i=e.resolution??this._renderer.resolution,n=m.P.measureText(t||" ",r),s=Math.ceil(Math.ceil(Math.max(1,n.width)+2*r.padding)*i),a=Math.ceil(Math.ceil(Math.max(1,n.height)+2*r.padding)*i),o=d.N.getOptimalCanvasAndContext(s,a),{canvas:l}=o;this.renderTextToCanvas(t,r,i,o);const h=(0,_.M)(l,s,a,i);if(r.trim){const e=function(e,t=1){const{width:r,height:i}=e,n=e.getContext("2d",{willReadFrequently:!0});if(null===n)throw new TypeError("Failed to get canvas 2D context");const s=n.getImageData(0,0,r,i).data;let a=0,o=0,l=r-1,h=i-1;for(;o<i&&p(s,r,o);)++o;if(o===i)return c.M.EMPTY;for(;p(s,r,h);)--h;for(;f(s,r,a,o,h);)++a;for(;f(s,r,l,o,h);)--l;return++l,++h,new c.M(a/t,o/t,(l-a)/t,(h-o)/t)}(l,i);h.frame.copyFrom(e),h.updateUvs()}return{texture:h,canvasAndContext:o}}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:r,canvasAndContext:i}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:i,texture:r,usageCount:1},r}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];if(t.usageCount--,0===t.usageCount){d.N.returnCanvasAndContext(t.canvasAndContext),u.W.returnTexture(t.texture);const r=t.texture.source;r.resource=null,r.uploadMethodId="unknown",r.alphaMode="no-premultiply-alpha",this._activeTextures[e]=null}}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,i){const{canvas:n,context:s}=i,a=(0,b.Z)(t),o=m.P.measureText(e||" ",t),h=o.lines,d=o.lineHeight,u=o.lineWidths,c=o.maxLineWidth,p=o.fontProperties,f=n.height;s.resetTransform(),s.scale(r,r);const g=2*t.padding;if(s.clearRect(0,0,o.width+4+g,o.height+4+g),t._stroke?.width){const e=t._stroke;s.lineWidth=e.width,s.miterLimit=e.miterLimit,s.lineJoin=e.join,s.lineCap=e.cap}let x,_;s.font=a;const T=t.dropShadow?2:1;for(let e=0;e<T;++e){const n=t.dropShadow&&0===e,a=n?Math.ceil(Math.max(1,f)+2*t.padding):0,o=a*r;if(n){s.fillStyle="black",s.strokeStyle="black";const e=t.dropShadow,i=e.color,n=e.alpha;s.shadowColor=l.Q.shared.setValue(i).setAlpha(n).toRgbaString();const a=e.blur*r,h=e.distance*r;s.shadowBlur=a,s.shadowOffsetX=Math.cos(e.angle)*h,s.shadowOffsetY=Math.sin(e.angle)*h+o}else s.globalAlpha=t._fill?.alpha??1,s.fillStyle=t._fill?(0,y.r)(t._fill,s):null,t._stroke?.width&&(s.strokeStyle=(0,y.r)(t._stroke,s)),s.shadowColor="black";let g=(d-p.fontSize)/2;d-p.fontSize<0&&(g=0);const m=t._stroke?.width??0;for(let e=0;e<h.length;e++)x=m/2,_=m/2+e*d+p.ascent+g,"right"===t.align?x+=c-u[e]:"center"===t.align&&(x+=(c-u[e])/2),t._stroke?.width&&this._drawLetterSpacing(h[e],t,i,x+t.padding,_+t.padding-a,!0),void 0!==t._fill&&this._drawLetterSpacing(h[e],t,i,x+t.padding,_+t.padding-a)}}_drawLetterSpacing(e,t,r,i,n,s=!1){const{context:a}=r,o=t.letterSpacing;let l=!1;if(m.P.experimentalLetterSpacingSupported&&(m.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,l=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||l)return void(s?a.strokeText(e,i,n):a.fillText(e,i,n));let h=i;const d=m.P.graphemeSegmenter(e);let u=a.measureText(e).width,c=0;for(let e=0;e<d.length;++e){const t=d[e];s?a.strokeText(t,h,n):a.fillText(t,h,n);let r="";for(let t=e+1;t<d.length;++t)r+=d[t];c=a.measureText(r).width,h+=u-c+o,u=c}}destroy(){this._activeTextures=null}}T.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"canvasText"},i.XO.add(T),i.XO.add(o)},2558:(e,t,r)=>{r.d(t,{M:()=>s});var i=r(2437);const n=new(r(9636).c);function s(e,t,r,s){const a=n;a.minX=0,a.minY=0,a.maxX=e.width/s|0,a.maxY=e.height/s|0;const o=i.W.getOptimalTexture(a.width,a.height,s,!1);return o.source.uploadMethodId="image",o.source.resource=e,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=t/s,o.frame.height=r/s,o.source.emit("update",o.source),o.updateUvs(),o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI4LmFkZGY1NTFjNTU2ZGY1NjQ0MjY5LmpzIiwibWFwcGluZ3MiOiI2SUFHQSxNQUFNQSxFQU9KLFdBQU9DLENBQUtDLEdBQ1ZDLE9BQU9DLGVBQ0xDLEtBQ0EsV0FRQSxDQUNFLEdBQUFDLENBQUlDLEdBQ0ZDLFdBQVdDLG9CQUFvQixTQUFVSixLQUFLSyxhQUM5Q0wsS0FBS00sVUFBWUosRUFDYkEsSUFDRkMsV0FBV0ksaUJBQWlCLFNBQVVQLEtBQUtLLGFBQzNDTCxLQUFLUSxTQUVULEVBQ0EsR0FBQUMsR0FDRSxPQUFPVCxLQUFLTSxTQUNkLElBR0pOLEtBQUtLLFlBQWMsS0FDWkwsS0FBS00sWUFHVk4sS0FBS1UsZ0JBQ0xWLEtBQUtXLFVBQVlDLHVCQUFzQixJQUFNWixLQUFLUSxXQUFTLEVBRTdEUixLQUFLVSxjQUFnQixLQUNmVixLQUFLVyxZQUNQRSxxQkFBcUJiLEtBQUtXLFdBQzFCWCxLQUFLVyxVQUFZLEtBQ25CLEVBRUZYLEtBQUtRLE9BQVMsS0FDWixJQUFLUixLQUFLTSxVQUNSLE9BR0YsSUFBSVEsRUFDQUMsRUFDSixHQUhBZixLQUFLVSxnQkFHRFYsS0FBS00sWUFBY0gsV0FBV2EsT0FDaENGLEVBQVFYLFdBQVdjLFdBQ25CRixFQUFTWixXQUFXZSxnQkFDZixDQUNMLE1BQU0sWUFBRUMsRUFBVyxhQUFFQyxHQUFpQnBCLEtBQUtNLFVBQzNDUSxFQUFRSyxFQUNSSixFQUFTSyxDQUNYLENBQ0FwQixLQUFLcUIsU0FBU2IsT0FBT00sRUFBT0MsR0FDNUJmLEtBQUtzQixRQUFRLEVBRWZ0QixLQUFLVyxVQUFZLEtBQ2pCWCxLQUFLTSxVQUFZLEtBQ2pCTixLQUFLdUIsU0FBVzFCLEVBQVEwQixVQUFZLElBQ3RDLENBTUEsY0FBT0MsR0FDTHJCLFdBQVdDLG9CQUFvQixTQUFVSixLQUFLSyxhQUM5Q0wsS0FBS1UsZ0JBQ0xWLEtBQUtVLGNBQWdCLEtBQ3JCVixLQUFLSyxZQUFjLEtBQ25CTCxLQUFLdUIsU0FBVyxLQUNoQnZCLEtBQUtRLE9BQVMsSUFDaEIsRUFHRmIsRUFBYThCLFVBQVksS0FBY0MsWSx3QkNoRnZDLE1BQU1DLEVBT0osV0FBTy9CLENBQUtDLEdBQ1ZBLEVBQVVDLE9BQU84QixPQUFPLENBQ3RCQyxXQUFXLEVBQ1hDLGNBQWMsR0FDYmpDLEdBQ0hDLE9BQU9DLGVBQ0xDLEtBQ0EsU0FDQSxDQUNFLEdBQUFDLENBQUk4QixHQUNFL0IsS0FBS2dDLFNBQ1BoQyxLQUFLZ0MsUUFBUUMsT0FBT2pDLEtBQUtzQixPQUFRdEIsTUFFbkNBLEtBQUtnQyxRQUFVRCxFQUNYQSxHQUNGQSxFQUFPRyxJQUFJbEMsS0FBS3NCLE9BQVF0QixLQUFNLElBQWdCbUMsSUFFbEQsRUFDQSxHQUFBMUIsR0FDRSxPQUFPVCxLQUFLZ0MsT0FDZCxJQUdKaEMsS0FBS29DLEtBQU8sS0FDVnBDLEtBQUtnQyxRQUFRSSxNQUFNLEVBRXJCcEMsS0FBS3FDLE1BQVEsS0FDWHJDLEtBQUtnQyxRQUFRSyxPQUFPLEVBRXRCckMsS0FBS2dDLFFBQVUsS0FDZmhDLEtBQUsrQixPQUFTbEMsRUFBUWlDLGFBQWVRLEVBQUEsRUFBT0MsT0FBUyxJQUFJRCxFQUFBLEVBQ3JEekMsRUFBUWdDLFdBQ1Y3QixLQUFLcUMsT0FFVCxDQU1BLGNBQU9iLEdBQ0wsR0FBSXhCLEtBQUtnQyxRQUFTLENBQ2hCLE1BQU1RLEVBQVl4QyxLQUFLZ0MsUUFDdkJoQyxLQUFLK0IsT0FBUyxLQUNkUyxFQUFVaEIsU0FDWixDQUNGLEVBR0ZHLEVBQWFGLFVBQVksS0FBY0MsWUN4RHZDLEtBQVdRLElBQUl2QyxHQUNmLEtBQVd1QyxJQUFJUCxFLCtCQ0hmLE1BQU1jLEVBQ0osV0FBQUMsQ0FBWXJCLEdBQ1ZyQixLQUFLMkMsVUFBWXRCLENBQ25CLENBQ0EsSUFBQXVCLENBQUtDLEVBQWNDLEVBQVdDLEdBQ1IvQyxLQUFLMkMsVUFBVUssWUFDdkJDLE1BQU1DLE1BQU1ILEdBQ3hCQSxFQUFlYixJQUFJLENBQ2pCaUIsYUFBYyxTQUNkQyxXQUFXLEVBQ1hDLE9BQVEsYUFDUlAsWUFDQUQsZ0JBRUosQ0FDQSxHQUFBUyxDQUFJQyxFQUFlQyxFQUFZVCxHQUM3Qi9DLEtBQUsyQyxVQUFVSyxZQUFZQyxNQUFNQyxNQUFNSCxHQUN2Q0EsRUFBZWIsSUFBSSxDQUNqQmlCLGFBQWMsU0FDZEUsT0FBUSxZQUNSRCxXQUFXLEdBRWYsQ0FDQSxPQUFBSyxDQUFRQyxHQUNxQixlQUF2QkEsRUFBWUwsT0FDZHJELEtBQUsyQyxVQUFVZ0IsT0FBT2YsS0FBS2MsR0FDSyxjQUF2QkEsRUFBWUwsUUFDckJyRCxLQUFLMkMsVUFBVWdCLE9BQU9MLEtBRTFCLENBQ0EsT0FBQTlCLEdBQ0V4QixLQUFLMkMsVUFBWSxJQUNuQixFQUVGRixFQUFXaEIsVUFBWSxDQUNyQm1DLEtBQU0sQ0FDSixLQUFjQyxXQUNkLEtBQWNDLFlBQ2QsS0FBY0MsYUFFaEJDLEtBQU0sVSx3R0N2Q1IsTUFBTUMsRUFBYSxJQUFJQyxFQUFBLEVBQ3ZCLFNBQVNDLEVBQW9CQyxFQUFRQyxHQVduQyxPQVZBQSxFQUFPQyxRQUNQQyxFQUEwQkgsRUFBUUMsR0FDN0JBLEVBQU9HLFNBQ1ZILEVBQU9wRSxJQUFJLEVBQUcsRUFBRyxFQUFHLEdBRWpCbUUsRUFBT0ssWUFHVkosRUFBT0ssWUFBWU4sRUFBT0ssWUFBWUUsZ0JBRnRDTixFQUFPSyxZQUFZTixFQUFPUSxrQkFBa0JDLGdCQUl2Q1IsQ0FDVCxDQUNBLFNBQVNFLEVBQTBCSCxFQUFRQyxHQUN6QyxHQUFrQyxJQUE5QkQsRUFBT1UscUJBQTZCVixFQUFPVyxXQUM3QyxPQUVGLE1BQU1DLElBQWtCWixFQUFPYSxRQUFRQyxPQUN2QyxJQUFJQyxFQUFjZCxFQUlsQixJQUhJRCxFQUFPSyxhQUFlTyxLQUN4QkcsRUFBYyxJQUFXMUUsTUFBTTZELFNBRTdCRixFQUFPZ0IsV0FDVGYsRUFBT2dCLFFBQVFqQixFQUFPZ0IsV0FBWWhCLEVBQU9TLG9CQUNwQyxDQUNMLEdBQUlULEVBQU9qQixhQUFjLENBQ3ZCLE1BQU1tQyxFQUFhbEIsRUFBT0MsT0FDMUJjLEVBQVlJLFNBQ1ZELEVBQVdFLEtBQ1hGLEVBQVdHLEtBQ1hILEVBQVdJLEtBQ1hKLEVBQVdLLEtBQ1h2QixFQUFPd0IsZUFFWCxDQUNBLE1BQU1DLEVBQVd6QixFQUFPeUIsU0FDeEIsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlELEVBQVNYLE9BQVFZLElBQ25DdkIsRUFBMEJzQixFQUFTQyxHQUFJWCxFQUUzQyxDQUNBLEdBQUlILEVBQWUsQ0FDakIsSUFBSWUsR0FBVyxFQUNmLElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJMUIsRUFBT2EsUUFBUUMsT0FBUVksSUFDckMxQixFQUFPYSxRQUFRYSxHQUFHRSxZQUNmRCxJQUNIQSxHQUFXLEVBQ1haLEVBQVlULFlBQVlOLEVBQU9RLGtCQUFrQkMsaUJBRW5EVCxFQUFPYSxRQUFRYSxHQUFHRSxVQUFVYixHQUFhLElBR3pDWSxJQUNGWixFQUFZVCxZQUFZTixFQUFPUSxrQkFBa0JDLGVBQWVvQixPQUFPaEMsR0FBWWlDLFVBQ25GN0IsRUFBTzJCLFVBQVViLEVBQWFmLEVBQU8rQix5QkFFdkM5QixFQUFPMkIsVUFBVWIsR0FDakIsSUFBV2lCLE9BQU9qQixFQUNwQixNQUFXZixFQUFPSyxjQUNoQkosRUFBTzJCLFVBQVViLEVBQWFmLEVBQU8rQix3QkFDckMsSUFBV0MsT0FBT2pCLEdBRXRCLEMsYUNuREEsTUFBTWtCLEVBQWUsSUFBSUMsRUFBQSxFQUFTLENBQ2hDQyxXQUFZLENBQ1ZDLFVBQVcsQ0FDVEMsT0FBUSxJQUFJQyxhQUFhLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUMvQ0MsT0FBUSxZQUNSQyxPQUFRLEVBQ1JDLE9BQVEsSUFHWkMsWUFBYSxJQUFJQyxZQUFZLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLE1BRS9DLE1BQU1DLEVBQ0osV0FBQXRFLENBQVlyQixHQUNWckIsS0FBS2lILGtCQUFvQixFQUN6QmpILEtBQUtrSCxhQUFlLEdBQ3BCbEgsS0FBS21ILHNCQUF3QixJQUFJQyxFQUFBLEVBQWEsQ0FDNUNDLFdBQVksQ0FBRUMsTUFBTyxJQUFJWixhQUFhLEdBQUk5QyxLQUFNLGFBQ2hEMkQsWUFBYSxDQUFFRCxNQUFPLElBQUlaLGFBQWEsR0FBSTlDLEtBQU0sYUFDakQ0RCxZQUFhLENBQUVGLE1BQU8sSUFBSVosYUFBYSxHQUFJOUMsS0FBTSxhQUNqRDZELGFBQWMsQ0FBRUgsTUFBTyxJQUFJWixhQUFhLEdBQUk5QyxLQUFNLGFBQ2xEOEQsYUFBYyxDQUFFSixNQUFPLElBQUlaLGFBQWEsR0FBSTlDLEtBQU0sYUFDbEQrRCxlQUFnQixDQUFFTCxNQUFPLElBQUlaLGFBQWEsR0FBSTlDLEtBQU0sZUFFdEQ1RCxLQUFLNEgsdUJBQXlCLElBQUlDLEVBQUEsRUFBVSxDQUFDLEdBQzdDN0gsS0FBS3FCLFNBQVdBLENBQ2xCLENBS0EscUJBQUl5RyxHQUNGLE9BQU85SCxLQUFLK0gsbUJBQW1CQyxXQUNqQyxDQUNBLElBQUFwRixDQUFLYyxHQUNILE1BQU1yQyxFQUFXckIsS0FBS3FCLFNBQ2hCNEcsRUFBVXZFLEVBQVliLGFBQWFvRixRQUNwQ2pJLEtBQUtrSCxhQUFhbEgsS0FBS2lILHFCQUMxQmpILEtBQUtrSCxhQUFhbEgsS0FBS2lILG1CQUFxQmpILEtBQUtrSSxrQkFFbkQsTUFBTUMsRUFBYW5JLEtBQUtrSCxhQUFhbEgsS0FBS2lILG1CQUUxQyxHQURBakgsS0FBS2lILG9CQUNrQixJQUFuQmdCLEVBQVEvQyxPQUVWLFlBREFpRCxFQUFXQyxNQUFPLEdBR3BCLE1BQU0vRCxFQUFTOEQsRUFBVzlELE9BQ3RCWCxFQUFZMkUsWUM1RHBCLFNBQW1DQSxFQUFhaEUsR0FDOUNBLEVBQU9DLFFBQ1AsTUFBTUwsRUFBYUksRUFBT2lFLE9BQzFCLElBQUssSUFBSXhDLEVBQUksRUFBR0EsRUFBSXVDLEVBQVluRCxPQUFRWSxJQUFLLENBQzNDLE1BQU15QyxFQUFhRixFQUFZdkMsR0FDM0J5QyxFQUFXQyxvQkFBc0IsSUFHckNuRSxFQUFPaUUsT0FBU0MsRUFBVzFELGVBQzNCMEQsRUFBV3ZDLFVBQVUzQixHQUN2QixDQUNBQSxFQUFPaUUsT0FBU3JFLENBRWxCLENEZ0RNd0UsQ0FBMEIvRSxFQUFZMkUsWUFBYWhFLEdBQzFDWCxFQUFZYixhQUFhNkYsWUFDbENyRSxFQUFPQyxRQUNQRCxFQUFPZ0IsUUFBUTNCLEVBQVliLGFBQWE2RixZQUN4Q3JFLEVBQU9LLFlBQVloQixFQUFZWixVQUFVK0IsaUJBRXpDVixFQUFvQlQsRUFBWVosVUFBV3VCLEdBRTdDLE1BQU1zRSxFQUFxQnRILEVBQVN1SCxhQUFhQSxhQUFhQyxhQUFhQyxPQUMzRSxJQUFJQyxFQUFhQyxJQUNiQyxFQUFVLEVBQ1ZDLEdBQVksRUFDWkMsR0FBZ0IsRUFDaEJDLEdBQVUsRUFDZCxJQUFLLElBQUl0RCxFQUFJLEVBQUdBLEVBQUltQyxFQUFRL0MsT0FBUVksSUFBSyxDQUN2QyxNQUFNbkMsRUFBU3NFLEVBQVFuQyxHQVN2QixHQVJBaUQsRUFBYU0sS0FBS0MsSUFBSVAsRUFBa0MsWUFBdEJwRixFQUFPb0YsV0FBMkJKLEVBQW1CWSxZQUFjNUYsRUFBT29GLFlBQzVHRSxHQUFXdEYsRUFBT3NGLFFBQ08sUUFBckJ0RixFQUFPdUYsVUFDVEEsR0FBWSxFQUNrQixZQUFyQnZGLEVBQU91RixXQUNoQkEsSUFBY0EsRUFBWVAsRUFBbUJPLGFBRXZCdkYsRUFBTzZGLG9CQUFzQm5JLEVBQVN1QyxNQUMzQyxDQUNqQndGLEdBQVUsRUFDVixLQUNGLENBQ0EsR0FBSXpGLEVBQU93RixpQkFBbUI5SCxFQUFTb0ksWUFBWUMsZUFBaUIsR0FBTyxFQUN6RSxFQUFBQyxFQUFBLEdBQUssd0hBQ0xQLEdBQVUsRUFDVixLQUNGLENBQ0FBLEVBQVV6RixFQUFPeUYsU0FBV0EsRUFDNUJELEVBQWdCQSxHQUFpQnhGLEVBQU93RixhQUMxQyxDQUNBLElBQUtDLEVBRUgsWUFEQWpCLEVBQVdDLE1BQU8sR0FHcEIsTUFBTXdCLEVBQVd2SSxFQUFTdUgsYUFBYWlCLGFBQ3ZDeEYsRUFBT3lGLE1BQU1mLEdBQVlnQixVQUFVLEVBQUdILEVBQVM5SSxNQUFPLEVBQUc4SSxFQUFTN0ksUUFBUWlKLE9BQU9GLE1BQU0sRUFBSWYsR0FBWWtCLElBQWMsRUFBVmhCLEdBQ3RHNUUsRUFBTzZGLFlBSVovQixFQUFXQyxNQUFPLEVBQ2xCRCxFQUFXOUQsT0FBU0EsRUFDcEI4RCxFQUFXZ0IsY0FBZ0JBLEVBQzNCaEIsRUFBV3JGLFVBQVlZLEVBQVlaLFVBQ25DcUYsRUFBV3RGLGFBQWVhLEVBQVliLGFBQ3RDc0YsRUFBV2dDLHNCQUF3QjlJLEVBQVN1SCxhQUFhd0IsY0FDekRqQyxFQUFXa0MsYUFBZUMsRUFBQSxFQUFZQyxrQkFDcENsRyxFQUFPdkQsTUFDUHVELEVBQU90RCxPQUNQZ0ksRUFDQUcsR0FFRjdILEVBQVN1SCxhQUFhNEIsS0FBS3JDLEVBQVdrQyxjQUFjLEdBQ3BEaEosRUFBU29KLGVBQWU3SCxLQUFLLENBQzNCaUUsT0FBUXhDLEtBakJSOEQsRUFBV0MsTUFBTyxDQW1CdEIsQ0FDQSxHQUFBOUUsR0FDRSxNQUFNakMsRUFBV3JCLEtBQUtxQixTQUN0QnJCLEtBQUtpSCxvQkFDTCxNQUFNa0IsRUFBYW5JLEtBQUtrSCxhQUFhbEgsS0FBS2lILG1CQUMxQyxHQUFJa0IsRUFBV0MsS0FDYixPQUVGcEksS0FBSytILGtCQUFvQkksRUFDekIsTUFBTWtDLEVBQWVsQyxFQUFXa0MsYUFDMUJoRyxFQUFTOEQsRUFBVzlELE9BQzFCLElBQUkyRCxFQUFjMEMsRUFBQSxFQUFRQyxNQUUxQixHQURBdEosRUFBU3VILGFBQWFnQyxtQkFDbEJ6QyxFQUFXZ0IsY0FBZSxDQUM1QixNQUFNMEIsRUFBaUI3SyxLQUFLaUgsa0JBQW9CLEVBQUlqSCxLQUFLa0gsYUFBYWxILEtBQUtpSCxrQkFBb0IsR0FBRzVDLE9BQVMsS0FDckd1RSxFQUFldkgsRUFBU3VILGFBQWFrQyxnQkFBZ0IzQyxFQUFXZ0MsdUJBQ3RFbkMsRUFBY2hJLEtBQUsrSyxlQUFlbkMsRUFBY3ZFLEVBQVF3RyxFQUMxRCxDQUNBMUMsRUFBV0gsWUFBY0EsRUFDekIsTUFBTUMsRUFBVUUsRUFBV3RGLGFBQWFvRixRQUl4QyxHQUhBakksS0FBSzRILHVCQUF1Qm9ELFlBQVlYLEVBQWF2QixPQUFPbUMsTUFBTyxHQUNuRWpMLEtBQUs0SCx1QkFBdUJvRCxZQUFZaEQsRUFBWWMsT0FBUSxHQUM1RHpILEVBQVNvSixlQUFlbkgsTUFDRCxJQUFuQjJFLEVBQVEvQyxPQUNWK0MsRUFBUSxHQUFHaUQsTUFBTWxMLEtBQU1xSyxFQUFjbEMsRUFBV2dDLHVCQUF1QixHQUN2RUcsRUFBQSxFQUFZYSxjQUFjZCxPQUNyQixDQUNMLElBQUllLEVBQU9qRCxFQUFXa0MsYUFDbEJnQixFQUFPZixFQUFBLEVBQVlDLGtCQUNyQmxHLEVBQU92RCxNQUNQdUQsRUFBT3RELE9BQ1BxSyxFQUFLdEMsT0FBT1MsYUFDWixHQUVFekQsRUFBSSxFQUNSLElBQUtBLEVBQUksRUFBR0EsRUFBSW1DLEVBQVEvQyxPQUFTLElBQUtZLEVBQUcsQ0FDeEJtQyxFQUFRbkMsR0FDaEJvRixNQUFNbEwsS0FBTW9MLEVBQU1DLEdBQU0sR0FDL0IsTUFBTUMsRUFBSUYsRUFDVkEsRUFBT0MsRUFDUEEsRUFBT0MsQ0FDVCxDQUNBckQsRUFBUW5DLEdBQUdvRixNQUFNbEwsS0FBTW9MLEVBQU1qRCxFQUFXZ0MsdUJBQXVCLEdBQy9ERyxFQUFBLEVBQVlhLGNBQWNDLEdBQzFCZCxFQUFBLEVBQVlhLGNBQWNFLEVBQzVCLENBQ0lsRCxFQUFXZ0IsZUFDYm1CLEVBQUEsRUFBWWEsY0FBY25ELEVBRTlCLENBQ0EsY0FBQStDLENBQWVRLEVBQW1CbEgsRUFBUXdHLEdBQ3hDLE1BQU1XLEVBQXVCRCxFQUFrQjFDLGFBQWFDLE9BQU9TLFlBQzdEdkIsRUFBY3NDLEVBQUEsRUFBWUMsa0JBQzlCbEcsRUFBT3ZELE1BQ1B1RCxFQUFPdEQsT0FDUHlLLEdBQ0EsR0FFRixJQUFJQyxFQUFJcEgsRUFBT21CLEtBQ1hrRyxFQUFJckgsRUFBT29CLEtBQ1hvRixJQUNGWSxHQUFLWixFQUFlckYsS0FDcEJrRyxHQUFLYixFQUFlcEYsTUFFdEJnRyxFQUFJcEMsS0FBS3NDLE1BQU1GLEVBQUlELEdBQ25CRSxFQUFJckMsS0FBS3NDLE1BQU1ELEVBQUlGLEdBQ25CLE1BQU0xSyxFQUFRdUksS0FBS1csS0FBSzNGLEVBQU92RCxNQUFRMEssR0FDakN6SyxFQUFTc0ksS0FBS1csS0FBSzNGLEVBQU90RCxPQUFTeUssR0FRekMsT0FQQXhMLEtBQUtxQixTQUFTdUgsYUFBYWdELGNBQ3pCTCxFQUNBdkQsRUFDQSxDQUFFeUQsSUFBR0MsS0FDTCxDQUFFNUssUUFBT0MsVUFDVCxDQUFFMEssRUFBRyxFQUFHQyxFQUFHLElBRU4xRCxDQUNULENBQ0EsV0FBQTZELENBQVlsSSxFQUFRbUksRUFBT0MsRUFBUXpILEdBQ2pDLE1BQU1qRCxFQUFXckIsS0FBS3FCLFNBQ2hCOEcsRUFBYW5JLEtBQUtrSCxhQUFhbEgsS0FBS2lILG1CQUNwQzVDLEVBQVM4RCxFQUFXOUQsT0FDcEJ3QyxFQUFTbUYsRUFBQSxFQUFNekosT0FFZjBKLEVBRHdCOUQsRUFBV2dDLHdCQUNPNEIsRUFDaEQsSUFBSWhELEVBQWEvSSxLQUFLcUIsU0FBU3VILGFBQWFzRCxpQkFBaUJyRCxhQUFhQyxPQUFPUyxZQUM3RTRDLEVBQWVuTSxLQUFLaUgsa0JBQW9CLEVBQzVDLEtBQU9rRixFQUFlLEdBQUtuTSxLQUFLa0gsYUFBYWlGLEdBQWMvRCxRQUN2RCtELEVBRUFBLEVBQWUsSUFDakJwRCxFQUFhL0ksS0FBS2tILGFBQWFpRixHQUFjOUIsYUFBYXZCLE9BQU9TLGFBRW5FLE1BQU02QyxFQUFpQnBNLEtBQUttSCxzQkFDdEJrRixFQUFXRCxFQUFlQyxTQUMxQkMsRUFBY0QsRUFBUzVFLGFBQ3ZCOEUsRUFBWUYsRUFBU2hGLFdBQ3JCbUYsRUFBYUgsRUFBUzlFLFlBQ3RCa0YsRUFBYUosRUFBUzdFLFlBQ3RCa0YsRUFBY0wsRUFBUzNFLGFBQ3ZCaUYsRUFBZ0JOLEVBQVMxRSxlQUMvQixHQUFJc0UsRUFBZSxDQUNqQixJQUFJVyxFQUFZNU0sS0FBS2lILGtCQUNyQixLQUFPMkYsRUFBWSxHQUFHLENBQ3BCQSxJQUNBLE1BQU1DLEVBQWM3TSxLQUFLa0gsYUFBYWxILEtBQUtpSCxrQkFBb0IsR0FDL0QsSUFBSzRGLEVBQVl6RSxLQUFNLENBQ3JCdkIsRUFBTzRFLEVBQUlvQixFQUFZeEksT0FBT21CLEtBQzlCcUIsRUFBTzZFLEVBQUltQixFQUFZeEksT0FBT29CLEtBQzlCLEtBQ0YsQ0FDRixDQUNBNkcsRUFBWSxHQUFLakksRUFBT21CLEtBQU9xQixFQUFPNEUsRUFDdENhLEVBQVksR0FBS2pJLEVBQU9vQixLQUFPb0IsRUFBTzZFLENBQ3hDLE1BQ0VZLEVBQVksR0FBSyxFQUNqQkEsRUFBWSxHQUFLLEVBRW5CQSxFQUFZLEdBQUtSLEVBQU1nQixNQUFNaE0sTUFDN0J3TCxFQUFZLEdBQUtSLEVBQU1nQixNQUFNL0wsT0FDN0J3TCxFQUFVLEdBQUtULEVBQU1oRCxPQUFPaEksTUFDNUJ5TCxFQUFVLEdBQUtULEVBQU1oRCxPQUFPL0gsT0FDNUJ3TCxFQUFVLEdBQUssRUFBSUEsRUFBVSxHQUM3QkEsRUFBVSxHQUFLLEVBQUlBLEVBQVUsR0FDN0JDLEVBQVcsR0FBS1YsRUFBTWhELE9BQU9pRSxXQUM3QlAsRUFBVyxHQUFLVixFQUFNaEQsT0FBT2tFLFlBQzdCUixFQUFXLEdBQUssRUFBSUEsRUFBVyxHQUMvQkEsRUFBVyxHQUFLLEVBQUlBLEVBQVcsR0FDL0JDLEVBQVcsR0FBSyxHQUFNRCxFQUFXLEdBQ2pDQyxFQUFXLEdBQUssR0FBTUQsRUFBVyxHQUNqQ0MsRUFBVyxHQUFLWCxFQUFNZ0IsTUFBTWhNLE1BQVF5TCxFQUFVLEdBQUssR0FBTUMsRUFBVyxHQUNwRUMsRUFBVyxHQUFLWCxFQUFNZ0IsTUFBTS9MLE9BQVN3TCxFQUFVLEdBQUssR0FBTUMsRUFBVyxHQUNyRSxNQUFNUyxFQUFjak4sS0FBS3FCLFNBQVN1SCxhQUFhc0QsaUJBQWlCckQsYUFDaEU2RCxFQUFZLEdBQUs3RixFQUFPNEUsRUFBSTFDLEVBQzVCMkQsRUFBWSxHQUFLN0YsRUFBTzZFLEVBQUkzQyxFQUM1QjJELEVBQVksR0FBS08sRUFBWW5FLE9BQU9oSSxNQUFRaUksRUFDNUMyRCxFQUFZLEdBQUtPLEVBQVluRSxPQUFPL0gsT0FBU2dJLEVBQzdDLE1BQU1ILEVBQWU1SSxLQUFLcUIsU0FBU3VILGFBQWFrQyxnQkFBZ0JpQixHQVdoRSxHQVZBMUssRUFBU3VILGFBQWE0QixLQUFLdUIsSUFBVXpILEdBQ2pDeUgsYUFBa0JyQixFQUFBLEdBQ3BCaUMsRUFBYyxHQUFLWixFQUFPZSxNQUFNaE0sTUFDaEM2TCxFQUFjLEdBQUtaLEVBQU9lLE1BQU0vTCxTQUVoQzRMLEVBQWMsR0FBSy9ELEVBQWE5SCxNQUNoQzZMLEVBQWMsR0FBSy9ELEVBQWE3SCxRQUVsQzRMLEVBQWMsR0FBSy9ELEVBQWFzRSxRQUFVLEVBQUksRUFDOUNkLEVBQWVlLFNBQ1g5TCxFQUFTMkIsWUFBWW9LLGFBQWMsQ0FDckMsTUFBTUMsRUFBZ0JoTSxFQUFTMkIsWUFBWW9LLGFBQWFFLGVBQWVsQixHQUN2RXBNLEtBQUs0SCx1QkFBdUJvRCxZQUFZcUMsRUFBZSxFQUN6RCxNQUNFck4sS0FBSzRILHVCQUF1Qm9ELFlBQVlvQixFQUFnQixHQUUxRHBNLEtBQUs0SCx1QkFBdUJvRCxZQUFZYyxFQUFNaEQsT0FBUSxHQUN0RDlJLEtBQUs0SCx1QkFBdUJvRCxZQUFZYyxFQUFNaEQsT0FBT21DLE1BQU8sR0FDNUR0SCxFQUFPNEosT0FBTyxHQUFLdk4sS0FBSzRILHVCQUN4QnZHLEVBQVNtTSxRQUFRQyxLQUFLLENBQ3BCQyxTQUFVckgsRUFDVnNILE9BQVFoSyxFQUNSaUssTUFBT2pLLEVBQU9rSyxPQUNkQyxTQUFVLGtCQUVSek0sRUFBU3VDLE9BQVMsSUFBYW1LLE9BQ2pDMU0sRUFBU3VILGFBQWFnQyxrQkFFMUIsQ0FDQSxjQUFBMUMsR0FDRSxNQUFPLENBQ0xFLE1BQU0sRUFDTmlDLGFBQWMsS0FDZGhHLE9BQVEsSUFBSTJKLEVBQUEsRUFDWmxMLFVBQVcsS0FDWEQsYUFBYyxLQUNkc0csZUFBZSxFQUNmZ0Isc0JBQXVCLEtBRTNCLENBU0EscUJBQUE4RCxDQUFzQkMsRUFBY0MsR0FDbEMsTUFBTUMsRUFBT3BPLEtBQUsrSCxrQkFDWnNHLEVBQWVILEVBQWFqTyxJQUNoQ21PLEVBQUsvRCxhQUFhaUUsUUFBUXhOLE1BQzFCLEVBQ0EsRUFDQXNOLEVBQUsvRCxhQUFhaUUsUUFBUXZOLE9BQzFCcU4sRUFBSy9KLE9BQU9tQixLQUNaNEksRUFBSy9KLE9BQU9vQixNQUVSWixFQUFpQnNKLEVBQU90SixlQUFlb0IsT0FBTy9CLEVBQUEsRUFBTzNCLFFBUTNELE9BUEFzQyxFQUFlcUIsU0FDZm1JLEVBQWFFLFFBQVExSixHQUNyQndKLEVBQWF2RSxNQUNYLEVBQUlxRSxFQUFPSyxRQUFRMUIsTUFBTWhNLE1BQ3pCLEVBQUlxTixFQUFPSyxRQUFRMUIsTUFBTS9MLFFBRTNCc04sRUFBYUksVUFBVU4sRUFBT08sT0FBT2pELEVBQUcwQyxFQUFPTyxPQUFPaEQsR0FDL0MyQyxDQUNULEVBR0ZySCxFQUFhdkYsVUFBWSxDQUN2Qm1DLEtBQU0sQ0FDSixLQUFjK0ssWUFDZCxLQUFjQyxjQUVoQjVLLEtBQU0sVUUzVVIsS0FBVzlCLElBQUk4RSxHQUNmLEtBQVc5RSxJQUFJTyxFLHFEQ0xmLE1BQU1vTSxFQUFrQixDQUN0QjdLLEtBQU0sb0JBQ044SyxPQUFRLENBQ05DLE9BRUUsa1FBV0ZDLEtBRUUsc0hBS0ZDLElBRUUsZ01BU0FDLEVBQXdCLElBQ3pCTCxFQUNIQyxPQUFRLElBQ0hELEVBQWdCQyxPQUVuQkMsT0FBUUYsRUFBZ0JDLE9BQU9DLE9BQU9JLFFBQVEsV0FBWSxjQUd4REMsRUFBb0IsQ0FDeEJwTCxLQUFNLG9CQUNOOEssT0FBUSxDQUNOQyxPQUVFLGdJQU9GQyxLQUVFLHlGQUtGQyxJQUVFLHNKLGlCQ3pETixTQUFTSSxFQUFvQkMsRUFBTUMsRUFBSzFJLEdBQ3RDLE1BQU0ySSxHQUFTRixHQUFRLEdBQUssS0FBTyxJQUNuQ0MsRUFBSTFJLE1BQW9CLElBQVB5SSxHQUFjLElBQU1FLEVBQ3JDRCxFQUFJMUksTUFBYXlJLEdBQVEsRUFBSSxLQUFPLElBQU1FLEVBQzFDRCxFQUFJMUksTUFBYXlJLEdBQVEsR0FBSyxLQUFPLElBQU1FLEVBQzNDRCxFQUFJMUksS0FBWTJJLENBQ2xCLEMsaUdDTkEsTUFBTUMsRUFDSixXQUFBL00sQ0FBWXJCLEVBQVVxTyxHQUNwQjFQLEtBQUs0TixNQUFRK0IsRUFBQSxFQUFNQyxRQUVuQjVQLEtBQUs2UCxxQkFBdUMvUCxPQUFPZ1EsT0FBTyxNQUMxRDlQLEtBQUsrUCx3QkFBMEIvUCxLQUFLZ1Esa0JBQWtCeEYsS0FBS3hLLE1BQzNEQSxLQUFLcUIsU0FBV0EsRUFDaEJyQixLQUFLaVEsU0FBV1AsRUFDaEIxUCxLQUFLaVEsU0FBU3JRLE1BQ2hCLENBQ0Esa0JBQUFzUSxDQUFtQkMsR0FDakIsTUFBTUMsRUFBVUQsRUFBU0MsUUFDbkJDLElBQWVyUSxLQUFLNlAscUJBQXFCTSxFQUFTRyxLQUNsREMsRUFBYXZRLEtBQUtxQixTQUFTbVAsZ0JBQWdCQyxpQkFBaUJMLEdBQ2xFLFNBQUlHLEVBQVdHLGFBQWVMLElBQWVFLEVBQVdHLFlBSTFELENBQ0EsYUFBQUMsQ0FBY1IsRUFBVXBOLEdBQ3RCLE1BQU13TixFQUFhdlEsS0FBS3FCLFNBQVNtUCxnQkFBZ0JDLGlCQUFpQk4sRUFBU0MsU0FDdkVELEVBQVNTLHFCQUNYVCxFQUFTUyxvQkFBcUIsRUFDOUI1USxLQUFLNlEsU0FBU1YsSUFFWkksRUFBV0csWUFDYjFRLEtBQUs4USxjQUFjWCxFQUFVcE4sSUFFN0IvQyxLQUFLcUIsU0FBUzJCLFlBQVlDLE1BQU1DLE1BQU1ILEdBQ3RDQSxFQUFlYixJQUFJaU8sR0FFdkIsQ0FDQSxnQkFBQVksQ0FBaUJaLEdBQ2YsTUFBTWEsRUFBVWhSLEtBQUs2UCxxQkFBcUJNLEVBQVNHLEtBQ25ELEdBQUlVLEVBQ0YsSUFBSyxJQUFJbEwsRUFBSSxFQUFHQSxFQUFJa0wsRUFBUTlMLE9BQVFZLElBQUssQ0FDdkMsTUFBTTdDLEVBQVErTixFQUFRbEwsR0FDdEI3QyxFQUFNZ08sU0FBU0MsY0FBY2pPLEVBQy9CLENBRUosQ0FDQSxpQkFBQStNLENBQWtCRyxHQUNablEsS0FBSzZQLHFCQUFxQk0sRUFBU0csTUFDckN0USxLQUFLbVIsMEJBQTBCaEIsRUFBU0csS0FFMUNILEVBQVNpQixJQUFJLFlBQWFwUixLQUFLK1Asd0JBQ2pDLENBQ0EsT0FBQXRNLENBQVEwTSxHQUNOLElBQUtBLEVBQVNrQixhQUNaLE9BQ0YsTUFBTWhRLEVBQVdyQixLQUFLcUIsU0FDaEIrTyxFQUFVRCxFQUFTQyxRQUV6QixJQURzQi9PLEVBQVNtUCxnQkFDWmMsY0FBY2xCLEdBQVNZLFFBQVE5TCxPQUNoRCxPQUVGLE1BQU15SSxFQUFTeUMsRUFBUW1CLGNBQWdCdlIsS0FBS2lRLFNBQVN0QyxPQUNyRDNOLEtBQUs0TixNQUFNNEQsVUFBWXJCLEVBQVNzQixlQUNoQyxNQUFNQyxFQUFnQi9ELEVBQU9nRSxVQUFVRCxjQUFjckYsU0FDckRxRixFQUFjRSxpQkFBbUJ6QixFQUFTdkssZUFDMUM4TCxFQUFjRyxPQUFTeFEsRUFBU3lRLGFBQWUzQixFQUFTMkIsY0FDeEQsT0FDRTNCLEVBQVM0QixnQkFDVEwsRUFBY00sT0FDZCxHQUVGaFMsS0FBS2lRLFNBQVN4TSxRQUFRekQsS0FBTW1RLEVBQzlCLENBQ0EsUUFBQVUsQ0FBU1YsR0FDUCxNQUFNRSxJQUFlclEsS0FBSzZQLHFCQUFxQk0sRUFBU0csS0FDbERDLEVBQWF2USxLQUFLcUIsU0FBU21QLGdCQUFnQkMsaUJBQWlCTixFQUFTQyxTQUN2RUMsR0FDRnJRLEtBQUttUiwwQkFBMEJoQixFQUFTRyxLQUV0Q0MsRUFBV0csYUFDYjFRLEtBQUtpUywwQkFBMEI5QixHQUVqQ0EsRUFBUytCLFFBQVUzQixFQUFXRyxXQUNoQyxDQUNBLGFBQUFJLENBQWNYLEVBQVVwTixHQUN0QixNQUFNb1AsRUFBWW5TLEtBQUtxQixTQUFTMkIsWUFBWUMsTUFDdEMrTixFQUFVaFIsS0FBS29TLHlCQUF5QmpDLEdBQzlDLElBQUssSUFBSXJLLEVBQUksRUFBR0EsRUFBSWtMLEVBQVE5TCxPQUFRWSxJQUFLLENBQ3ZDLE1BQU03QyxFQUFRK04sRUFBUWxMLEdBQ3RCcU0sRUFBVUUsV0FBV3BQLEVBQU9GLEVBQzlCLENBQ0YsQ0FDQSx3QkFBQXFQLENBQXlCakMsR0FDdkIsT0FBT25RLEtBQUs2UCxxQkFBcUJNLEVBQVNHLE1BQVF0USxLQUFLaVMsMEJBQTBCOUIsRUFDbkYsQ0FDQSx5QkFBQThCLENBQTBCOUIsR0FDeEIsTUFBTUMsRUFBVUQsRUFBU0MsUUFDbkJHLEVBQWF2USxLQUFLcUIsU0FBU21QLGdCQUFnQmMsY0FBY2xCLEdBQ3pEa0MsRUFBY3RTLEtBQUtxQixTQUFTeVEsYUFBZTNCLEVBQVMyQixhQUNwRGQsRUFBVVQsRUFBV1MsUUFBUXVCLEtBQUt0UCxJQUN0QyxNQUFNdVAsRUFBYSxJQUFRL1IsSUFBSWdTLEVBQUEsR0FJL0IsT0FIQXhQLEVBQU1nRCxPQUFPdU0sR0FDYkEsRUFBV2pLLFdBQWE0SCxFQUN4QnFDLEVBQVdGLFlBQWNBLEVBQ2xCRSxDQUFVLElBTW5CLFlBSmdELElBQTVDeFMsS0FBSzZQLHFCQUFxQk0sRUFBU0csTUFDckNILEVBQVN1QyxHQUFHLFlBQWExUyxLQUFLK1AseUJBRWhDL1AsS0FBSzZQLHFCQUFxQk0sRUFBU0csS0FBT1UsRUFDbkNBLENBQ1QsQ0FDQSx5QkFBQUcsQ0FBMEJ3QixHQUN4QjNTLEtBQUs2UCxxQkFBcUI4QyxHQUFhQyxTQUFTM1AsSUFDOUMsSUFBUW1ELE9BQU9uRCxFQUFNLElBRXZCakQsS0FBSzZQLHFCQUFxQjhDLEdBQWUsSUFDM0MsQ0FDQSxPQUFBblIsR0FDRXhCLEtBQUtxQixTQUFXLEtBQ2hCckIsS0FBS2lRLFNBQVN6TyxVQUNkeEIsS0FBS2lRLFNBQVcsS0FDaEJqUSxLQUFLNE4sTUFBUSxLQUNiLElBQUssTUFBTTlILEtBQUs5RixLQUFLNlAscUJBQ25CN1AsS0FBS21SLDBCQUEwQnJMLEdBRWpDOUYsS0FBSzZQLHFCQUF1QixJQUM5QixFQUdGSixFQUFhaE8sVUFBWSxDQUN2Qm1DLEtBQU0sQ0FDSixLQUFjQyxXQUNkLEtBQWNDLFlBQ2QsS0FBY0MsYUFFaEJDLEtBQU0sWUNySVIsS0FBVzlCLElBQUl1TixHQUNmLEtBQVd2TixJQUFJMlEsRUFBQSxHLHFHQ0lmLE1BQU1DLEVBQ0osV0FBQXBRLENBQVlyQixFQUFVcU8sR0FDcEIxUCxLQUFLMFIsY0FBZ0IsSUFBSXRLLEVBQUEsRUFBYSxDQUNwQ3dLLGlCQUFrQixDQUFFdEssTUFBTyxJQUFJcEQsRUFBQSxFQUFVTixLQUFNLGVBQy9Db08sT0FBUSxDQUFFMUssTUFBTyxJQUFJWixhQUFhLENBQUMsRUFBRyxFQUFHLEVBQUcsSUFBSzlDLEtBQU0sYUFDdkRpTyxPQUFRLENBQUV2SyxNQUFPLEVBQUcxRCxLQUFNLFNBRTVCNUQsS0FBSytTLHVCQUF5QixJQUFJbEwsRUFBQSxFQUFVLENBQzFDLEVBQUc3SCxLQUFLMFIsZ0JBRVYxUixLQUFLZ1QsY0FBZ0NsVCxPQUFPZ1EsT0FBTyxNQUNuRDlQLEtBQUtpVCxzQkFBd0NuVCxPQUFPZ1EsT0FBTyxNQUMzRDlQLEtBQUsrUCx3QkFBMEIvUCxLQUFLZ1Esa0JBQWtCeEYsS0FBS3hLLE1BQzNEQSxLQUFLcUIsU0FBV0EsRUFDaEJyQixLQUFLaVEsU0FBV1AsRUFDaEIxUCxLQUFLaVEsU0FBU3JRLE1BQ2hCLENBQ0Esa0JBQUFzUSxDQUFtQmdELEdBQ2pCLE1BQU1DLEVBQVduVCxLQUFLb1QsYUFBYUYsR0FDN0I3QyxFQUFhOEMsRUFBU2pCLFFBQ3RCbUIsRUFBWUgsRUFBS2hCLFFBRXZCLEdBREFpQixFQUFTakIsUUFBVW1CLEVBQ2ZoRCxJQUFlZ0QsRUFDakIsT0FBTyxFQUNGLEdBQUlBLEVBQVcsQ0FDcEIsTUFBTTNGLEVBQVd3RixFQUFLSSxVQUN0QixHQUFJNUYsRUFBUzZGLFFBQVFyTyxTQUFXaU8sRUFBU0ssV0FBYTlGLEVBQVMrRixVQUFVdk8sU0FBV2lPLEVBQVNPLFdBRzNGLE9BRkFQLEVBQVNLLFVBQVk5RixFQUFTNkYsUUFBUXJPLE9BQ3RDaU8sRUFBU08sV0FBYWhHLEVBQVMrRixVQUFVdk8sUUFDbEMsRUFFVCxNQUFNeU8sRUFBZ0IzVCxLQUFLNFQsa0JBQWtCVixHQUN2QzFFLEVBQVUwRSxFQUFLMUUsUUFDckIsR0FBSW1GLEVBQWNuRixRQUFRRixVQUFZRSxFQUFRRixTQUN4Q3FGLEVBQWNuRixRQUFRRixVQUFZRSxFQUFRRixRQUM1QyxPQUFRcUYsRUFBYzFDLFNBQVM0QyxzQkFBc0JGLEVBQWVuRixFQUcxRSxDQUNBLE9BQU8sQ0FDVCxDQUNBLGFBQUFtQyxDQUFjdUMsRUFBTW5RLEdBQ2xCLE1BQU0rUSxFQUFVOVQsS0FBS3FCLFNBQVMyQixZQUFZQyxPQUNwQyxRQUFFaVAsR0FBWWxTLEtBQUtvVCxhQUFhRixHQUN0QyxHQUFJaEIsRUFBUyxDQUNYLE1BQU02QixFQUFtQi9ULEtBQUs0VCxrQkFBa0JWLEdBQ2hEYSxFQUFpQnZGLFFBQVUwRSxFQUFLYyxTQUNoQ0QsRUFBaUJyRyxTQUFXd0YsRUFBS0ksVUFDakNRLEVBQVF6QixXQUFXMEIsRUFBa0JoUixFQUN2QyxNQUNFK1EsRUFBUTVRLE1BQU1ILEdBQ2RBLEVBQWViLElBQUlnUixFQUV2QixDQUNBLGdCQUFBbkMsQ0FBaUJtQyxHQUNmLEdBQUlBLEVBQUtoQixRQUFTLENBQ2hCLE1BQU02QixFQUFtQi9ULEtBQUtpVCxzQkFBc0JDLEVBQUs1QyxLQUN6RHlELEVBQWlCdkYsUUFBVTBFLEVBQUtjLFNBQ2hDRCxFQUFpQnJHLFNBQVd3RixFQUFLSSxVQUNqQ1MsRUFBaUI5QyxTQUFTQyxjQUFjNkMsRUFDMUMsQ0FDRixDQUNBLGlCQUFBL0QsQ0FBa0JrRCxHQUNoQmxULEtBQUtnVCxjQUFjRSxFQUFLNUMsS0FBTyxLQUMvQixNQUFNMkQsRUFBVWpVLEtBQUtpVCxzQkFBc0JDLEVBQUs1QyxLQUM1QzJELElBQ0YsSUFBUTdOLE9BQU82TixHQUNmalUsS0FBS2lULHNCQUFzQkMsRUFBSzVDLEtBQU8sTUFFekM0QyxFQUFLOUIsSUFBSSxZQUFhcFIsS0FBSytQLHdCQUM3QixDQUNBLE9BQUF0TSxDQUFReVAsR0FDTixJQUFLQSxFQUFLN0IsYUFDUixPQUNGNkIsRUFBS3RGLE1BQU00RCxXQUFZLEVBQUEwQyxFQUFBLEdBQTBCaEIsRUFBS3pCLGVBQWdCeUIsRUFBSzFFLFFBQVFGLFNBQ25GLE1BQU1vRCxFQUFnQjFSLEtBQUswUixjQUMzQkEsRUFBY3JGLFNBQVN1RixpQkFBbUJzQixFQUFLdE4sZUFDL0M4TCxFQUFjckYsU0FBU3dGLE9BQVM3UixLQUFLcUIsU0FBU3lRLGFBQWVvQixFQUFLcEIsYUFDbEVKLEVBQWN2RSxVQUNkLE9BQ0UrRixFQUFLbkIsZ0JBQ0xMLEVBQWNyRixTQUFTMkYsT0FDdkIsR0FFRmhTLEtBQUtpUSxTQUFTeE0sUUFBUXpELEtBQU1rVCxFQUM5QixDQUNBLFlBQUFFLENBQWFGLEdBQ1gsT0FBT2xULEtBQUtnVCxjQUFjRSxFQUFLNUMsTUFBUXRRLEtBQUttVSxjQUFjakIsRUFDNUQsQ0FDQSxhQUFBaUIsQ0FBY2pCLEdBT1osT0FOQWxULEtBQUtnVCxjQUFjRSxFQUFLNUMsS0FBTyxDQUM3QjRCLFFBQVNnQixFQUFLaEIsUUFDZHNCLFVBQVdOLEVBQUtJLFVBQVVDLFNBQVNyTyxPQUNuQ3dPLFdBQVlSLEVBQUtJLFVBQVVHLFdBQVd2TyxRQUV4Q2dPLEVBQUtSLEdBQUcsWUFBYTFTLEtBQUsrUCx5QkFDbkIvUCxLQUFLZ1QsY0FBY0UsRUFBSzVDLElBQ2pDLENBQ0EsaUJBQUFzRCxDQUFrQlYsR0FDaEIsT0FBT2xULEtBQUtpVCxzQkFBc0JDLEVBQUs1QyxNQUFRdFEsS0FBS29VLG1CQUFtQmxCLEVBQ3pFLENBQ0Esa0JBQUFrQixDQUFtQmxCLEdBQ2pCLE1BQU1lLEVBQVUsSUFBUXhULElBQUk0VCxFQUFBLEdBTTVCLE9BTEFKLEVBQVExTCxXQUFhMkssRUFDckJlLEVBQVF6RixRQUFVMEUsRUFBS2MsU0FDdkJDLEVBQVFLLFVBQVlwQixFQUFLdE4sZUFDekJxTyxFQUFRM0IsWUFBY3RTLEtBQUtxQixTQUFTeVEsYUFBZW9CLEVBQUtwQixhQUN4RDlSLEtBQUtpVCxzQkFBc0JDLEVBQUs1QyxLQUFPMkQsRUFDaENBLENBQ1QsQ0FDQSxPQUFBelMsR0FDRSxJQUFLLE1BQU1zRSxLQUFLOUYsS0FBS2lULHNCQUNmalQsS0FBS2lULHNCQUFzQm5OLElBQzdCLElBQVFNLE9BQU9wRyxLQUFLaVQsc0JBQXNCbk4sSUFHOUM5RixLQUFLaVQsc0JBQXdCLEtBQzdCalQsS0FBS2dULGNBQWdCLEtBQ3JCaFQsS0FBSzBSLGNBQWdCLEtBQ3JCMVIsS0FBSytTLHVCQUF5QixLQUM5Qi9TLEtBQUtpUSxTQUFTek8sVUFDZHhCLEtBQUtpUSxTQUFXLEtBQ2hCalEsS0FBS3FCLFNBQVcsSUFDbEIsRUFHRnlSLEVBQVNyUixVQUFZLENBQ25CbUMsS0FBTSxDQUNKLEtBQWNDLFdBQ2QsS0FBY0MsWUFDZCxLQUFjQyxhQUVoQkMsS0FBTSxRQzFJUixLQUFXOUIsSUFBSTRRLEUsa0NDSGYsTUFBTXVCLEVBQ0osV0FBQTNSLEdBQ0UxQyxLQUFLdVUsWUFBYyxVQUNuQnZVLEtBQUt3VSxZQUFhLEVBQ2xCeFUsS0FBS3lVLFlBQWMsRUFDbkJ6VSxLQUFLMFUsZ0JBQWtCLEVBQ3ZCMVUsS0FBS3NTLFlBQWMsRUFDbkJ0UyxLQUFLaVIsU0FBVyxLQUNoQmpSLEtBQUsyVSxPQUFTLEtBQ2QzVSxLQUFLNFUsYUFBZSxFQUNwQjVVLEtBQUs2VSx3QkFBMEIsQ0FDakMsQ0FDQSxhQUFJckQsR0FDRixPQUFPeFIsS0FBS3VJLFdBQVdrSixjQUN6QixDQUNBLEtBQUFxRCxHQUNFOVUsS0FBS3VJLFdBQWEsS0FDbEJ2SSxLQUFLd08sUUFBVSxLQUNmeE8sS0FBS2lSLFNBQVcsS0FDaEJqUixLQUFLMlUsT0FBUyxLQUNkM1UsS0FBSzBOLFNBQVcsS0FDaEIxTixLQUFLNFUsYUFBZSxFQUNwQjVVLEtBQUs2VSx3QkFBMEIsQ0FDakMsQ0FDQSxPQUFJRSxHQUNGLE1BQ01DLEVBRFdoVixLQUFLME4sU0FDSXVILFVBQVUsT0FDOUJGLEVBQU1DLEVBQVM1RyxLQUNyQixJQUFJOEcsRUFBaUJILEVBQ3JCLE1BQU1JLEVBQWdCblYsS0FBS3dPLFFBQVEyRyxjQVluQyxPQVhLQSxFQUFjQyxXQUNqQkYsRUFBaUJsVixLQUFLcVYsZ0JBQ2xCclYsS0FBSzZVLHlCQUEyQk0sRUFBY0csV0FBYXRWLEtBQUs0VSxjQUFnQkksRUFBU00sY0FDdEZKLEdBQWtCQSxFQUFlaFEsT0FBUzZQLEVBQUk3UCxVQUNqRGdRLEVBQWlCbFYsS0FBS3FWLGdCQUFrQixJQUFJM08sYUFBYXFPLEVBQUk3UCxTQUUvRGxGLEtBQUs2VSx1QkFBeUJNLEVBQWNHLFVBQzVDdFYsS0FBSzRVLFlBQWNJLEVBQVNNLFVBQzVCSCxFQUFjSSxZQUFZUixFQUFLRyxLQUc1QkEsQ0FDVCxDQUNBLGFBQUl6QixHQUNGLE9BQU96VCxLQUFLME4sU0FBUytGLFNBQ3ZCLENBQ0EsV0FBSUYsR0FDRixPQUFPdlQsS0FBSzBOLFNBQVM2RixPQUN2QixDQUNBLFNBQUlpQyxHQUNGLE9BQU94VixLQUFLdUksV0FBV3dKLGVBQ3pCLENBQ0Esa0JBQUluTSxHQUNGLE9BQU81RixLQUFLdUksV0FBVzNDLGNBQ3pCLENBQ0EsaUJBQUk2UCxHQUNGLE9BQU96VixLQUFLME4sU0FBUytGLFVBQVV2TyxPQUFTLENBQzFDLENBQ0EsYUFBSXNPLEdBQ0YsT0FBT3hULEtBQUswTixTQUFTNkYsUUFBUXJPLE1BQy9CLEUsNkVDdkRGLE1BQU13USxFQUFnQixNQUFNQSxVQUFzQixJQUNoRCxXQUFBaFQsSUFBZWlULEdBQ2IsSUFBSTlWLEVBQVU4VixFQUFLLElBQU0sQ0FBQyxFQUN0QjlWLGFBQW1CNkcsZ0JBQ3JCLFFBQVksS0FBUSw2REFDcEI3RyxFQUFVLENBQ1I0VCxVQUFXNVQsRUFDWGtWLElBQUtZLEVBQUssR0FDVnBDLFFBQVNvQyxFQUFLLEtBR2xCOVYsRUFBVSxJQUFLNlYsRUFBY0Usa0JBQW1CL1YsR0FDaEQsTUFBTTRULEVBQVk1VCxFQUFRNFQsV0FBYSxJQUFJL00sYUFBYSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFDeEVxTyxFQUFNbFYsRUFBUWtWLEtBQU8sSUFBSXJPLGFBQWEsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQzVENk0sRUFBVTFULEVBQVEwVCxTQUFXLElBQUl4TSxZQUFZLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQzdEOE8sRUFBY2hXLEVBQVFpVyxtQkFtQjVCQyxNQUFNLENBQ0p4UCxXQUFZLENBQ1ZDLFVBQVcsQ0FDVEMsT0FyQmlCLElBQUksSUFBTyxDQUNoQzJILEtBQU1xRixFQUNOdUMsTUFBTywyQkFDUEgsY0FDQUksTUFBTyxJQUFZQyxPQUFTLElBQVlDLFdBa0JwQ3hQLE9BQVEsWUFDUkMsT0FBUSxFQUNSQyxPQUFRLEdBRVZ1UCxJQUFLLENBQ0gzUCxPQXJCVyxJQUFJLElBQU8sQ0FDMUIySCxLQUFNMkcsRUFDTmlCLE1BQU8scUJBQ1BILGNBQ0FJLE1BQU8sSUFBWUMsT0FBUyxJQUFZQyxXQWtCcEN4UCxPQUFRLFlBQ1JDLE9BQVEsRUFDUkMsT0FBUSxJQUdaQyxZQXJCa0IsSUFBSSxJQUFPLENBQzdCc0gsS0FBTW1GLEVBQ055QyxNQUFPLG9CQUNQSCxjQUNBSSxNQUFPLElBQVlJLE1BQVEsSUFBWUYsV0FrQnZDckksU0FBVWpPLEVBQVFpTyxXQUVwQjlOLEtBQUtzVyxVQUFZLE1BQ25CLENBRUEsYUFBSTdDLEdBQ0YsT0FBT3pULEtBQUt1RyxXQUFXQyxVQUFVQyxPQUFPMkgsSUFDMUMsQ0FDQSxhQUFJcUYsQ0FBVW5NLEdBQ1p0SCxLQUFLdUcsV0FBV0MsVUFBVUMsT0FBTzJILEtBQU85RyxDQUMxQyxDQUVBLE9BQUl5TixHQUNGLE9BQU8vVSxLQUFLdUcsV0FBVzZQLElBQUkzUCxPQUFPMkgsSUFDcEMsQ0FDQSxPQUFJMkcsQ0FBSXpOLEdBQ050SCxLQUFLdUcsV0FBVzZQLElBQUkzUCxPQUFPMkgsS0FBTzlHLENBQ3BDLENBRUEsV0FBSWlNLEdBQ0YsT0FBT3ZULEtBQUs4RyxZQUFZc0gsSUFDMUIsQ0FDQSxXQUFJbUYsQ0FBUWpNLEdBQ1Z0SCxLQUFLOEcsWUFBWXNILEtBQU85RyxDQUMxQixHQUVGb08sRUFBY0UsZUFBaUIsQ0FDN0I5SCxTQUFVLGdCQUNWZ0ksb0JBQW9CLEdBRXRCLElBQUlTLEVBQWViLEMsdUVDbEZuQixNQUFNYyxFQUFpQixNQUFNQSxVQUF1QkQsRUFBQSxFQUNsRCxXQUFBN1QsSUFBZWlULEdBQ2JJLE1BQU0sQ0FBQyxHQUNQLElBQUlsVyxFQUFVOFYsRUFBSyxJQUFNLENBQUMsRUFDSCxpQkFBWjlWLEtBQ1QsRUFBQTRXLEVBQUEsSUFBWSxLQUFRLGdHQUNwQjVXLEVBQVUsQ0FDUmlCLE1BQU9qQixFQUNQa0IsT0FBUTRVLEVBQUssR0FDYmUsVUFBV2YsRUFBSyxHQUNoQmdCLFVBQVdoQixFQUFLLEtBR3BCM1YsS0FBSzRXLE1BQU0vVyxFQUNiLENBS0EsS0FBQStXLENBQU0vVyxHQUNKQSxFQUFVLElBQUsyVyxFQUFlWixrQkFBbUIvVixHQUNqREcsS0FBSzBXLFVBQVkxVyxLQUFLMFcsV0FBYTdXLEVBQVE2VyxVQUMzQzFXLEtBQUsyVyxVQUFZM1csS0FBSzJXLFdBQWE5VyxFQUFROFcsVUFDM0MzVyxLQUFLYyxNQUFRZCxLQUFLYyxPQUFTakIsRUFBUWlCLE1BQ25DZCxLQUFLZSxPQUFTZixLQUFLZSxRQUFVbEIsRUFBUWtCLE9BQ3JDLE1BQU04VixFQUFRN1csS0FBSzBXLFVBQVkxVyxLQUFLMlcsVUFDOUJHLEVBQVEsR0FDUi9CLEVBQU0sR0FDTnhCLEVBQVUsR0FDVm1ELEVBQVkxVyxLQUFLMFcsVUFBWSxFQUM3QkMsRUFBWTNXLEtBQUsyVyxVQUFZLEVBQzdCSSxFQUFRL1csS0FBS2MsTUFBUTRWLEVBQ3JCTSxFQUFRaFgsS0FBS2UsT0FBUzRWLEVBQzVCLElBQUssSUFBSTdRLEVBQUksRUFBR0EsRUFBSStRLEVBQU8vUSxJQUFLLENBQzlCLE1BQU0yRixFQUFJM0YsRUFBSTlGLEtBQUswVyxVQUNiaEwsRUFBSTVGLEVBQUk5RixLQUFLMFcsVUFBWSxFQUMvQkksRUFBTWxVLEtBQUs2SSxFQUFJc0wsRUFBT3JMLEVBQUlzTCxHQUMxQmpDLEVBQUluUyxLQUFLNkksRUFBSWlMLEVBQVdoTCxFQUFJaUwsRUFDOUIsQ0FDQSxNQUFNTSxFQUFXUCxFQUFZQyxFQUM3QixJQUFLLElBQUk3USxFQUFJLEVBQUdBLEVBQUltUixFQUFVblIsSUFBSyxDQUNqQyxNQUFNb1IsRUFBT3BSLEVBQUk0USxFQUNYUyxFQUFPclIsRUFBSTRRLEVBQVksRUFDdkJwUCxFQUFRNlAsRUFBT25YLEtBQUswVyxVQUFZUSxFQUNoQ0UsRUFBU0QsRUFBT25YLEtBQUswVyxVQUFZUSxFQUFPLEVBQ3hDRyxHQUFVRixFQUFPLEdBQUtuWCxLQUFLMFcsVUFBWVEsRUFDdkNJLEdBQVVILEVBQU8sR0FBS25YLEtBQUswVyxVQUFZUSxFQUFPLEVBQ3BEM0QsRUFBUTNRLEtBQ04wRSxFQUNBOFAsRUFDQUMsRUFDQUQsRUFDQUUsRUFDQUQsRUFFSixDQUNBclgsS0FBS3VYLFFBQVEsR0FBR25KLEtBQU8sSUFBSTFILGFBQWFvUSxHQUN4QzlXLEtBQUt1WCxRQUFRLEdBQUduSixLQUFPLElBQUkxSCxhQUFhcU8sR0FDeEMvVSxLQUFLOEcsWUFBWXNILEtBQU8sSUFBSXJILFlBQVl3TSxHQUN4Q3ZULEtBQUt1WCxRQUFRLEdBQUdwSyxTQUNoQm5OLEtBQUt1WCxRQUFRLEdBQUdwSyxTQUNoQm5OLEtBQUs4RyxZQUFZcUcsUUFDbkIsR0FFRnFKLEVBQWVaLGVBQWlCLENBQzlCOVUsTUFBTyxJQUNQQyxPQUFRLElBQ1IyVixVQUFXLEdBQ1hDLFVBQVcsSUFFYixJQUFJYSxFQUFnQmhCLEVDdkVwQixNQUFNaUIsRUFBcUIsTUFBTUEsVUFBMkJELEVBQzFELFdBQUE5VSxDQUFZN0MsRUFBVSxDQUFDLEdBRXJCa1csTUFBTSxDQUNKalYsT0FGRmpCLEVBQVUsSUFBSzRYLEVBQW1CN0Isa0JBQW1CL1YsSUFFcENpQixNQUNmQyxPQUFRbEIsRUFBUWtCLE9BQ2hCMlYsVUFBVyxFQUNYQyxVQUFXLElBRWIzVyxLQUFLbU4sT0FBT3ROLEVBQ2QsQ0FLQSxNQUFBc04sQ0FBT3ROLEdBQ0xHLEtBQUtjLE1BQVFqQixFQUFRaUIsT0FBU2QsS0FBS2MsTUFDbkNkLEtBQUtlLE9BQVNsQixFQUFRa0IsUUFBVWYsS0FBS2UsT0FDckNmLEtBQUswWCxlQUFpQjdYLEVBQVE4WCxlQUFpQjNYLEtBQUswWCxlQUNwRDFYLEtBQUs0WCxnQkFBa0IvWCxFQUFRZ1ksZ0JBQWtCN1gsS0FBSzRYLGdCQUN0RDVYLEtBQUs4WCxXQUFhalksRUFBUWtZLFdBQWEvWCxLQUFLOFgsV0FDNUM5WCxLQUFLZ1ksWUFBY25ZLEVBQVFvWSxZQUFjalksS0FBS2dZLFlBQzlDaFksS0FBS2tZLFdBQWFyWSxFQUFRc1ksV0FBYW5ZLEtBQUtrWSxXQUM1Q2xZLEtBQUtvWSxjQUFnQnZZLEVBQVF3WSxjQUFnQnJZLEtBQUtvWSxjQUNsRHBZLEtBQUtzWSxZQUNMdFksS0FBS3VZLGlCQUNQLENBRUEsZUFBQUEsR0FDRSxNQUFNOUUsRUFBWXpULEtBQUt5VCxVQUNqQitFLEVBQUl4WSxLQUFLOFgsV0FBYTlYLEtBQUtnWSxZQUMzQlMsRUFBU3pZLEtBQUtjLE1BQVEwWCxFQUFJLEVBQUl4WSxLQUFLYyxNQUFRMFgsRUFDM0NFLEVBQUkxWSxLQUFLa1ksV0FBYWxZLEtBQUtvWSxjQUMzQk8sRUFBUzNZLEtBQUtlLE9BQVMyWCxFQUFJLEVBQUkxWSxLQUFLZSxPQUFTMlgsRUFDN0M1TyxFQUFRVCxLQUFLQyxJQUFJbVAsRUFBUUUsR0FDL0JsRixFQUFVLEdBQUtBLEVBQVUsSUFBTUEsRUFBVSxJQUFNQSxFQUFVLElBQU16VCxLQUFLa1ksV0FBYXBPLEVBQ2pGMkosRUFBVSxJQUFNQSxFQUFVLElBQU1BLEVBQVUsSUFBTUEsRUFBVSxJQUFNelQsS0FBS2UsT0FBU2YsS0FBS29ZLGNBQWdCdE8sRUFDbkcySixFQUFVLElBQU1BLEVBQVUsSUFBTUEsRUFBVSxJQUFNQSxFQUFVLElBQU16VCxLQUFLZSxPQUNyRTBTLEVBQVUsR0FBS0EsRUFBVSxJQUFNQSxFQUFVLElBQU1BLEVBQVUsSUFBTXpULEtBQUs4WCxXQUFhaE8sRUFDakYySixFQUFVLEdBQUtBLEVBQVUsSUFBTUEsRUFBVSxJQUFNQSxFQUFVLElBQU16VCxLQUFLYyxNQUFRZCxLQUFLZ1ksWUFBY2xPLEVBQy9GMkosRUFBVSxHQUFLQSxFQUFVLElBQU1BLEVBQVUsSUFBTUEsRUFBVSxJQUFNelQsS0FBS2MsTUFDcEVkLEtBQUtpVixVQUFVLGFBQWE5SCxRQUM5QixDQUVBLFNBQUFtTCxHQUNFLE1BQU12RCxFQUFNL1UsS0FBSytVLElBQ2pCQSxFQUFJLEdBQUtBLEVBQUksR0FBS0EsRUFBSSxJQUFNQSxFQUFJLElBQU0sRUFDdENBLEVBQUksR0FBS0EsRUFBSSxHQUFLQSxFQUFJLEdBQUtBLEVBQUksR0FBSyxFQUNwQ0EsRUFBSSxHQUFLQSxFQUFJLElBQU1BLEVBQUksSUFBTUEsRUFBSSxJQUFNLEVBQ3ZDQSxFQUFJLElBQU1BLEVBQUksSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQU0sRUFDeEMsTUFBTTZELEVBQU8sRUFBSTVZLEtBQUswWCxlQUNoQm1CLEVBQU8sRUFBSTdZLEtBQUs0WCxnQkFDdEI3QyxFQUFJLEdBQUtBLEVBQUksSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQU02RCxFQUFPNVksS0FBSzhYLFdBQ25EL0MsRUFBSSxHQUFLQSxFQUFJLElBQU1BLEVBQUksSUFBTUEsRUFBSSxJQUFNOEQsRUFBTzdZLEtBQUtrWSxXQUNuRG5ELEVBQUksR0FBS0EsRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBTSxFQUFJNkQsRUFBTzVZLEtBQUtnWSxZQUN2RGpELEVBQUksSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBTSxFQUFJOEQsRUFBTzdZLEtBQUtvWSxjQUN4RHBZLEtBQUtpVixVQUFVLE9BQU85SCxRQUN4QixHQUdGc0ssRUFBbUI3QixlQUFpQixDQUVsQzlVLE1BQU8sSUFFUEMsT0FBUSxJQUVSZ1gsVUFBVyxHQUVYSSxVQUFXLEdBRVhGLFdBQVksR0FFWkksYUFBYyxHQUVkVixjQUFlLElBRWZFLGVBQWdCLEtBRWxCLElBQUlpQixFQUFvQnJCLEVDM0V4QixNQUFNc0IsRUFDSixXQUFBclcsQ0FBWXJCLEdBQ1ZyQixLQUFLZ1osZUFBaUNsWixPQUFPZ1EsT0FBTyxNQUNwRDlQLEtBQUsrUCx3QkFBMEIvUCxLQUFLZ1Esa0JBQWtCeEYsS0FBS3hLLE1BQzNEQSxLQUFLMkMsVUFBWXRCLENBQ25CLENBQ0EsYUFBQXNQLENBQWN4QyxFQUFRcEwsR0FDcEIsTUFBTWtXLEVBQVlqWixLQUFLa1osY0FBYy9LLEdBQ2pDQSxFQUFPZ0wsa0JBQ1RuWixLQUFLb1osdUJBQXVCakwsRUFBUThLLEdBQ3RDalosS0FBSzJDLFVBQVVLLFlBQVlDLE1BQU1vUCxXQUFXNEcsRUFBV2xXLEVBQ3pELENBQ0EsZ0JBQUFnTyxDQUFpQjVDLEdBQ2YsTUFBTThLLEVBQVlqWixLQUFLZ1osZUFBZTdLLEVBQU9tQyxLQUN6Q25DLEVBQU9nTCxrQkFDVG5aLEtBQUtvWix1QkFBdUJqTCxFQUFROEssR0FDdENBLEVBQVVoSSxTQUFTQyxjQUFjK0gsRUFDbkMsQ0FDQSxrQkFBQS9JLENBQW1CL0IsR0FDakIsTUFBTUssRUFBVUwsRUFBTzZGLFNBQ2pCaUYsRUFBWWpaLEtBQUtrWixjQUFjL0ssR0FDckMsT0FBSThLLEVBQVV6SyxRQUFRRixVQUFZRSxFQUFRRixVQUNoQzJLLEVBQVVoSSxTQUFTNEMsc0JBQXNCb0YsRUFBV3pLLEVBR2hFLENBQ0EsaUJBQUF3QixDQUFrQjdCLEdBQ2hCLE1BQU13RixFQUFnQjNULEtBQUtnWixlQUFlN0ssRUFBT21DLEtBQ2pELElBQVFsSyxPQUFPdU4sRUFBY2pHLFVBQzdCLElBQVF0SCxPQUFPdU4sR0FDZjNULEtBQUtnWixlQUFlN0ssRUFBT21DLEtBQU8sS0FDbENuQyxFQUFPaUQsSUFBSSxZQUFhcFIsS0FBSytQLHdCQUMvQixDQUNBLHNCQUFBcUosQ0FBdUJqTCxFQUFRa0wsR0FDN0JsTCxFQUFPZ0wsa0JBQW1CLEVBQzFCRSxFQUFnQjNMLFNBQVNQLE9BQU9nQixHQUNoQ2tMLEVBQWdCN0ssUUFBVUwsRUFBTzZGLFFBQ25DLENBQ0EsYUFBQWtGLENBQWMvSyxHQUNaLE9BQU9uTyxLQUFLZ1osZUFBZTdLLEVBQU9tQyxNQUFRdFEsS0FBS3NaLGVBQWVuTCxFQUNoRSxDQUNBLGNBQUFtTCxDQUFlbkwsR0FDYixNQUFNd0YsRUFBZ0IsSUFBUWxULElBQUk0VCxFQUFBLEdBU2xDLE9BUkFWLEVBQWNqRyxTQUFXLElBQVFqTixJQUFJcVksR0FDckNuRixFQUFjcEwsV0FBYTRGLEVBQzNCd0YsRUFBY1csVUFBWW5HLEVBQU92SSxlQUNqQytOLEVBQWNuRixRQUFVTCxFQUFPNkYsU0FDL0JMLEVBQWNyQixZQUFjdFMsS0FBSzJDLFVBQVVtUCxhQUFlM0QsRUFBTzJELGFBQ2pFM0QsRUFBT2dMLGtCQUFtQixFQUMxQm5aLEtBQUtnWixlQUFlN0ssRUFBT21DLEtBQU9xRCxFQUNsQ3hGLEVBQU91RSxHQUFHLFlBQWExUyxLQUFLK1AseUJBQ3JCNEQsQ0FDVCxDQUNBLE9BQUFuUyxHQUNFLElBQUssTUFBTXNFLEtBQUs5RixLQUFLZ1osZUFDR2haLEtBQUtnWixlQUFlbFQsR0FDNUI0SCxTQUFTbE0sVUFFekJ4QixLQUFLZ1osZUFBaUIsS0FDdEJoWixLQUFLMkMsVUFBWSxJQUNuQixFQUdGb1csRUFBb0J0WCxVQUFZLENBQzlCbUMsS0FBTSxDQUNKLEtBQWNDLFdBQ2QsS0FBY0MsWUFDZCxLQUFjQyxhQUVoQkMsS0FBTSxtQkN2RVIsS0FBVzlCLElBQUk2VyxFLGlLQ0hmLE1BQU1RLEVBQVksQ0FDaEJ2VixLQUFNLGFBQ044SyxPQUFRLENBQ05DLE9BRUUsZ2VBY0ZDLEtBRUUsNkxBT0p3SyxTQUFVLENBQ1J6SyxPQUVFLGdlQWNGQyxLQUVFLGtoQkFtQkF5SyxFQUFjLENBQ2xCelYsS0FBTSxhQUNOOEssT0FBUSxDQUNOQyxPQUVFLDJHQU1GQyxLQUVFLGlKQU9Kd0ssU0FBVSxDQUNSekssT0FFRSwwS0FPRkMsS0FFRSxtV0N6Rk4sSUFBSTBLLEVBQ0FDLEVBQ0osTUFBTUMsVUFBMkJDLEVBQUEsRUFDL0IsV0FBQW5YLEdBQ0VnWCxJQUFlQSxHQUFhLE9BQTRCLENBQ3REMVYsS0FBTSx1QkFDTjhWLEtBQU0sQ0FDSmpMLEVBQUEsR0FDQTBLLEVBQ0FRLEVBQUEsTUFHSkosSUFBY0EsR0FBWSxPQUEyQixDQUNuRDNWLEtBQU0sdUJBQ044VixLQUFNLENBQ0pqTCxFQUFBLEdBQ0E0SyxFQUNBTSxFQUFBLE1BR0osTUFBTUMsRUFBaUIsSUFBSTVTLEVBQUEsRUFBYSxDQUN0QzZTLFVBQVcsQ0FBRTNTLE1BQU8sSUFBSXBELEVBQUEsRUFBVU4sS0FBTSxlQUN4Q3NXLFlBQWEsQ0FBRTVTLE1BQU8sSUFBSVosYUFBYSxDQUFDLEVBQUcsRUFBRyxFQUFHLElBQUs5QyxLQUFNLGFBQzVEdVcsYUFBYyxDQUFFN1MsTUFBTyxJQUFJWixhQUFhLENBQUMsRUFBRyxJQUFLOUMsS0FBTSxhQUN2RHdXLGtCQUFtQixDQUFFOVMsTUFBTyxJQUFJcEQsRUFBQSxFQUFVTixLQUFNLGVBQ2hEeVcsWUFBYSxDQUFFL1MsTUFBTyxJQUFJWixhQUFhLENBQUMsSUFBSyxJQUFLLEdBQUssS0FBTzlDLEtBQU0sZUFFdEVtUyxNQUFNLENBQ0o0RCxZQUNBRCxhQUNBL0gsVUFBVyxDQUNURCxjQUFlLElBQUl0SyxFQUFBLEVBQWEsQ0FDOUJ3SyxpQkFBa0IsQ0FBRXRLLE1BQU8sSUFBSXBELEVBQUEsRUFBVU4sS0FBTSxlQUMvQ29PLE9BQVEsQ0FBRTFLLE1BQU8sSUFBSVosYUFBYSxDQUFDLEVBQUcsRUFBRyxFQUFHLElBQUs5QyxLQUFNLGFBQ3ZEaU8sT0FBUSxDQUFFdkssTUFBTyxFQUFHMUQsS0FBTSxTQUU1Qm9XLGlCQUNBTSxTQUFVNVAsRUFBQSxFQUFRQyxNQUFNN0IsT0FDeEJ5UixTQUFVN1AsRUFBQSxFQUFRQyxNQUFNN0IsT0FBT21DLFFBR3JDLENBQ0EsY0FBQXVQLENBQWUxWixFQUFPQyxFQUFRdUgsRUFBUW1TLEVBQVNDLEVBQVNsTSxHQUN0RCxNQUFNd0wsRUFBaUJoYSxLQUFLMlIsVUFBVXFJLGVBQ2hDVyxFQUFlbk0sRUFBUTFOLE1BQ3ZCOFosRUFBZ0JwTSxFQUFRek4sT0FDeEJvVSxFQUFnQjNHLEVBQVEyRyxjQUN4QmlGLEVBQW9CSixFQUFlM04sU0FBUytOLGtCQUNsREEsRUFBa0JuYSxJQUNoQnFJLEVBQU91UyxFQUFJRixFQUFlN1osRUFDMUJ3SCxFQUFPd1MsRUFBSUgsRUFBZTVaLEVBQzFCdUgsRUFBT3lTLEVBQUlILEVBQWdCOVosRUFDM0J3SCxFQUFPMFMsRUFBSUosRUFBZ0I3WixFQUMzQnVILEVBQU8yUyxHQUFLbmEsRUFDWndILEVBQU80UyxHQUFLbmEsR0FFZHFaLEVBQWtCbFUsU0FDbEI4VCxFQUFlM04sU0FBUzROLFVBQVk5RSxFQUFjZ0csU0FDbERuQixFQUFlM04sU0FBUzZOLFlBQWMvRSxFQUFjK0UsWUFDcERGLEVBQWUzTixTQUFTOE4sYUFBZWhGLEVBQWNnRixhQUNyREgsRUFBZTNOLFNBQVMrTixrQkFBb0JBLEVBQzVDSixFQUFlM04sU0FBU2dPLFlBQVksR0FBS3ZaLEVBQ3pDa1osRUFBZTNOLFNBQVNnTyxZQUFZLEdBQUt0WixFQUN6Q2laLEVBQWUzTixTQUFTZ08sWUFBWSxHQUFLSSxFQUN6Q1QsRUFBZTNOLFNBQVNnTyxZQUFZLEdBQUtLLEVBQ3JDbE0sSUFDRnhPLEtBQUsyUixVQUFVMkksU0FBVzlMLEVBQVExRixPQUNsQzlJLEtBQUsyUixVQUFVNEksU0FBVy9MLEVBQVExRixPQUFPbUMsTUFFN0MsRUM1RUYsTUFBTW1RLFVBQXFCN0UsRUFBQSxFQUN6QixXQUFBN1QsR0FDRXFULE1BQU0sQ0FDSnRDLFVBQVcsSUFBSS9NLGFBQWEsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ2xEcU8sSUFBSyxJQUFJck8sYUFBYSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFDNUM2TSxRQUFTLElBQUl4TSxZQUFZLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBRTdDLEVDR0YsTUFBTXNVLEVBQWEsSUFBSUQsRUFDdkIsTUFBTUUsRUFDSixXQUFBNVksQ0FBWXJCLEdBQ1ZyQixLQUFLNk4sT0FBUzhCLEVBQUEsRUFBTTRMLFVBQ3BCdmIsS0FBS3diLHNCQUF3QzFiLE9BQU9nUSxPQUFPLE1BQzNEOVAsS0FBSytQLHdCQUEwQi9QLEtBQUtnUSxrQkFBa0J4RixLQUFLeEssTUFDM0RBLEtBQUsyQyxVQUFZdEIsQ0FDbkIsQ0FDQSxrQkFBQTZPLENBQW1CM0gsR0FDakIsTUFBTWtULEVBQW1CemIsS0FBSzBiLHFCQUFxQm5ULEdBQzdDb1QsRUFBYUYsRUFBaUJHLFNBQ3BDNWIsS0FBSzZiLGdCQUFnQnRULEdBQ3JCLE1BQU1xVCxFQUFXSCxFQUFpQkcsU0FDbEMsR0FBSUEsR0FBWUEsSUFBYUQsRUFBWSxDQUN2QyxNQUFNLGNBQUVoSSxHQUFrQjhILEVBQzFCLEdBQUk5SCxHQUFpQkEsRUFBY25GLFFBQVFGLFVBQVkvRixFQUFXaUcsUUFBUUYsUUFDeEUsT0FBUXFGLEVBQWMxQyxTQUFTNEMsc0JBQXNCRixFQUFlcEwsRUFBV2lHLFFBRW5GLENBQ0EsT0FBT21OLElBQWVDLENBQ3hCLENBQ0EsYUFBQWpMLENBQWNtTCxFQUFjL1ksR0FDMUIsTUFBTStRLEVBQVU5VCxLQUFLMkMsVUFBVUssWUFBWUMsTUFDM0NqRCxLQUFLNmIsZ0JBQWdCQyxHQUNyQixNQUFNTCxFQUFtQnpiLEtBQUswYixxQkFBcUJJLElBQzdDLFNBQUVwTyxFQUFRLFNBQUVrTyxHQUFhSCxFQUMvQixHQUFJRyxFQUFVLENBQ1pILEVBQWlCOUgsZ0JBQWtCOEgsRUFBaUI5SCxjQUFnQixJQUFJVSxFQUFBLEdBQ3hFLE1BQU1WLEVBQWdCOEgsRUFBaUI5SCxjQUNuQ21JLEVBQWFDLHlCQUNmRCxFQUFhQyx3QkFBeUIsRUFDdEMvYixLQUFLZ2MscUJBQXFCRixHQUMxQm5JLEVBQWNqRyxTQUFXQSxFQUN6QmlHLEVBQWNwTCxXQUFhdVQsRUFDM0JuSSxFQUFjVyxVQUFZd0gsRUFBYWxXLGVBQ3ZDK04sRUFBY25GLFFBQVVzTixFQUFhOUgsVUFFdkNMLEVBQWNyQixZQUFjdFMsS0FBSzJDLFVBQVVtUCxhQUFlZ0ssRUFBYWhLLGFBQ3ZFZ0MsRUFBUXpCLFdBQVdzQixFQUFlNVEsRUFDcEMsTUFDRStRLEVBQVE1USxNQUFNSCxHQUNkMFksRUFBaUI5TixTQUFXOE4sRUFBaUI5TixPQUFTLElBQUlpTSxHQUMxRDVaLEtBQUsrUSxpQkFBaUIrSyxHQUN0Qi9ZLEVBQWViLElBQUk0WixFQUV2QixDQUNBLE9BQUFyWSxDQUFRcVksR0FDTixNQUFNLE9BQUVuTyxHQUFXM04sS0FBS3diLHNCQUFzQk0sRUFBYXhMLEtBQzNEM0MsRUFBT0osT0FBTyxHQUFLdk4sS0FBSzJDLFVBQVU4SCxlQUFld1IsVUFDakQsTUFBTXZLLEVBQWdCL0QsRUFBT2dFLFVBQVVELGNBQWNyRixTQUNyRHFGLEVBQWNFLGlCQUFtQmtLLEVBQWFsVyxlQUM5QzhMLEVBQWNHLE9BQVM3UixLQUFLMkMsVUFBVW1QLGFBQWVnSyxFQUFhaEssY0FDbEUsT0FDRWdLLEVBQWEvSixnQkFDYkwsRUFBY00sT0FDZCxHQUVGaFMsS0FBSzZOLE9BQU8yRCxXQUFZLEVBQUEwQyxFQUFBLEdBQTBCNEgsRUFBYXJLLGVBQWdCcUssRUFBYXROLFFBQVFGLFNBQ3BHdE8sS0FBSzJDLFVBQVU2SyxRQUFRQyxLQUFLLENBQzFCQyxTQUFVMk4sRUFDVjFOLFNBQ0FDLE1BQU81TixLQUFLNk4sUUFFaEIsQ0FDQSxnQkFBQWtELENBQWlCK0ssR0FDZixNQUFNTCxFQUFtQnpiLEtBQUswYixxQkFBcUJJLElBQzdDLFNBQUVGLEdBQWFILEVBQ3JCLEdBQUlHLEVBQVUsQ0FDWixNQUFNLGNBQUVqSSxHQUFrQjhILEVBQ3RCSyxFQUFhQyx3QkFDZi9iLEtBQUtnYyxxQkFBcUJGLEdBQzVCbkksRUFBYzFDLFNBQVNDLGNBQWN5QyxFQUN2QyxNQUFPLEdBQUltSSxFQUFhQyx1QkFBd0IsQ0FDOUMsTUFBTSxPQUFFcE8sR0FBVzhOLEVBQ25COU4sRUFBTzZNLGVBQ0xzQixFQUFhaGIsTUFDYmdiLEVBQWEvYSxPQUNiK2EsRUFBYUksZUFBZTVULE9BQzVCd1QsRUFBYXBOLE9BQU9qRCxFQUNwQnFRLEVBQWFwTixPQUFPaEQsRUFDcEJvUSxFQUFhdE4sUUFFakIsQ0FDQXNOLEVBQWFDLHdCQUF5QixDQUN4QyxDQUNBLGlCQUFBL0wsQ0FBa0I4TCxHQUNoQixNQUFNTCxFQUFtQnpiLEtBQUswYixxQkFBcUJJLEdBQ25ETCxFQUFpQjlILGNBQWdCLEtBQ2pDOEgsRUFBaUI5TixRQUFRbk0sVUFDekJ4QixLQUFLd2Isc0JBQXNCTSxFQUFheEwsS0FBTyxLQUMvQ3dMLEVBQWExSyxJQUFJLFlBQWFwUixLQUFLK1Asd0JBQ3JDLENBQ0Esb0JBQUEyTCxDQUFxQm5ULEdBQ25CLE9BQU92SSxLQUFLd2Isc0JBQXNCalQsRUFBVytILE1BQVF0USxLQUFLbWMsc0JBQXNCNVQsRUFDbEYsQ0FDQSxxQkFBQTRULENBQXNCTCxHQUNwQixNQUFNcE8sRUFBVyxJQUFJNkksRUFBQSxFQUFhLENBQ2hDaEQsUUFBUzhILEVBQVc5SCxRQUNwQkUsVUFBVzRILEVBQVc1SCxVQUFVMkksUUFDaENySCxJQUFLc0csRUFBV3RHLElBQUlxSCxVQVF0QixPQU5BcGMsS0FBS3diLHNCQUFzQk0sRUFBYXhMLEtBQU8sQ0FDN0NzTCxVQUFVLEVBQ1ZyVCxXQUFZdVQsRUFDWnBPLFlBRUZvTyxFQUFhcEosR0FBRyxZQUFhMVMsS0FBSytQLHlCQUMzQi9QLEtBQUt3YixzQkFBc0JNLEVBQWF4TCxJQUNqRCxDQUNBLG9CQUFBMEwsQ0FBcUJGLEdBQ25CLE1BQU1PLEVBQWlCcmMsS0FBSzBiLHFCQUFxQkksSUFDM0MsU0FBRXBPLEdBQWEyTyxFQUNmcFIsRUFBUTZRLEVBQWF0TixRQUFRMUYsT0FBT21DLE1BQ2hCLFdBQXRCQSxFQUFNcVIsY0FDUnJSLEVBQU1xUixZQUFjLFNBQ3BCclIsRUFBTWtDLFVDNUhaLFNBQWdCMk8sRUFBYy9HLEdBQzVCLE1BQU12RyxFQUFVc04sRUFBYXROLFFBQ3ZCMU4sRUFBUTBOLEVBQVExQixNQUFNaE0sTUFDdEJDLEVBQVN5TixFQUFRMUIsTUFBTS9MLE9BQzdCLElBQUkwWixFQUFVLEVBQ1ZDLEVBQVUsRUFDVm9CLEVBQWFTLHdCQUNmOUIsRUFBVXFCLEVBQWFwTixPQUFPakQsRUFDOUJpUCxFQUFVb0IsRUFBYXBOLE9BQU9oRCxHQUVoQ3FKLEVBQUksR0FBS0EsRUFBSSxJQUFNMEYsRUFDbkIxRixFQUFJLEdBQUtBLEVBQUksR0FBSyxFQUFJMEYsRUFDdEIxRixFQUFJLEdBQUtBLEVBQUksSUFBTTJGLEVBQ25CM0YsRUFBSSxHQUFLQSxFQUFJLEdBQUssRUFBSTJGLEVBQ3RCLE1BQU12RixFQUFnQmpSLEVBQUEsRUFBTzNCLE9BQzdCNFMsRUFBY3FILFNBQVNWLEVBQWFJLGVBQWU1VCxRQUNuRDZNLEVBQWM4RixJQUFNYSxFQUFhaGIsTUFDakNxVSxFQUFjK0YsSUFBTVksRUFBYS9hLE9BQ2pDb1UsRUFBY2pQLFNBQ2RpUCxFQUFjckwsTUFBTWdTLEVBQWFoYixNQUFRQSxFQUFPZ2IsRUFBYS9hLE9BQVNBLEdDdEJ4RSxTQUFxQjBiLEVBQU83VixFQUFRQyxFQUFReUIsR0FDMUMsSUFBSW9VLEVBQVEsRUFDWixNQUFNQyxFQUFPRixFQUFNdlgsT0RxQkYsRUNwQlgyVixFQUFJdlMsRUFBT3VTLEVBQ1hDLEVBQUl4UyxFQUFPd1MsRUFDWEMsRUFBSXpTLEVBQU95UyxFQUNYQyxFQUFJMVMsRUFBTzBTLEVBQ1hDLEVBQUszUyxFQUFPMlMsR0FDWkMsRUFBSzVTLEVBQU80UyxHQUVsQixJQURBclUsR0RjaUIsRUNiVjZWLEVBQVFDLEdBQU0sQ0FDbkIsTUFBTWxSLEVBQUlnUixFQUFNNVYsR0FDVjZFLEVBQUkrUSxFQUFNNVYsRUFBUyxHQUN6QjRWLEVBQU01VixHQUFVZ1UsRUFBSXBQLEVBQUlzUCxFQUFJclAsRUFBSXVQLEVBQ2hDd0IsRUFBTTVWLEVBQVMsR0FBS2lVLEVBQUlyUCxFQUFJdVAsRUFBSXRQLEVBQUl3UCxFQUNwQ3JVLEdEUWUsRUNQZjZWLEdBQ0YsQ0FDRixDREtFaFksQ0FBWXFRLEVBQUssRUFBRyxFQUFHSSxFQUN6QixDRHlHSXlILENBQU9kLEVBQWNwTyxFQUFTcUgsS0dqSWxDLFNBQXNCK0csRUFBY3JJLEdBQ2xDLE1BQU1nSCxFQUFVcUIsRUFBYXBOLE9BQU9qRCxFQUM5QmlQLEVBQVVvQixFQUFhcE4sT0FBT2hELEVBQ3BDK0gsRUFBVSxJQUFNZ0gsRUFBVXFCLEVBQWFoYixNQUN2QzJTLEVBQVUsSUFBTWlILEVBQVVvQixFQUFhL2EsT0FDdkMwUyxFQUFVLElBQU0sRUFBSWdILEdBQVdxQixFQUFhaGIsTUFDNUMyUyxFQUFVLElBQU1pSCxFQUFVb0IsRUFBYS9hLE9BQ3ZDMFMsRUFBVSxJQUFNLEVBQUlnSCxHQUFXcUIsRUFBYWhiLE1BQzVDMlMsRUFBVSxJQUFNLEVBQUlpSCxHQUFXb0IsRUFBYS9hLE9BQzVDMFMsRUFBVSxJQUFNZ0gsRUFBVXFCLEVBQWFoYixNQUN2QzJTLEVBQVUsSUFBTSxFQUFJaUgsR0FBV29CLEVBQWEvYSxNQUM5QyxDSHVISThiLENBQWFmLEVBQWNwTyxFQUFTK0YsVUFDdEMsQ0FDQSxPQUFBalMsR0FDRSxJQUFLLE1BQU1zRSxLQUFLOUYsS0FBS3diLHNCQUNuQnhiLEtBQUtnUSxrQkFBa0JoUSxLQUFLd2Isc0JBQXNCMVYsR0FBR3lDLFlBRXZEdkksS0FBS3diLHNCQUF3QixLQUM3QnhiLEtBQUsyQyxVQUFZLElBQ25CLENBQ0EsZUFBQWtaLENBQWdCQyxHQUNkLE1BQU1PLEVBQWlCcmMsS0FBSzBiLHFCQUFxQkksR0FDM0N0TixFQUFVc04sRUFBYXROLFFBQzdCLElBQUlzTyxHQUFxQixFQUt6QixPQUpJOWMsS0FBSzJDLFVBQVVpQixPQUFTLElBQWFtSyxRQUN2QytPLEVBQXFCOWMsS0FBSzJDLFVBQVV5TixRQUFRMk0sU0FBU0MsbUJBRXZEWCxFQUFlVCxTQUFXcE4sRUFBUTJHLGNBQWNDLFdBQWEwSCxHQUFzQnRPLEVBQVExRixPQUFPbVUsY0FDM0ZaLEVBQWVULFFBQ3hCLEVBR0ZOLEVBQWlCN1osVUFBWSxDQUMzQm1DLEtBQU0sQ0FDSixLQUFjQyxXQUNkLEtBQWNDLFlBQ2QsS0FBY0MsYUFFaEJDLEtBQU0sZ0JJMUpSLEtBQVc5QixJQUFJb1osRSxrQ0NIZixNQUFNNEIsRUFDSixXQUFBeGEsR0FDRTFDLEtBQUt1VSxZQUFjLFVBRW5CdlUsS0FBS3lWLGNBQWdCLEVBQ3JCelYsS0FBS3dULFVBQVksRUFDakJ4VCxLQUFLd1UsWUFBYSxFQUNsQnhVLEtBQUtzUyxZQUFjLEVBQ25CdFMsS0FBS21kLGdCQUFrQixFQUV2Qm5kLEtBQUtpUixTQUFXLEtBQ2hCalIsS0FBSzJVLE9BQVMsSUFDaEIsQ0FDQSxhQUFJbkQsR0FDRixPQUFPeFIsS0FBS3VJLFdBQVdrSixjQUN6QixDQUNBLFNBQUkrRCxHQUNGLE9BQU94VixLQUFLdUksV0FBV3dKLGVBQ3pCLENBQ0EsS0FBQStDLEdBQ0U5VSxLQUFLdUksV0FBYSxLQUNsQnZJLEtBQUt3TyxRQUFVLEtBQ2Z4TyxLQUFLaVIsU0FBVyxLQUNoQmpSLEtBQUsyVSxPQUFTLEtBQ2QzVSxLQUFLcUUsT0FBUyxJQUNoQixFLGlGQ3JCRixNQUFNK1ksVUFBaUJDLEVBQUEsRUFJckIsV0FBQTNhLENBQVk3QyxHQUNOQSxhQUFtQnlkLEVBQUEsSUFDckJ6ZCxFQUFVLENBQUV1USxRQUFTdlEsSUFFdkIsTUFBTSxRQUFFdVEsRUFBTyxZQUFFa0MsS0FBZ0JpTCxHQUFTMWQsR0FBVyxDQUFDLEVBQ3REa1csTUFBTSxDQUNKQyxNQUFPLGNBQ0p1SCxJQUVMdmQsS0FBS21ELGFBQWUsV0FJbEJuRCxLQUFLd2QsU0FIRnBOLElBQ2FwUSxLQUFLeWQsY0FBZ0IsSUFBSUgsRUFBQSxHQUkzQ3RkLEtBQUt3ZCxTQUFTOUssR0FBRyxTQUFVMVMsS0FBSzBkLGFBQWMxZCxNQUM5Q0EsS0FBSzJkLGVBQWdCLEVBQ3JCM2QsS0FBS3NTLFlBQWNBLElBQWUsQ0FDcEMsQ0FDQSxXQUFJbEMsQ0FBUUEsR0FDTkEsSUFBWXBRLEtBQUt3ZCxXQUVyQnhkLEtBQUt3ZCxTQUFTcE0sSUFBSSxTQUFVcFIsS0FBSzBkLGFBQWMxZCxNQUMvQ0EsS0FBS3dkLFNBQVdwTixFQUNoQnBRLEtBQUt3ZCxTQUFTOUssR0FBRyxTQUFVMVMsS0FBSzBkLGFBQWMxZCxNQUM5Q0EsS0FBSzBkLGVBQ1AsQ0FDQSxXQUFJdE4sR0FDRixPQUFPcFEsS0FBS3dkLFFBQ2QsQ0FLQSxVQUFJblosR0FDRixPQUFPckUsS0FBS3dkLFNBQVNuWixNQUN2QixDQUtBLFNBQUEyQixDQUFVM0IsR0FDUkEsRUFBTzJCLFVBQVVoRyxLQUFLd2QsU0FBU25aLE9BQ2pDLENBS0EsYUFBQXVaLENBQWNDLEdBQ1osT0FBTzdkLEtBQUt3ZCxTQUFTSSxjQUFjQyxFQUNyQyxDQUNBLFlBQUFILEdBR0UsR0FGQTFkLEtBQUs4ZCxxQkFDTDlkLEtBQUs0USxvQkFBcUIsRUFDdEI1USxLQUFLK2QsY0FDUCxPQUNGL2QsS0FBSytkLGVBQWdCLEVBQ3JCLE1BQU10WixFQUFjekUsS0FBS3lFLGFBQWV6RSxLQUFLNEUsa0JBQ3pDSCxHQUNGQSxFQUFZdVosa0JBQWtCaGUsS0FFbEMsQ0FnQkEsT0FBQXdCLENBQVEzQixHQUNGRyxLQUFLeWQsZ0JBQWtCNWQsRUFDekJHLEtBQUt5ZCxjQUFjamMsUUFBUTNCLElBQ04sSUFBWkEsSUFBeUMsSUFBckJBLEdBQVN1USxTQUN0Q3BRLEtBQUt3ZCxTQUFTaGMsUUFBUTNCLEdBRXhCRyxLQUFLeWQsY0FBZ0IsS0FDckJ6ZCxLQUFLd2QsU0FBVyxLQUNoQnpILE1BQU12VSxRQUFRM0IsRUFDaEIsQ0FDQSxrQkFBQW9lLENBQW1CQyxFQUFRdkksR0FFekIsT0FEQTNWLEtBQUtvUSxRQUFROE4sTUFBV3ZJLEdBQ2pCM1YsSUFDVCxDQVNBLFlBQUFtZSxJQUFnQnhJLEdBQ2QsT0FBTzNWLEtBQUtpZSxtQkFBbUIsZUFBZ0J0SSxFQUNqRCxDQVFBLGNBQUF5SSxJQUFrQnpJLEdBQ2hCLE9BQU8zVixLQUFLaWUsbUJBQW1CLGlCQUFrQnRJLEVBQ25ELENBQ0EsSUFBQTBJLElBQVExSSxHQUNOLE9BQU8zVixLQUFLaWUsbUJBQW1CLE9BQVF0SSxFQUN6QyxDQVFBLE1BQUEySSxJQUFVM0ksR0FDUixPQUFPM1YsS0FBS2llLG1CQUFtQixTQUFVdEksRUFDM0MsQ0FDQSxPQUFBbkgsSUFBV21ILEdBQ1QsT0FBTzNWLEtBQUtpZSxtQkFBbUIsVUFBV3RJLEVBQzVDLENBTUEsU0FBQTRJLEdBQ0UsT0FBT3ZlLEtBQUtpZSxtQkFBbUIsWUFBYSxHQUM5QyxDQU1BLEdBQUFPLEdBQ0UsT0FBT3hlLEtBQUtpZSxtQkFBbUIsTUFBTyxHQUN4QyxDQUNBLEdBQUFRLElBQU85SSxHQUNMLE9BQU8zVixLQUFLaWUsbUJBQW1CLE1BQU90SSxFQUN4QyxDQUNBLEtBQUErSSxJQUFTL0ksR0FDUCxPQUFPM1YsS0FBS2llLG1CQUFtQixRQUFTdEksRUFDMUMsQ0FDQSxRQUFBZ0osSUFBWWhKLEdBQ1YsT0FBTzNWLEtBQUtpZSxtQkFBbUIsV0FBWXRJLEVBQzdDLENBQ0EsYUFBQWlKLElBQWlCakosR0FDZixPQUFPM1YsS0FBS2llLG1CQUFtQixnQkFBaUJ0SSxFQUNsRCxDQU1BLFNBQUFrSixHQUNFLE9BQU83ZSxLQUFLaWUsbUJBQW1CLFlBQWEsR0FDOUMsQ0FDQSxPQUFBYSxJQUFXbkosR0FDVCxPQUFPM1YsS0FBS2llLG1CQUFtQixVQUFXdEksRUFDNUMsQ0FDQSxNQUFBb0osSUFBVXBKLEdBQ1IsT0FBTzNWLEtBQUtpZSxtQkFBbUIsU0FBVXRJLEVBQzNDLENBQ0EsSUFBQXFKLElBQVFySixHQUNOLE9BQU8zVixLQUFLaWUsbUJBQW1CLE9BQVF0SSxFQUN6QyxDQUNBLE1BQUFzSixJQUFVdEosR0FDUixPQUFPM1YsS0FBS2llLG1CQUFtQixTQUFVdEksRUFDM0MsQ0FDQSxNQUFBdUosSUFBVXZKLEdBQ1IsT0FBTzNWLEtBQUtpZSxtQkFBbUIsU0FBVXRJLEVBQzNDLENBQ0EsZ0JBQUF3SixJQUFvQnhKLEdBQ2xCLE9BQU8zVixLQUFLaWUsbUJBQW1CLG1CQUFvQnRJLEVBQ3JELENBQ0EsSUFBQXlKLElBQVF6SixHQUNOLE9BQU8zVixLQUFLaWUsbUJBQW1CLE9BQVF0SSxFQUN6QyxDQUNBLFNBQUEwSixJQUFhMUosR0FDWCxPQUFPM1YsS0FBS2llLG1CQUFtQixZQUFhdEksRUFDOUMsQ0FDQSxJQUFBMkosSUFBUTNKLEdBQ04sT0FBTzNWLEtBQUtpZSxtQkFBbUIsT0FBUXRJLEVBQ3pDLENBQ0EsV0FBQTRKLElBQWU1SixHQUNiLE9BQU8zVixLQUFLaWUsbUJBQW1CLGNBQWV0SSxFQUNoRCxDQUNBLFNBQUE2SixJQUFhN0osR0FDWCxPQUFPM1YsS0FBS2llLG1CQUFtQixZQUFhdEksRUFDOUMsQ0FDQSxVQUFBOEosSUFBYzlKLEdBQ1osT0FBTzNWLEtBQUtpZSxtQkFBbUIsYUFBY3RJLEVBQy9DLENBQ0EsVUFBQStKLElBQWMvSixHQUNaLE9BQU8zVixLQUFLaWUsbUJBQW1CLGFBQWN0SSxFQUMvQyxDQUNBLFdBQUFnSyxJQUFlaEssR0FDYixPQUFPM1YsS0FBS2llLG1CQUFtQixjQUFldEksRUFDaEQsQ0FDQSxJQUFBaUssSUFBUWpLLEdBQ04sT0FBTzNWLEtBQUtpZSxtQkFBbUIsT0FBUXRJLEVBQ3pDLENBQ0EsR0FBQWtLLElBQU9sSyxHQUNMLE9BQU8zVixLQUFLaWUsbUJBQW1CLE1BQU90SSxFQUN4QyxDQUNBLE9BQUFtSyxJQUFXbkssR0FDVCxPQUFPM1YsS0FBS2llLG1CQUFtQixVQUFXdEksRUFDNUMsQ0FFQSxJQUFBb0ssR0FDRSxPQUFPL2YsS0FBS2llLG1CQUFtQixPQUFRLEdBQ3pDLENBS0EsWUFBQStCLEdBQ0UsT0FBT2hnQixLQUFLb1EsUUFBUTRQLGNBQ3RCLENBTUEsY0FBQUMsR0FDRSxPQUFPamdCLEtBQUtpZSxtQkFBbUIsaUJBQWtCLEdBQ25ELENBQ0EsZUFBQWlDLElBQW1CdkssR0FDakIsT0FBTzNWLEtBQUtpZSxtQkFBbUIsU0FBVXRJLEVBQzNDLENBQ0EsY0FBQXdLLElBQWtCeEssR0FDaEIsT0FBTzNWLEtBQUtpZSxtQkFBbUIsUUFBU3RJLEVBQzFDLENBQ0EsWUFBQXlLLElBQWdCekssR0FDZCxPQUFPM1YsS0FBS2llLG1CQUFtQixlQUFnQnRJLEVBQ2pELENBQ0EsU0FBQXJCLElBQWFxQixHQUNYLE9BQU8zVixLQUFLaWUsbUJBQW1CLFlBQWF0SSxFQUM5QyxDQUNBLGtCQUFBMEssSUFBc0IxSyxHQUNwQixPQUFPM1YsS0FBS2llLG1CQUFtQixZQUFhdEksRUFDOUMsQ0FNQSxLQUFBclIsR0FDRSxPQUFPdEUsS0FBS2llLG1CQUFtQixRQUFTLEdBQzFDLENBS0EsYUFBSXFDLEdBQ0YsT0FBT3RnQixLQUFLd2QsU0FBUzhDLFNBQ3ZCLENBQ0EsYUFBSUEsQ0FBVWhaLEdBQ1p0SCxLQUFLd2QsU0FBUzhDLFVBQVloWixDQUM1QixDQUtBLGVBQUlpWixHQUNGLE9BQU92Z0IsS0FBS3dkLFNBQVMrQyxXQUN2QixDQUNBLGVBQUlBLENBQVlqWixHQUNkdEgsS0FBS3dkLFNBQVMrQyxZQUFjalosQ0FDOUIsQ0FTQSxLQUFBa1osQ0FBTUMsR0FBTyxHQUNYLE9BQUlBLEVBQ0ssSUFBSXJELEVBQVNwZCxLQUFLd2QsU0FBU2dELFVBRXBDeGdCLEtBQUt5ZCxjQUFnQixLQUNQLElBQUlMLEVBQVNwZCxLQUFLd2QsVUFFbEMsQ0FRQSxTQUFBa0QsQ0FBVTVmLEVBQU8wVSxFQUFPaEcsSUFDdEIsRUFBQWlILEVBQUEsSUFBWSxLQUFRLGdHQUNwQixNQUFNOEosRUFBYyxDQUFDLEVBS3JCLE9BSkF6ZixJQUFVeWYsRUFBWXpmLE1BQVFBLEdBQzlCMFUsSUFBVStLLEVBQVkvSyxNQUFRQSxHQUM5QmhHLElBQVUrUSxFQUFZL1EsTUFBUUEsR0FDOUJ4UCxLQUFLb1EsUUFBUW1RLFlBQWNBLEVBQ3BCdmdCLElBQ1QsQ0FNQSxTQUFBMmdCLENBQVVuTCxFQUFPaEcsSUFDZixFQUFBaUgsRUFBQSxJQUFZLEtBQVEsdUdBQ3BCLE1BQU02SixFQUFZLENBQUMsRUFJbkIsT0FIQTlLLElBQVU4SyxFQUFVOUssTUFBUUEsR0FDNUJoRyxJQUFVOFEsRUFBVTlRLE1BQVFBLEdBQzVCeFAsS0FBS29RLFFBQVFrUSxVQUFZQSxFQUNsQnRnQixJQUNULENBSUEsT0FBQTRnQixJQUNFLEVBQUFuSyxFQUFBLElBQVksS0FBUSxxR0FDcEJ6VyxLQUFLb1EsUUFBUWlPLE9BQ2IsTUFBTWtDLEVBQWN2Z0IsS0FBS29RLFFBQVFtUSxZQUlqQyxPQUhJQSxFQUFZemYsUUFBVXdjLEVBQUEsRUFBZ0J1RCxtQkFBbUIvZixPQUFTeWYsRUFBWS9LLFFBQVU4SCxFQUFBLEVBQWdCdUQsbUJBQW1CckwsT0FBUytLLEVBQVkvUSxRQUFVOE4sRUFBQSxFQUFnQnVELG1CQUFtQnJSLE9BQy9MeFAsS0FBS29RLFFBQVFrTyxTQUVSdGUsSUFDVCxDQUtBLFVBQUE4Z0IsSUFBY25MLEdBRVosT0FEQSxFQUFBYyxFQUFBLElBQVksS0FBUSwyREFDYnpXLEtBQUtpZSxtQkFBbUIsU0FBVXRJLEVBQzNDLENBS0EsV0FBQW9MLElBQWVwTCxHQUViLE9BREEsRUFBQWMsRUFBQSxJQUFZLEtBQVEsNkRBQ2J6VyxLQUFLaWUsbUJBQW1CLFVBQVd0SSxFQUM1QyxDQUtBLFdBQUFxTCxJQUFlckwsR0FFYixPQURBLEVBQUFjLEVBQUEsSUFBWSxLQUFRLDBEQUNielcsS0FBS2llLG1CQUFtQixPQUFRdEksRUFDekMsQ0FLQSxRQUFBc0wsSUFBWXRMLEdBRVYsT0FEQSxFQUFBYyxFQUFBLElBQVksS0FBUSx1REFDYnpXLEtBQUtpZSxtQkFBbUIsT0FBUXRJLEVBQ3pDLENBS0EsZUFBQXVMLElBQW1CdkwsR0FFakIsT0FEQSxFQUFBYyxFQUFBLElBQVksS0FBUSxtRUFDYnpXLEtBQUtpZSxtQkFBbUIsWUFBYXRJLEVBQzlDLENBS0EsUUFBQXdMLElBQVl4TCxHQUVWLE9BREEsRUFBQWMsRUFBQSxJQUFZLEtBQVEsdURBQ2J6VyxLQUFLaWUsbUJBQW1CLE9BQVF0SSxFQUN6QyxFLDZGQ3JZRixNQUFNeUwsRUFBc0IsQ0FDMUJwZCxLQUFNLHlCQUNOOEssT0FBUSxDQUNOQyxPQUVFLGlTQVdGQyxLQUVFLHNIQUtGQyxJQUVFLCtMQVFKdUssU0FBVSxDQUNSekssT0FFRSxvUUFVRkMsS0FFRSxnSUFNQXFTLEVBQXdCLENBQzVCcmQsS0FBTSx5QkFDTjhLLE9BQVEsQ0FDTkMsT0FFRSw4SEFNRkMsS0FFRSwwRkFLRkMsSUFFRSxzSkFRSnVLLFNBQVUsQ0FDUnpLLE9BRUUsb0RBSUZDLEtBRUUsK0ZDM0ZBc1MsRUFBVSxDQUNkdGQsS0FBTSxXQUNOd1YsU0FBVSxDQUNSekssT0FFRSw4bENBK0JBd1MsRUFBWSxDQUNoQnZkLEtBQU0sV0FDTndWLFNBQVUsQ0FDUnpLLE9BRUUsK25DQzdCTixJQUFJMkssRUFDQUMsRUFDSixNQUFNNkgsVUFBa0IzSCxFQUFBLEVBQ3RCLFdBQUFuWCxHQUNFLE1BQU0ySixFQUFXLElBQUlqRixFQUFBLEVBQWEsQ0FDaEM0SyxPQUFRLENBQUUxSyxNQUFPLElBQUlaLGFBQWEsQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUFLOUMsS0FBTSxhQUN2RGdPLGlCQUFrQixDQUFFdEssTUFBTyxJQUFJcEQsRUFBQSxFQUFVTixLQUFNLGVBQy9DNmQsVUFBVyxDQUFFbmEsTUFBTyxFQUFHMUQsS0FBTSxPQUM3QmlPLE9BQVEsQ0FBRXZLLE1BQU8sRUFBRzFELEtBQU0sU0FFdEI4ZCxHQUFjLFNBQ3BCaEksSUFBZUEsR0FBYSxPQUE0QixDQUN0RDFWLEtBQU0sYUFDTjhWLEtBQU0sQ0FDSjZILEVBQUEsR0FDQSxFQUFBQyxFQUFBLEdBQXdCRixHQUN4Qk4sRUFDQUUsRUFDQXZILEVBQUEsTUFHSkosSUFBY0EsR0FBWSxPQUEyQixDQUNuRDNWLEtBQU0sYUFDTjhWLEtBQU0sQ0FDSjZILEVBQUEsR0FDQSxFQUFBQyxFQUFBLEdBQTBCRixHQUMxQkwsRUFDQUUsRUFDQXhILEVBQUEsTUFHSmhFLE1BQU0sQ0FDSjRELFlBQ0FELGFBQ0EvSCxVQUFXLENBQ1RELGNBQWVyRixFQUNmd1YsZUFBZSxFQUFBQyxFQUFBLEdBQTZCSixLQUdsRCxFLHdCQzNDRixNQUFNSyxFQUNKLFdBQUFyZixDQUFZckIsR0FDVnJCLEtBQUtnaUIsZUFBaUIsQ0FBQyxFQUN2QmhpQixLQUFLK1Asd0JBQTBCL1AsS0FBS2dRLGtCQUFrQnhGLEtBQUt4SyxNQUMzREEsS0FBSzJDLFVBQVl0QixDQUNuQixDQUNBLGtCQUFBNk8sQ0FBbUIrUixHQUNqQixNQUFNQyxFQUFxQmxpQixLQUFLbWlCLGtCQUFrQkYsR0FLbEQsT0FKSUEsRUFBV0csaUJBQ2JILEVBQVdHLGdCQUFpQixFQUM1QnBpQixLQUFLcWlCLGVBQWVKLEVBQVlDLElBRTNCbGlCLEtBQUsyQyxVQUFVSyxZQUFZbU4sU0FBU0QsbUJBQW1CZ1MsRUFDaEUsQ0FDQSxhQUFBdlIsQ0FBY3NSLEVBQVlsZixHQUN4QixNQUFNbWYsRUFBcUJsaUIsS0FBS21pQixrQkFBa0JGLEdBQ2xESyxFQUFjTCxFQUFZQyxHQUN0QkQsRUFBV0csaUJBQ2JILEVBQVdHLGdCQUFpQixFQUM1QnBpQixLQUFLcWlCLGVBQWVKLEVBQVlDLElBRWxDbGlCLEtBQUsyQyxVQUFVSyxZQUFZbU4sU0FBU1EsY0FBY3VSLEVBQW9CbmYsR0FDbEVtZixFQUFtQjlSLFFBQVFtQixjQUM3QnZSLEtBQUt1aUIscUJBQXFCTixFQUU5QixDQUNBLGlCQUFBalMsQ0FBa0JpUyxHQUNoQkEsRUFBVzdRLElBQUksWUFBYXBSLEtBQUsrUCx5QkFDakMvUCxLQUFLd2lCLHdCQUF3QlAsRUFBVzNSLElBQzFDLENBQ0EsdUJBQUFrUyxDQUF3QkMsR0FDdEIsTUFBTXJTLEVBQVVwUSxLQUFLZ2lCLGVBQWVTLEdBQWVyUyxRQUMvQ0EsRUFBUW1CLGVBQ1YsSUFBUW5MLE9BQU9nSyxFQUFRbUIsY0FDdkJuQixFQUFRbUIsYUFBZSxNQUV6QixJQUFRbkwsT0FBT3BHLEtBQUtnaUIsZUFBZVMsSUFDbkN6aUIsS0FBS2dpQixlQUFlUyxHQUFpQixJQUN2QyxDQUNBLGdCQUFBMVIsQ0FBaUJrUixHQUNmLE1BQU1DLEVBQXFCbGlCLEtBQUttaUIsa0JBQWtCRixHQUNsREssRUFBY0wsRUFBWUMsR0FDMUJsaUIsS0FBSzJDLFVBQVVLLFlBQVltTixTQUFTWSxpQkFBaUJtUixHQUNqREEsRUFBbUI5UixRQUFRbUIsY0FDN0J2UixLQUFLdWlCLHFCQUFxQk4sRUFFOUIsQ0FDQSxjQUFBSSxDQUFlSixFQUFZUyxHQUN6QixNQUFNLFFBQUV0UyxHQUFZc1MsRUFDZEMsRUFBYUMsRUFBQSxFQUFrQkMsUUFBUVosRUFBV2EsS0FBTWIsRUFBV2MsUUFDekUzUyxFQUFROUwsUUFDOEIsU0FBbENxZSxFQUFXSyxjQUFjcGYsT0FDdEJ3TSxFQUFRbUIsZUFDWG5CLEVBQVFtQixhQUFlLElBQVE5USxJQUFJK2dCLEtBR3ZDLE1BQU15QixFQUFRQyxNQUFNQyxLQUFLbEIsRUFBV2EsTUFDOUI3WCxFQUFRZ1gsRUFBV2MsT0FDekIsSUFBSUssRUFBV1QsRUFBV1UsZUFDMUIsTUFBTUMsR0FBbUIsRUFBQUMsRUFBQSxHQUFvQk4sRUFBT2hZLEVBQU8wWCxHQUFZLEdBQ3ZFLElBQUlqRyxFQUFRLEVBQ1osTUFBTXpULEVBQVVnQyxFQUFNaEMsUUFDaEJhLEVBQVF3WixFQUFpQnhaLE1BQy9CLElBQUltUixFQUFLcUksRUFBaUJ4aUIsTUFDdEJvYSxFQUFLb0ksRUFBaUJ2aUIsT0FBU3VpQixFQUFpQkUsUUFDaER2WSxFQUFNd1ksVUFDUnhJLEdBQU1oUSxFQUFNd1ksUUFBUTNpQixNQUFRZ0osRUFDNUJvUixHQUFNalEsRUFBTXdZLFFBQVEzaUIsTUFBUWdKLEdBRTlCc0csRUFBUTNCLFdBQVd3VCxFQUFXeUIsUUFBUUMsR0FBSzFJLEVBQUtoUyxHQUFVZ1osRUFBV3lCLFFBQVFFLEdBQUsxSSxFQUFLalMsR0FBU2EsTUFBTUEsRUFBT0EsR0FDN0csTUFBTStaLEVBQU9sQixFQUFXbUIsZ0JBQWtCN1ksRUFBTThZLE1BQU12TyxNQUFRLFNBQzlELElBQUssSUFBSTFQLEVBQUksRUFBR0EsRUFBSXdkLEVBQWlCVSxNQUFNOWUsT0FBUVksSUFBSyxDQUN0RCxNQUFNbWUsRUFBT1gsRUFBaUJVLE1BQU1sZSxHQUNwQyxJQUFLLElBQUlvZSxFQUFJLEVBQUdBLEVBQUlELEVBQUtFLGNBQWNqZixPQUFRZ2YsSUFBSyxDQUNsRCxNQUFNRSxFQUFPbkIsRUFBTXZHLEtBQ2IySCxFQUFXMUIsRUFBV00sTUFBTW1CLEdBQzlCQyxHQUFVN1YsU0FDWjRCLEVBQVE1QixRQUNONlYsRUFBUzdWLFFBQ1RxVixHQUFjLFFBQ2R4YSxLQUFLaWIsTUFBTUwsRUFBS0UsY0FBY0QsR0FBS0csRUFBU0UsU0FDNUNsYixLQUFLaWIsTUFBTWxCLEVBQVdpQixFQUFTRyxTQUdyQyxDQUNBcEIsR0FBWVQsRUFBVzhCLFVBQ3pCLENBQ0YsQ0FDQSxpQkFBQXRDLENBQWtCRixHQUNoQixPQUFPamlCLEtBQUtnaUIsZUFBZUMsRUFBVzNSLE1BQVF0USxLQUFLMGtCLFlBQVl6QyxFQUNqRSxDQUNBLFdBQUF5QyxDQUFZekMsR0FDVixNQUFNMEMsRUFBa0IsSUFBUWxrQixJQUFJMmMsR0FJcEMsT0FIQXBkLEtBQUtnaUIsZUFBZUMsRUFBVzNSLEtBQU9xVSxFQUN0QzNrQixLQUFLcWlCLGVBQWVKLEVBQVkwQyxHQUNoQzFDLEVBQVd2UCxHQUFHLFlBQWExUyxLQUFLK1AseUJBQ3pCL1AsS0FBS2dpQixlQUFlQyxFQUFXM1IsSUFDeEMsQ0FDQSxvQkFBQWlTLENBQXFCTixHQUNuQixNQUFNN1IsRUFBVXBRLEtBQUttaUIsa0JBQWtCRixHQUFZN1IsUUFDN0N3VSxFQUFhM0MsRUFBV2MsT0FBTzZCLFdBQy9CQyxFQUFjQyxFQUFBLEVBQU1ya0IsSUFBSSxHQUFHbWtCLGFBQzNCLEVBQUUvSixFQUFDLEVBQUVDLEVBQUMsRUFBRUMsRUFBQyxFQUFFQyxHQUFNaUgsRUFBV3JjLGVBQzVCbWYsRUFBSzFiLEtBQUsyYixLQUFLbkssRUFBSUEsRUFBSUMsRUFBSUEsR0FDM0JtSyxFQUFLNWIsS0FBSzJiLEtBQUtqSyxFQUFJQSxFQUFJQyxFQUFJQSxHQUMzQmtLLEdBQWM3YixLQUFLOGIsSUFBSUosR0FBTTFiLEtBQUs4YixJQUFJRixJQUFPLEVBQzdDRyxFQUFZUCxFQUFZUSxxQkFBdUJwRCxFQUFXYyxPQUFPdUMsU0FDakVDLEVBQVdMLEVBQWFMLEVBQVk3QixjQUFjd0MsT0FBUyxFQUFJSixHQUNyRWhWLEVBQVFtQixhQUFhSSxVQUFVRCxjQUFjckYsU0FBU29WLFVBQVk4RCxDQUNwRSxDQUNBLE9BQUEvakIsR0FDRSxJQUFLLE1BQU04TyxLQUFPdFEsS0FBS2dpQixlQUNyQmhpQixLQUFLd2lCLHdCQUF3QmxTLEdBRS9CdFEsS0FBS2dpQixlQUFpQixLQUN0QmhpQixLQUFLMkMsVUFBWSxJQUNuQixFQVdGLFNBQVMyZixFQUFjeGYsRUFBVzJpQixHQUNoQ0EsRUFBTTdmLGVBQWlCOUMsRUFBVThDLGVBQ2pDNmYsRUFBTTFULGdCQUFrQmpQLEVBQVVpUCxnQkFDbEMwVCxFQUFNQyxXQUFhNWlCLEVBQVU0aUIsV0FDN0JELEVBQU1oVSxlQUFpQjNPLEVBQVUyTyxlQUNqQ2dVLEVBQU1qZCxvQkFBc0IxRixFQUFVMEYsb0JBQ3RDaWQsRUFBTTdmLGVBQWlCOUMsRUFBVThDLGVBQ2pDNmYsRUFBTTNnQixtQkFBcUJoQyxFQUFVZ0MsbUJBQ3JDMmdCLEVBQU1FLFdBQWE3aUIsRUFBVTZpQixXQUM3QkYsRUFBTTNULGFBQWVoUCxFQUFVZ1AsWUFDakMsQ0FsQkFpUSxFQUFldGdCLFVBQVksQ0FDekJtQyxLQUFNLENBQ0osS0FBY0MsV0FDZCxLQUFjQyxZQUNkLEtBQWNDLGFBRWhCQyxLQUFNLGNDbElSLEtBQVc5QixJQUFJNmYsRSx1RUNHZixNQUFNNkQsRUFDSixXQUFBbGpCLENBQVlyQixHQUNWckIsS0FBSzZsQixTQUEyQi9sQixPQUFPZ1EsT0FBTyxNQUM5QzlQLEtBQUsrUCx3QkFBMEIvUCxLQUFLZ1Esa0JBQWtCeEYsS0FBS3hLLE1BQzNEQSxLQUFLMkMsVUFBWXRCLEVBQ2pCckIsS0FBSzJDLFVBQVVtakIsUUFBUUMsaUJBQWlCN2pCLElBQUlsQyxLQUM5QyxDQUNBLGdCQUFBK2xCLEdBQ0UsSUFBSyxNQUFNamdCLEtBQUs5RixLQUFLNmxCLFNBQVUsQ0FDN0IsTUFBTUcsRUFBVWhtQixLQUFLNmxCLFNBQVMvZixHQUM5QixJQUFLa2dCLEVBQ0gsU0FDRixNQUFNbEQsRUFBT2tELEVBQVEzTSxnQkFBZ0I5USxXQUNqQ3VhLEVBQUttRCxrQkFDUG5ELEVBQUt2WixZQUFjdkosS0FBSzJDLFVBQVVvRyxXQUNsQytaLEVBQUtwRixlQUVULENBQ0YsQ0FDQSxrQkFBQXhOLENBQW1CZ1csR0FDakIsTUFBTUYsRUFBVWhtQixLQUFLbW1CLFlBQVlELEdBQzNCRSxFQUFTRixFQUFTRyxVQUN4QixPQUFJTCxFQUFRTSx1QkFDVk4sRUFBUU0sdUJBQXdCLEdBQ3pCLEdBRUxOLEVBQVFPLGFBQWVILENBSTdCLENBQ0EsYUFBQXpWLENBQWN1VixFQUFVbmpCLEdBQ3RCLE1BQ01zVyxFQURVclosS0FBS21tQixZQUFZRCxHQUNEN00sZ0JBQzVCNk0sRUFBUzlELGdCQUNYcGlCLEtBQUt3bUIsWUFBWU4sR0FFbkJsbUIsS0FBSzJDLFVBQVVLLFlBQVlDLE1BQU1vUCxXQUFXZ0gsRUFBaUJ0VyxFQUMvRCxDQUNBLGdCQUFBZ08sQ0FBaUJtVixHQUNmLE1BQ003TSxFQURVclosS0FBS21tQixZQUFZRCxHQUNEN00sZ0JBQzVCNk0sRUFBUzlELGdCQUNYcGlCLEtBQUt3bUIsWUFBWU4sR0FFbkI3TSxFQUFnQnBJLFNBQVNDLGNBQWNtSSxFQUN6QyxDQUNBLGlCQUFBckosQ0FBa0JrVyxHQUNoQkEsRUFBUzlVLElBQUksWUFBYXBSLEtBQUsrUCx5QkFDL0IvUCxLQUFLeW1CLHVCQUF1QlAsRUFBUzVWLElBQ3ZDLENBQ0Esc0JBQUFtVyxDQUF1QkMsR0FDckIsTUFBTVYsRUFBVWhtQixLQUFLNmxCLFNBQVNhLEdBQzlCMW1CLEtBQUsyQyxVQUFVdWpCLFNBQVNTLHVCQUF1QlgsRUFBUU8sWUFDdkQsSUFBUW5nQixPQUFPNGYsRUFBUTNNLGlCQUN2QnJaLEtBQUs2bEIsU0FBU2EsR0FBZSxJQUMvQixDQUNBLFdBQUFGLENBQVlOLEdBQ1YsTUFBTUUsRUFBU0YsRUFBU0csVUFDbEJMLEVBQVVobUIsS0FBS21tQixZQUFZRCxHQUMzQjdNLEVBQWtCMk0sRUFBUTNNLGdCQUM1QjJNLEVBQVFPLGFBQWVILEdBQ3pCcG1CLEtBQUs0bUIsZUFBZVYsR0FBVVcsT0FBT0MsSUFDbkNDLFFBQVFDLE1BQU1GLEVBQUUsSUFHcEJaLEVBQVM5RCxnQkFBaUIsRUFDMUIsTUFBTW5aLEVBQVVpZCxFQUFTbkQsT0FBTzlaLFNBQ2hDLEVBQUFnZSxFQUFBLEdBQWlCNU4sRUFBZ0JoVixPQUFRNmhCLEVBQVN4QyxRQUFTckssRUFBZ0I3SyxRQUFTdkYsRUFDdEYsQ0FDQSxvQkFBTTJkLENBQWVWLEdBQ25CQSxFQUFTOUQsZ0JBQWlCLEVBQzFCLE1BQU00RCxFQUFVaG1CLEtBQUttbUIsWUFBWUQsR0FDakMsR0FBSUYsRUFBUWtCLGtCQUNWLE9BQ0YsTUFBTWQsRUFBU0YsRUFBU0csVUFDeEJybUIsS0FBSzJDLFVBQVV1akIsU0FBU1MsdUJBQXVCWCxFQUFRTyxZQUN2RFAsRUFBUWtCLG1CQUFvQixFQUM1QmxCLEVBQVFPLFdBQWFILEVBQ3JCLE1BQU1yZCxFQUFhbWQsRUFBU25kLFlBQWMvSSxLQUFLMkMsVUFBVW9HLFdBQ25EeUYsUUFBZ0J4TyxLQUFLMkMsVUFBVXVqQixTQUFTaUIsa0JBQzVDakIsRUFBU3BELEtBQ1QvWixFQUNBbWQsRUFBU25ELE9BQ1RtRCxFQUFTRyxXQUVMaE4sRUFBa0IyTSxFQUFRM00sZ0JBQ2hDQSxFQUFnQjdLLFFBQVV3WCxFQUFReFgsUUFBVUEsRUFDNUN3WCxFQUFRa0IsbUJBQW9CLEVBQzVCbEIsRUFBUU0sdUJBQXdCLEVBQ2hDSixFQUFTeEksZUFDVCxNQUFNelUsRUFBVWlkLEVBQVNuRCxPQUFPOVosU0FDaEMsRUFBQWdlLEVBQUEsR0FBaUI1TixFQUFnQmhWLE9BQVE2aEIsRUFBU3hDLFFBQVNySyxFQUFnQjdLLFFBQVN2RixFQUN0RixDQUNBLFdBQUFrZCxDQUFZRCxHQUNWLE9BQU9sbUIsS0FBSzZsQixTQUFTSyxFQUFTNVYsTUFBUXRRLEtBQUswa0IsWUFBWXdCLEVBQ3pELENBQ0EsV0FBQXhCLENBQVl3QixHQUNWLE1BQU1rQixFQUFjLENBQ2xCNVksUUFBUzlELEVBQUEsRUFBUUMsTUFDakI0YixXQUFZLEtBQ1psTixnQkFBaUIsSUFBUTVZLElBQUl5YyxFQUFBLEdBQzdCb0osdUJBQXVCLEVBQ3ZCWSxtQkFBbUIsR0FFZjdOLEVBQWtCK04sRUFBWS9OLGdCQVNwQyxPQVJBQSxFQUFnQjlRLFdBQWEyZCxFQUM3QjdNLEVBQWdCL0UsVUFBWTRSLEVBQVN0Z0IsZUFDckN5VCxFQUFnQjdLLFFBQVU5RCxFQUFBLEVBQVFDLE1BQ2xDME8sRUFBZ0JoVixPQUFTLENBQUVtQixLQUFNLEVBQUdFLEtBQU0sRUFBR0QsS0FBTSxFQUFHRSxLQUFNLEdBQzVEMFQsRUFBZ0IvRyxZQUFjdFMsS0FBSzJDLFVBQVVtUCxhQUFlb1UsRUFBU3BVLGFBQ3JFb1UsRUFBUzNjLFlBQWMyYyxFQUFTRCxnQkFBa0JqbUIsS0FBSzJDLFVBQVVvRyxXQUFhbWQsRUFBU25kLFdBQ3ZGL0ksS0FBSzZsQixTQUFTSyxFQUFTNVYsS0FBTzhXLEVBQzlCbEIsRUFBU3hULEdBQUcsWUFBYTFTLEtBQUsrUCx5QkFDdkJxWCxDQUNULENBQ0EsT0FBQTVsQixHQUNFLElBQUssTUFBTXNFLEtBQUs5RixLQUFLNmxCLFNBQ25CN2xCLEtBQUt5bUIsdUJBQXVCM2dCLEdBRTlCOUYsS0FBSzZsQixTQUFXLEtBQ2hCN2xCLEtBQUsyQyxVQUFZLElBQ25CLEVBR0ZpakIsRUFBYW5rQixVQUFZLENBQ3ZCbUMsS0FBTSxDQUNKLEtBQWNDLFdBQ2QsS0FBY0MsWUFDZCxLQUFjQyxhQUVoQkMsS0FBTSxZLHFEQ3pJUixNQUFNcWpCLEVBQVEsNkJBQ1JDLEVBQVUsK0JBQ2hCLE1BQU1DLEVBQ0osV0FBQTdrQixHQUNFMUMsS0FBS3duQixRQUFVQyxTQUFTQyxnQkFBZ0JMLEVBQU8sT0FDL0NybkIsS0FBSzJuQixjQUFnQkYsU0FBU0MsZ0JBQWdCTCxFQUFPLGlCQUNyRHJuQixLQUFLNG5CLFdBQWFILFNBQVNDLGdCQUFnQkosRUFBUyxPQUNwRHRuQixLQUFLNm5CLGFBQWVKLFNBQVNDLGdCQUFnQkosRUFBUyxTQUN0RHRuQixLQUFLOG5CLE1BQVEsSUFBSUMsTUFDakIsTUFBTSxjQUFFSixFQUFhLFFBQUVILEVBQU8sYUFBRUssRUFBWSxXQUFFRCxHQUFlNW5CLEtBQzdEMm5CLEVBQWNLLGFBQWEsUUFBUyxTQUNwQ0wsRUFBY0ssYUFBYSxTQUFVLFNBQ3JDTCxFQUFjMWMsTUFBTWdkLFNBQVcsU0FDL0JULEVBQVFVLFlBQVlQLEdBQ3BCQSxFQUFjTyxZQUFZTCxHQUMxQkYsRUFBY08sWUFBWU4sRUFDNUIsRSxrQ0NhRixTQUFTTyxFQUFnQkMsR0FDdkIsTUFBTTVTLEVBQVE2UyxFQUFBLEVBQU05bEIsT0FBTytsQixTQUFTRixFQUFnQjVTLE9BQU8rUyxTQUFTSCxFQUFnQjVZLE9BQU9nWixTQUdyRkMsRUFBVyxHQUZQcGYsS0FBS2liLE1BQU1qYixLQUFLcWYsSUFBSU4sRUFBZ0JPLE9BQVNQLEVBQWdCN0MsZUFDN0RsYyxLQUFLaWIsTUFBTWpiLEtBQUt1ZixJQUFJUixFQUFnQk8sT0FBU1AsRUFBZ0I3QyxjQUV2RSxPQUFJNkMsRUFBZ0JTLEtBQU8sRUFDbEIsZ0JBQWdCSixLQUFZTCxFQUFnQlMsVUFBVXJULElBRXhELGdCQUFnQmlULEtBQVlqVCxHQUNyQyxDQUNBLFNBQVNzVCxFQUFZeEssR0FDbkIsTUFBTyxDQUNMLDhCQUE4QkEsRUFBT3hkLFVBQ3JDLDhCQUE4QnVuQixFQUFBLEVBQU05bEIsT0FBTytsQixTQUFTaEssRUFBTzlJLE9BQU91VCxVQUNsRSxzQkFBc0J6SyxFQUFPeGQsVUFDN0Isc0JBQXNCdW5CLEVBQUEsRUFBTTlsQixPQUFPK2xCLFNBQVNoSyxFQUFPOUksT0FBT3VULFVBQzFELHVCQUNBQyxLQUFLLElBQ1QsQ0FDQSxNQUFNQyxFQUFZLENBQ2hCM0QsU0FBVSx5QkFDVlYsV0FBWSx5QkFDWnNFLFdBQVkseUJBQ1pDLFVBQVcsd0JBQ1hDLFlBQWEsMEJBQ2JDLGNBQWUsOEJBQ2ZDLE1BQU8sd0JBQ1ByZ0IsUUFBUyx1QkFDVHNnQixXQUFZLHlCQUNaOUUsV0FBWSwyQkFDWitFLGNBQWUsMEJBRVhsVixFQUFZLENBQ2hCK0osS0FBTy9XLEdBQVUsVUFBVStnQixFQUFBLEVBQU05bEIsT0FBTytsQixTQUFTaGhCLEdBQU95aEIsVUFDeERVLFdBQWFuaUIsR0FBVSxlQUFjQSxFQUFRLFlBQWMsY0FDM0RnWCxPQUFRd0ssRUFDUlksV0FBWXZCLEdDNURkLE1BQU13QixVQUFzQkMsRUFBQSxFQUMxQixXQUFBbG5CLENBQVk3QyxFQUFVLENBQUMsR0FDckJrVyxNQUFNbFcsR0FDTkcsS0FBSzZwQixjQUFnQixHQUNyQjdwQixLQUFLOHBCLGVBQWlCOXBCLEtBQUs4cEIsYUFBZWpxQixFQUFRaXFCLGNBQ2xEOXBCLEtBQUsrcEIsVUFBWWxxQixFQUFRa3FCLFdBQWEsQ0FBQyxDQUN6QyxDQUVBLGdCQUFJRCxDQUFheGlCLEdBQ2Z0SCxLQUFLNnBCLGNBQWdCdmlCLGFBQWlCNGIsTUFBUTViLEVBQVEsQ0FBQ0EsR0FDdkR0SCxLQUFLbU4sUUFDUCxDQUNBLGdCQUFJMmMsR0FDRixPQUFPOXBCLEtBQUs2cEIsYUFDZCxDQUNBLFlBQUFHLEdBRUUsT0FEQWhxQixLQUFLaXFCLFdBQVksRUFBQUMsRUFBQSxHQUFxQmxxQixNQUFRQSxLQUFLNnBCLGNBQWNiLEtBQUssS0FDL0RocEIsS0FBS2lxQixTQUNkLENBQ0EsTUFBQTljLEdBQ0VuTixLQUFLbXFCLFVBQVksS0FDakJwVSxNQUFNNUksUUFDUixDQUtBLEtBQUFxVCxHQUNFLE9BQU8sSUFBSW1KLEVBQWMsQ0FDdkJMLE1BQU90cEIsS0FBS3NwQixNQUNaRyxXQUFZenBCLEtBQUt5cEIsV0FDakJDLFdBQVkxcEIsS0FBSzBwQixXQUFhLElBQUsxcEIsS0FBSzBwQixZQUFlLEtBQ3ZEckwsS0FBTXJlLEtBQUsrakIsTUFDWGEsV0FBWTVrQixLQUFLNGtCLFdBQ2pCVSxTQUFVdGxCLEtBQUtzbEIsU0FDZjZELFVBQVducEIsS0FBS21wQixVQUNoQkMsWUFBYXBwQixLQUFLb3BCLFlBQ2xCRixXQUFZbHBCLEtBQUtrcEIsV0FDakJHLGNBQWVycEIsS0FBS3FwQixjQUNwQjVFLFdBQVl6a0IsS0FBS3lrQixXQUNqQnhiLFFBQVNqSixLQUFLaUosUUFDZHFWLE9BQVF0ZSxLQUFLeWpCLFFBQ2I4RixXQUFZdnBCLEtBQUt1cEIsV0FDakJhLFNBQVVwcUIsS0FBS29xQixTQUNmWixjQUFleHBCLEtBQUt3cEIsY0FDcEJNLGFBQWM5cEIsS0FBSzhwQixjQUV2QixDQUNBLFlBQUlPLEdBSUYsT0FIS3JxQixLQUFLbXFCLFlBQ1JucUIsS0FBS21xQixVRHJEWCxTQUF3QmxmLEdBQ3RCLE1BQU1xVCxFQUFTclQsRUFBTXdZLFFBQ2ZwRixFQUFPcFQsRUFBTThZLE1BcUJidUcsRUFBWSxDQUFDLFNBcEJJLENBQ3JCLFVBQVVqQyxFQUFBLEVBQU05bEIsT0FBTytsQixTQUFTakssRUFBSzdJLE9BQU91VCxVQUM1QyxjQUFjOWQsRUFBTXFhLGFBQ3BCLGdCQUFnQnJhLEVBQU0yWixhQUN0QixnQkFBZ0IzWixFQUFNaWUsYUFDdEIsZUFBZWplLEVBQU1rZSxZQUNyQixpQkFBaUJsZSxFQUFNbWUsY0FDdkIsbUJBQW1CbmUsRUFBTW9lLGtCQUN6QixlQUFlcGUsRUFBTXFlLFFBQ3JCLFlBQVlyZSxFQUFNaEMsWUFDbEIsZ0JBQXFDLFFBQXJCZ0MsRUFBTXNlLFlBQXdCdGUsRUFBTW1mLFNBQVcsV0FBYW5mLEVBQU1zZSxnQkFDL0V0ZSxFQUFNd1osV0FBYSxDQUFDLGdCQUFnQnhaLEVBQU13WixnQkFBa0IsTUFDNUR4WixFQUFNbWYsU0FBVyxDQUNsQixlQUFjbmYsRUFBTXdlLFdBQWEsWUFBYyxjQUMvQyxjQUFjeGUsRUFBTXVlLG1CQUNsQixNQUNEbEwsRUFBUyxDQUFDd0ssRUFBWXhLLElBQVcsTUFDakNyVCxFQUFNeWUsV0FBYSxDQUFDdkIsRUFBZ0JsZCxFQUFNeWUsYUFBZSxNQUN6RHplLEVBQU02ZSxjQUNUZCxLQUFLLFVBR1AsT0F3Q0YsU0FBdUJlLEVBQVd4YSxHQUNoQyxJQUFLLE1BQU16SixLQUFLaWtCLEVBQVcsQ0FDekIsTUFBTVEsRUFBV1IsRUFBVWprQixHQUNyQjBrQixFQUFjLEdBQ3BCLElBQUssTUFBTXRHLEtBQUtxRyxFQUNWalcsRUFBVTRQLEdBQ1pzRyxFQUFZNW5CLEtBQUswUixFQUFVNFAsR0FBR3FHLEVBQVNyRyxLQUM5QitFLEVBQVUvRSxJQUNuQnNHLEVBQVk1bkIsS0FBS3FtQixFQUFVL0UsR0FBRy9VLFFBQVEsWUFBYW9iLEVBQVNyRyxLQUdoRTNVLEVBQUkzTSxLQUFLLEdBQUdrRCxPQUFPMGtCLEVBQVl4QixLQUFLLFNBQ3RDLENBQ0YsQ0F0REV5QixDQUFjeGYsRUFBTThlLFVBQVdPLEdBQ3hCQSxFQUFVdEIsS0FBSyxJQUN4QixDQzJCdUIwQixDQUFlMXFCLE9BRTNCQSxLQUFLbXFCLFNBQ2QsQ0FVQSxXQUFBUSxJQUFlcmpCLEdBQ2IsTUFBTXNqQixFQUFRdGpCLEVBQU0zRCxRQUFRa25CLElBQU83cUIsS0FBSzhwQixhQUFhZ0IsU0FBU0QsS0FDMURELEVBQU0xbEIsT0FBUyxJQUNqQmxGLEtBQUs4cEIsYUFBYWxuQixRQUFRZ29CLEdBQzFCNXFCLEtBQUttTixTQUVULENBT0EsY0FBQTRkLElBQWtCempCLEdBQ2hCLE1BQU0wakIsRUFBVzFqQixFQUFNM0QsUUFBUWtuQixHQUFNN3FCLEtBQUs4cEIsYUFBYWdCLFNBQVNELEtBQzVERyxFQUFTOWxCLE9BQVMsSUFDcEJsRixLQUFLOHBCLGFBQWU5cEIsS0FBSzhwQixhQUFhbm1CLFFBQVFrbkIsSUFBT0csRUFBU0YsU0FBU0QsS0FDdkU3cUIsS0FBS21OLFNBRVQsQ0FDQSxRQUFJa1IsQ0FBSy9XLEdBQ2MsaUJBQVZBLEdBQXVDLGlCQUFWQSxJQUN0QyxFQUFBcUMsRUFBQSxHQUFLLGdFQUVQb00sTUFBTXNJLEtBQU8vVyxDQUNmLENBQ0EsVUFBSWdYLENBQU9oWCxHQUNMQSxHQUEwQixpQkFBVkEsR0FBdUMsaUJBQVZBLElBQy9DLEVBQUFxQyxFQUFBLEdBQUssa0VBRVBvTSxNQUFNdUksT0FBU2hYLENBQ2pCLEUsY0NqR0YyakIsZUFBZUMsRUFBWWpnQixFQUFPa2dCLEdBQ2hDLE1BQU1DLFFDRFJILGVBQWdDRSxHQUM5QixNQUFNRSxRQUFpQixJQUFXNXFCLE1BQU02cUIsTUFBTUgsR0FDeENJLFFBQWFGLEVBQVNFLE9BQ3RCQyxFQUFTLElBQUlDLFdBTW5CLGFBTHNCLElBQUlDLFNBQVEsQ0FBQ0MsRUFBU0MsS0FDMUNKLEVBQU9LLFVBQVksSUFBTUYsRUFBUUgsRUFBT00sUUFDeENOLEVBQU9PLFFBQVVILEVBQ2pCSixFQUFPUSxjQUFjVCxFQUFLLEdBRzlCLENEVHdCVSxDQUFpQmQsR0FDdkMsTUFBTyx1Q0FDZWxnQixFQUFNMlosbUNBQ1Z3Ryw4QkFDR25nQixFQUFNaWUsb0NBQ1BqZSxFQUFNa2UsbUJBRTVCLENFUEEsTUFBTStDLEVBQXdDLElBQUlDLEksd0JDQWxELElBQUlDLEVDYUosTUFBTUMsRUFDSixXQUFBM3BCLENBQVlyQixHQUNWckIsS0FBS3NzQixnQkFBa0IsQ0FBQyxFQUN4QnRzQixLQUFLMkMsVUFBWXRCLEVBQ2pCckIsS0FBS3VzQixjQUFnQmxyQixFQUFTdUMsT0FBUyxJQUFhNG9CLE1BQ3RELENBQ0EsVUFBQUMsQ0FBVzVzQixHQUNULE9BQU9HLEtBQUswc0IscUJBQ1Y3c0IsRUFBUWlqQixLQUNSampCLEVBQVFrSixXQUNSbEosRUFBUW9MLE1BRVosQ0FDQSxpQkFBQWtjLENBQWtCckUsRUFBTS9aLEVBQVlrQyxFQUFPMGhCLEdBQ3pDLEdBQUkzc0IsS0FBS3NzQixnQkFBZ0JLLEdBRXZCLE9BREEzc0IsS0FBSzRzQix3QkFBd0JELEdBQ3RCM3NCLEtBQUtzc0IsZ0JBQWdCSyxHQUFTRSxRQUV2QyxNQUFNQSxFQUFVN3NCLEtBQUswc0IscUJBQXFCNUosRUFBTS9aLEVBQVlrQyxHQUFPNmhCLE1BQU10ZSxJQUN2RXhPLEtBQUtzc0IsZ0JBQWdCSyxHQUFTbmUsUUFBVUEsRUFDakNBLEtBT1QsT0FMQXhPLEtBQUtzc0IsZ0JBQWdCSyxHQUFXLENBQzlCbmUsUUFBUyxLQUNUcWUsVUFDQUUsV0FBWSxHQUVQRixDQUNULENBQ0EsMEJBQU1ILENBQXFCNUosRUFBTS9aLEVBQVlrQyxHQUMzQyxNQUFNK2hCLEVBQWUsSUFBUXZzQixJQUFJOG1CLEdBQzNCMEYsRUMvQ1YsU0FBNkJuSyxFQUFNN1gsR0FDakMsTUFBTTJaLEVBQWEzWixFQUFNMlosV0FDbkJxSSxFQUFlLEdBQ2ZDLEVBQVMsQ0FBQyxFQUVWQyxFQUFVckssRUFBS3NLLE1BRFAsMkJBRWQsU0FBU0MsRUFBY0MsR0FDaEJKLEVBQU9JLEtBQ1ZMLEVBQWFycUIsS0FBSzBxQixHQUNsQkosRUFBT0ksSUFBZSxFQUUxQixDQUNBLEdBQUlwSyxNQUFNcUssUUFBUTNJLEdBQ2hCLElBQUssSUFBSTllLEVBQUksRUFBR0EsRUFBSThlLEVBQVcxZixPQUFRWSxJQUNyQ3VuQixFQUFjekksRUFBVzllLFNBRzNCdW5CLEVBQWN6SSxHQUVadUksR0FDRkEsRUFBUXZhLFNBQVN3YSxJQUVmQyxFQURvQkQsRUFBTUksTUFBTSxLQUFLLEdBQUdDLE9BQ2QsSUFHOUIsSUFBSyxNQUFNM25CLEtBQUttRixFQUFNOGUsVUFFcEJzRCxFQURvQnBpQixFQUFNOGUsVUFBVWprQixHQUFHOGUsWUFHekMsT0FBT3FJLENBQ1QsQ0RpQnlCUyxDQUFvQjVLLEVBQU03WCxHQUN6QzBpQixRRjVDVjFDLGVBQTBCZ0MsRUFBY2hpQixFQUFPMkssR0FDN0MsTUFBTWdZLEVBQWVYLEVBQWF0cEIsUUFBUWloQixHQUFlRSxFQUFBLEVBQU0rSSxJQUFJLEdBQUdqSixlQUF1QnJTLEtBQUksQ0FBQ3FTLEVBQVk5ZSxLQUM1RyxJQUFLb21CLEVBQXNCMkIsSUFBSWpKLEdBQWEsQ0FDMUMsTUFBTSxJQUFFdUcsR0FBUXJHLEVBQUEsRUFBTXJrQixJQUFJLEdBQUdta0IsYUFDbkIsSUFBTjllLEVBQ0ZvbUIsRUFBc0Jqc0IsSUFBSTJrQixFQUFZc0csRUFBWSxDQUNoRGhDLFdBQVlqZSxFQUFNaWUsV0FDbEJDLFVBQVdsZSxFQUFNa2UsVUFDakJ2RSxjQUNDdUcsSUFFSGUsRUFBc0Jqc0IsSUFBSTJrQixFQUFZc0csRUFBWSxDQUNoRGhDLFdBQVl0VCxFQUFlc1QsV0FDM0JDLFVBQVd2VCxFQUFldVQsVUFDMUJ2RSxjQUNDdUcsR0FFUCxDQUNBLE9BQU9lLEVBQXNCenJCLElBQUlta0IsRUFBVyxJQUU5QyxhQUFjOEcsUUFBUW9DLElBQUlGLElBQWU1RSxLQUFLLEtBQ2hELENFdUIwQitFLENBQ3BCZCxFQUNBaGlCLEVBQ0EwZSxFQUFjcUUsa0JBRVZDLEVEakRWLFNBQXlCbkwsRUFBTTdYLEVBQU9pakIsRUFBY0MsR0FDbERBLEVBQXFCQSxHQUFzQi9CLElBQTJCQSxFQUF5QixJQUFJN0UsR0FDbkcsTUFBTSxXQUFFSyxFQUFVLGFBQUVDLEVBQVksUUFBRUwsR0FBWTJHLEVBQzlDdkcsRUFBV3dHLFVBQVksVUFBVW5qQixFQUFNb2YsMkNBQTJDdkgsVUFDbEY4RSxFQUFXSSxhQUFhLFFBQVMscURBQzdCa0csSUFDRnJHLEVBQWF3RyxZQUFjSCxHQUU3QnpHLFNBQVM2RyxLQUFLcEcsWUFBWVYsR0FDMUIsTUFBTStHLEVBQWdCM0csRUFBVzRHLHdCQUNqQ2hILEVBQVF2bEIsU0FDUixNQUFNd3NCLEVBQW1CQyxFQUFBLEVBQWtCQyxZQUFZMWpCLEVBQU1rZSxXQUFXeUYsUUFDbEVDLEVBQWdDLEVBQWhCNWpCLEVBQU1oQyxRQUM1QixNQUFPLENBQ0xuSSxNQUFPeXRCLEVBQWN6dEIsTUFBUSt0QixFQUM3Qjl0QixPQUFRd3RCLEVBQWN4dEIsT0FBUzB0QixFQUFtQkksRUFFdEQsQ0NnQ3FCQyxDQUFnQmhNLEVBQU03WCxFQUFPMGlCLEVBQVNYLEdBQ2pEbHNCLEVBQVF1SSxLQUFLVyxLQUFLWCxLQUFLVyxLQUFLWCxLQUFLMGxCLElBQUksRUFBR2QsRUFBU250QixPQUF5QixFQUFoQm1LLEVBQU1oQyxTQUFlRixHQUMvRWhJLEVBQVNzSSxLQUFLVyxLQUFLWCxLQUFLVyxLQUFLWCxLQUFLMGxCLElBQUksRUFBR2QsRUFBU2x0QixRQUEwQixFQUFoQmtLLEVBQU1oQyxTQUFlRixHQUNqRitlLEVBQVFrRixFQUFhbEYsTUFFM0JBLEVBQU1obkIsTUFEZSxHQUNFLEVBQVJBLEdBQ2ZnbkIsRUFBTS9tQixPQUZlLEdBRUksRUFBVEEsR0FDaEIsTUFBTWl1QixFRTVEVixTQUFtQmxNLEVBQU03WCxFQUFPbEMsRUFBWTRrQixFQUFTWCxHQUNuRCxNQUFNLFdBQUVwRixFQUFVLGFBQUVDLEVBQVksUUFBRUwsR0FBWXdGLEVBQzlDcEYsRUFBV3dHLFVBQVksVUFBVW5qQixFQUFNb2YsMkNBQTJDdkgsVUFDbEY4RSxFQUFXSSxhQUFhLFFBQVMsb0JBQW9CamYsd0RBQ3JEOGUsRUFBYXdHLFlBQWNWLEVBQzNCLE1BQU0sTUFBRTdzQixFQUFLLE9BQUVDLEdBQVdpc0IsRUFBYWxGLE1BR3ZDLE9BRkFOLEVBQVFRLGFBQWEsUUFBU2xuQixFQUFNbXVCLFlBQ3BDekgsRUFBUVEsYUFBYSxTQUFVam5CLEVBQU9rdUIsYUFDL0IsSUFBSUMsZUFBZ0JDLGtCQUFrQjNILEVBQy9DLENGbURtQjRILENBQVV0TSxFQUFNN1gsRUFBT2xDLEVBQVk0a0IsRUFBU1gsU0c1RC9ELFNBQXNCbEYsRUFBT3FELEVBQUtrRSxHQUNoQyxPQUFPLElBQUkzRCxTQUFRVCxNQUFPVSxJQUNwQjBELFNBQ0ksSUFBSTNELFNBQVM0RCxHQUFhQyxXQUFXRCxFQUFVLE9BRXZEeEgsRUFBTTBILE9BQVMsS0FDYjdELEdBQVMsRUFFWDdELEVBQU0ySCxJQUFNLG1DQUFtQ0MsbUJBQW1CdkUsS0FDbEVyRCxFQUFNNkgsWUFBYyxXQUFXLEdBRW5DLENIa0RVQyxDQUFhOUgsRUFBT2tILEVJM0Q5QixXQUNFLE1BQU0sVUFBRWEsR0FBYyxJQUFXcHZCLE1BQU1xdkIsZUFDdkMsTUFBTyxpQ0FBaUNDLEtBQUtGLEVBQy9DLENKd0RzQ0csSUFBYy9DLEVBQWEvbkIsT0FBUyxHQUN0RSxJQUFJK3FCLEVBQVduSSxFQUNYOW5CLEtBQUt1c0IsZ0JBQ1AwRCxFSzlETixTQUFxQ25JLEVBQU8vZSxHQUMxQyxNQUFNbW5CLEVBQW1CQyxFQUFBLEVBQVdDLDJCQUNsQ3RJLEVBQU1obkIsTUFDTmduQixFQUFNL21CLE9BQ05nSSxJQUVJLFFBQUVxSCxHQUFZOGYsRUFJcEIsT0FIQTlmLEVBQVFpZ0IsVUFBVSxFQUFHLEVBQUd2SSxFQUFNaG5CLE1BQU9nbkIsRUFBTS9tQixRQUMzQ3FQLEVBQVFrZ0IsVUFBVXhJLEVBQU8sRUFBRyxHQUM1QnFJLEVBQUEsRUFBV0ksdUJBQXVCTCxHQUMzQkEsRUFBaUJNLE1BQzFCLENMbURpQkMsQ0FBNEIzSSxFQUFPL2UsSUFFaEQsTUFBTXlGLEdBQVUsRUFBQWtpQixFQUFBLEdBQ2RULEVBQ0FuSSxFQUFNaG5CLE1BWGEsRUFZbkJnbkIsRUFBTS9tQixPQVphLEVBYW5CZ0ksR0FNRixPQUpJL0ksS0FBS3VzQixlQUNQdnNCLEtBQUsyQyxVQUFVNkwsUUFBUW1pQixXQUFXbmlCLEVBQVExRixRQUU1QyxJQUFRMUMsT0FBTzRtQixHQUNSeGUsQ0FDVCxDQUNBLHVCQUFBb2UsQ0FBd0JELEdBQ3RCM3NCLEtBQUtzc0IsZ0JBQWdCSyxHQUFTSSxZQUNoQyxDQUNBLHNCQUFBcEcsQ0FBdUJnRyxHQUNyQixNQUFNaUUsRUFBZ0I1d0IsS0FBS3NzQixnQkFBZ0JLLEdBQ3RDaUUsSUFFTEEsRUFBYzdELGFBQ21CLElBQTdCNkQsRUFBYzdELGFBQ1o2RCxFQUFjcGlCLFFBQ2hCeE8sS0FBSzZ3QixTQUFTRCxHQUVkQSxFQUFjL0QsUUFBUUMsTUFBTXRlLElBQzFCb2lCLEVBQWNwaUIsUUFBVUEsRUFDeEJ4TyxLQUFLNndCLFNBQVNELEVBQWMsSUFDM0IvSixPQUFNLE1BQ1AsRUFBQWxkLEVBQUEsR0FBSywwQ0FBMEMsSUFHbkQzSixLQUFLc3NCLGdCQUFnQkssR0FBVyxNQUVwQyxDQUNBLFFBQUFrRSxDQUFTRCxHQUNQdG1CLEVBQUEsRUFBWWEsY0FBY3lsQixFQUFjcGlCLFNBQ3hDb2lCLEVBQWNwaUIsUUFBUTFGLE9BQU9tbkIsU0FBVyxLQUN4Q1csRUFBY3BpQixRQUFRMUYsT0FBT2dvQixlQUFpQixTQUNoRCxDQUNBLGlCQUFBQyxDQUFrQnBFLEdBQ2hCLE9BQU8zc0IsS0FBS3NzQixnQkFBZ0JLLEdBQVNJLFVBQ3ZDLENBQ0EsT0FBQXZyQixHQUNFeEIsS0FBS3NzQixnQkFBa0IsSUFDekIsRUFHRkQsRUFBZTVxQixVQUFZLENBQ3pCbUMsS0FBTSxDQUNKLEtBQWMrSyxZQUNkLEtBQWNDLGFBQ2QsS0FBY29pQixjQUVoQmh0QixLQUFNLFlBRVJxb0IsRUFBZTRFLG1CQUFxQixDQUNsQ3JNLFdBQVksUUFDWnVFLFVBQVcsU0FDWEQsV0FBWSxVTXhIZCxLQUFXaG5CLElBQUltcUIsR0FDZixLQUFXbnFCLElBQUkwakIsRSw2RENBZixNQUFNc0wsRUFDSixXQUFBeHVCLENBQVlyQixHQUNWckIsS0FBSzZsQixTQUEyQi9sQixPQUFPZ1EsT0FBTyxNQUM5QzlQLEtBQUsrUCx3QkFBMEIvUCxLQUFLZ1Esa0JBQWtCeEYsS0FBS3hLLE1BQzNEQSxLQUFLMkMsVUFBWXRCLEVBQ2pCckIsS0FBSzJDLFVBQVVtakIsUUFBUUMsaUJBQWlCN2pCLElBQUlsQyxLQUM5QyxDQUNBLGdCQUFBK2xCLEdBQ0UsSUFBSyxNQUFNamdCLEtBQUs5RixLQUFLNmxCLFNBQVUsQ0FDN0IsTUFBTUcsRUFBVWhtQixLQUFLNmxCLFNBQVMvZixHQUM5QixJQUFLa2dCLEVBQ0gsU0FDRixNQUFNbEQsRUFBT2tELEVBQVEzTSxnQkFBZ0I5USxXQUNqQ3VhLEVBQUttRCxrQkFDUG5ELEVBQUt2WixZQUFjdkosS0FBSzJDLFVBQVVvRyxXQUNsQytaLEVBQUtwRixlQUVULENBQ0YsQ0FDQSxrQkFBQXhOLENBQW1CNFMsR0FDakIsTUFBTWtELEVBQVVobUIsS0FBS21tQixZQUFZckQsR0FDM0JzRCxFQUFTdEQsRUFBS3VELFVBQ3BCLEdBQUlMLEVBQVFPLGFBQWVILEVBQVEsQ0FDakMsTUFBTSxNQUFFdGxCLEVBQUssT0FBRUMsR0FBV2YsS0FBSzJDLFVBQVV3dUIsV0FBV0MsZUFDbER0TyxFQUFLQSxLQUNMQSxFQUFLL1osV0FDTCtaLEVBQUtDLFFBRVAsT0FFc0UsSUFBcEUvaUIsS0FBSzJDLFVBQVV3dUIsV0FBV0osa0JBQWtCL0ssRUFBUU8sYUFBcUJ6bEIsSUFBVWtsQixFQUFReFgsUUFBUUYsUUFBUXhOLE9BQVNDLElBQVdpbEIsRUFBUXhYLFFBQVFGLFFBQVF2TixNQUszSixDQUNBLE9BQU8sQ0FDVCxDQUNBLGFBQUE0UCxDQUFjbVMsRUFBTS9mLEdBQ2xCLE1BQ01zVyxFQURVclosS0FBS21tQixZQUFZckQsR0FDRHpKLGdCQUM1QnlKLEVBQUtWLGdCQUNQcGlCLEtBQUt3bUIsWUFBWTFELEdBRW5COWlCLEtBQUsyQyxVQUFVSyxZQUFZQyxNQUFNb1AsV0FBV2dILEVBQWlCdFcsRUFDL0QsQ0FDQSxnQkFBQWdPLENBQWlCK1IsR0FDZixNQUNNekosRUFEVXJaLEtBQUttbUIsWUFBWXJELEdBQ0R6SixnQkFDNUJ5SixFQUFLVixnQkFDUHBpQixLQUFLd21CLFlBQVkxRCxHQUVuQnpKLEVBQWdCcEksU0FBU0MsY0FBY21JLEVBQ3pDLENBQ0EsaUJBQUFySixDQUFrQjhTLEdBQ2hCQSxFQUFLMVIsSUFBSSxZQUFhcFIsS0FBSytQLHlCQUMzQi9QLEtBQUt5bUIsdUJBQXVCM0QsRUFBS3hTLElBQ25DLENBQ0Esc0JBQUFtVyxDQUF1QjRLLEdBQ3JCLE1BQU1yTCxFQUFVaG1CLEtBQUs2bEIsU0FBU3dMLEdBQzlCcnhCLEtBQUsyQyxVQUFVd3VCLFdBQVd4Syx1QkFBdUJYLEVBQVFPLFlBQ3pELElBQVFuZ0IsT0FBTzRmLEVBQVEzTSxpQkFDdkJyWixLQUFLNmxCLFNBQVN3TCxHQUFXLElBQzNCLENBQ0EsV0FBQTdLLENBQVkxRCxHQUNWLE1BQU1zRCxFQUFTdEQsRUFBS3VELFVBQ2RMLEVBQVVobUIsS0FBS21tQixZQUFZckQsR0FDM0J6SixFQUFrQjJNLEVBQVEzTSxnQkFDNUIyTSxFQUFRTyxhQUFlSCxHQUN6QnBtQixLQUFLNG1CLGVBQWU5RCxHQUV0QkEsRUFBS1YsZ0JBQWlCLEVBQ3RCLE1BQU1uWixFQUFVNlosRUFBS0MsT0FBTzlaLFNBQzVCLEVBQUFnZSxFQUFBLEdBQWlCNU4sRUFBZ0JoVixPQUFReWUsRUFBS1ksUUFBU3JLLEVBQWdCN0ssUUFBU3ZGLEVBQ2xGLENBQ0EsY0FBQTJkLENBQWU5RCxHQUNiLE1BQU1rRCxFQUFVaG1CLEtBQUttbUIsWUFBWXJELEdBQzNCekosRUFBa0IyTSxFQUFRM00sZ0JBQzVCMk0sRUFBUXhYLFNBQ1Z4TyxLQUFLMkMsVUFBVXd1QixXQUFXeEssdUJBQXVCWCxFQUFRTyxZQUUzRFAsRUFBUXhYLFFBQVU2SyxFQUFnQjdLLFFBQVV4TyxLQUFLMkMsVUFBVXd1QixXQUFXaEssa0JBQWtCckUsR0FDeEZrRCxFQUFRTyxXQUFhekQsRUFBS3VELFVBQzFCaE4sRUFBZ0I3SyxRQUFVd1gsRUFBUXhYLE9BQ3BDLENBQ0EsV0FBQTJYLENBQVlyRCxHQUNWLE9BQU85aUIsS0FBSzZsQixTQUFTL0MsRUFBS3hTLE1BQVF0USxLQUFLMGtCLFlBQVk1QixFQUNyRCxDQUNBLFdBQUE0QixDQUFZNUIsR0FDVixNQUFNc0UsRUFBYyxDQUNsQjVZLFFBQVMsS0FDVCtYLFdBQVksS0FDWmxOLGdCQUFpQixJQUFRNVksSUFBSXljLEVBQUEsSUFVL0IsT0FSQWtLLEVBQVkvTixnQkFBZ0I5USxXQUFhdWEsRUFDekNzRSxFQUFZL04sZ0JBQWdCL0UsVUFBWXdPLEVBQUtsZCxlQUM3Q3doQixFQUFZL04sZ0JBQWdCaFYsT0FBUyxDQUFFbUIsS0FBTSxFQUFHRSxLQUFNLEVBQUdELEtBQU0sRUFBR0UsS0FBTSxHQUN4RXloQixFQUFZL04sZ0JBQWdCL0csWUFBY3RTLEtBQUsyQyxVQUFVbVAsYUFBZWdSLEVBQUtoUixhQUM3RTlSLEtBQUs2bEIsU0FBUy9DLEVBQUt4UyxLQUFPOFcsRUFDMUJ0RSxFQUFLdlosWUFBY3VaLEVBQUttRCxnQkFBa0JqbUIsS0FBSzJDLFVBQVVvRyxXQUFhK1osRUFBSy9aLFdBQzNFL0ksS0FBS3dtQixZQUFZMUQsR0FDakJBLEVBQUtwUSxHQUFHLFlBQWExUyxLQUFLK1AseUJBQ25CcVgsQ0FDVCxDQUNBLE9BQUE1bEIsR0FDRSxJQUFLLE1BQU1zRSxLQUFLOUYsS0FBSzZsQixTQUNuQjdsQixLQUFLeW1CLHVCQUF1QjNnQixHQUU5QjlGLEtBQUs2bEIsU0FBVyxLQUNoQjdsQixLQUFLMkMsVUFBWSxJQUNuQixFQUdGdXVCLEVBQWV6dkIsVUFBWSxDQUN6Qm1DLEtBQU0sQ0FDSixLQUFjQyxXQUNkLEtBQWNDLFlBQ2QsS0FBY0MsYUFFaEJDLEtBQU0sUSxzREMxSFIsU0FBU3N0QixFQUFTbGpCLEVBQU10TixFQUFPNEssR0FDN0IsSUFBSyxJQUFJRCxFQUFJLEVBQUdpUixFQUFRLEVBQUloUixFQUFJNUssRUFBTzJLLEVBQUkzSyxJQUFTMkssRUFBR2lSLEdBQVMsRUFDOUQsR0FBd0IsSUFBcEJ0TyxFQUFLc08sRUFBUSxHQUNmLE9BQU8sRUFFWCxPQUFPLENBQ1QsQ0FDQSxTQUFTNlUsRUFBWW5qQixFQUFNdE4sRUFBTzJLLEVBQUcrbEIsRUFBS0MsR0FDeEMsTUFBTTdxQixFQUFTLEVBQUk5RixFQUNuQixJQUFLLElBQUk0SyxFQUFJOGxCLEVBQUs5VSxFQUFROFUsRUFBTTVxQixFQUFTLEVBQUk2RSxFQUFHQyxHQUFLK2xCLElBQVUvbEIsRUFBR2dSLEdBQVM5VixFQUN6RSxHQUF3QixJQUFwQndILEVBQUtzTyxFQUFRLEdBQ2YsT0FBTyxFQUVYLE9BQU8sQ0FDVCxDLGdFQ0hBLE1BQU1nVixFQUNKLFdBQUFodkIsQ0FBWUMsR0FDVjNDLEtBQUtzc0IsZ0JBQWtCLENBQUMsRUFDeEJ0c0IsS0FBSzJDLFVBQVlBLENBQ25CLENBQ0EsY0FBQXl1QixDQUFldE8sRUFBTS9aLEVBQVlrQyxHQUMvQixNQUFNZ2pCLEVBQVdTLEVBQUEsRUFBa0JpRCxZQUFZN08sR0FBUSxJQUFLN1gsR0FDNUQsSUFBSW5LLEVBQVF1SSxLQUFLVyxLQUFLWCxLQUFLVyxLQUFLWCxLQUFLMGxCLElBQUksRUFBR2QsRUFBU250QixPQUF5QixFQUFoQm1LLEVBQU1oQyxTQUFlRixHQUMvRWhJLEVBQVNzSSxLQUFLVyxLQUFLWCxLQUFLVyxLQUFLWCxLQUFLMGxCLElBQUksRUFBR2QsRUFBU2x0QixRQUEwQixFQUFoQmtLLEVBQU1oQyxTQUFlRixHQUtyRixPQUpBakksRUFBUXVJLEtBQUtXLEtBQUtsSixFQUFRLE1BQzFCQyxFQUFTc0ksS0FBS1csS0FBS2pKLEVBQVMsTUFDNUJELEdBQVEsUUFBU0EsR0FDakJDLEdBQVMsUUFBU0EsR0FDWCxDQUFFRCxRQUFPQyxTQUNsQixDQUNBLFVBQUEwckIsQ0FBVzVzQixFQUFTa0osRUFBWWtDLEVBQU8ybUIsR0FDZCxpQkFBWi94QixLQUNULEVBQUE0VyxFQUFBLElBQVksUUFBUyxxRkFDckI1VyxFQUFVLENBQ1JpakIsS0FBTWpqQixFQUNOb0wsUUFDQWxDLGVBR0VsSixFQUFRb0wsaUJBQWlCMmUsRUFBQSxJQUM3Qi9wQixFQUFRb0wsTUFBUSxJQUFJMmUsRUFBQSxFQUFVL3BCLEVBQVFvTCxRQUV4QyxNQUFNLFFBQUV1RCxFQUFPLGlCQUFFMGhCLEdBQXFCbHdCLEtBQUs2eEIsdUJBQ3pDaHlCLEdBSUYsT0FGQUcsS0FBSzJDLFVBQVU2TCxRQUFRbWlCLFdBQVduaUIsRUFBUUYsU0FDMUM2aEIsRUFBQSxFQUFXSSx1QkFBdUJMLEdBQzNCMWhCLENBQ1QsQ0FDQSxzQkFBQXFqQixDQUF1Qmh5QixHQUNyQixNQUFNLEtBQUVpakIsRUFBSSxNQUFFN1gsR0FBVXBMLEVBQ2xCa0osRUFBYWxKLEVBQVFrSixZQUFjL0ksS0FBSzJDLFVBQVVvRyxXQUNsRGtsQixFQUFXUyxFQUFBLEVBQWtCaUQsWUFBWTdPLEdBQVEsSUFBSzdYLEdBQ3REbkssRUFBUXVJLEtBQUtXLEtBQUtYLEtBQUtXLEtBQUtYLEtBQUswbEIsSUFBSSxFQUFHZCxFQUFTbnRCLE9BQXlCLEVBQWhCbUssRUFBTWhDLFNBQWVGLEdBQy9FaEksRUFBU3NJLEtBQUtXLEtBQUtYLEtBQUtXLEtBQUtYLEtBQUswbEIsSUFBSSxFQUFHZCxFQUFTbHRCLFFBQTBCLEVBQWhCa0ssRUFBTWhDLFNBQWVGLEdBQ2pGbW5CLEVBQW1CQyxFQUFBLEVBQVdDLDJCQUEyQnR2QixFQUFPQyxJQUNoRSxPQUFFeXZCLEdBQVdOLEVBQ25CbHdCLEtBQUs4eEIsbUJBQW1CaFAsRUFBTTdYLEVBQU9sQyxFQUFZbW5CLEdBQ2pELE1BQU0xaEIsR0FBVSxFQUFBa2lCLEVBQUEsR0FBd0JGLEVBQVExdkIsRUFBT0MsRUFBUWdJLEdBQy9ELEdBQUlrQyxFQUFNd2lCLEtBQU0sQ0FDZCxNQUFNc0UsRUR6Q1osU0FBOEJ2QixFQUFRem5CLEVBQWEsR0FDakQsTUFBTSxNQUFFakksRUFBSyxPQUFFQyxHQUFXeXZCLEVBQ3BCcGdCLEVBQVVvZ0IsRUFBT3dCLFdBQVcsS0FBTSxDQUN0Q0Msb0JBQW9CLElBRXRCLEdBQWdCLE9BQVo3aEIsRUFDRixNQUFNLElBQUk4aEIsVUFBVSxtQ0FFdEIsTUFDTTlqQixFQURZZ0MsRUFBUStoQixhQUFhLEVBQUcsRUFBR3J4QixFQUFPQyxHQUM3QnFOLEtBQ3ZCLElBQUlna0IsRUFBTyxFQUNQWixFQUFNLEVBQ05hLEVBQVF2eEIsRUFBUSxFQUNoQjJ3QixFQUFTMXdCLEVBQVMsRUFDdEIsS0FBT3l3QixFQUFNendCLEdBQVV1d0IsRUFBU2xqQixFQUFNdE4sRUFBTzB3QixNQUN6Q0EsRUFDSixHQUFJQSxJQUFRendCLEVBQ1YsT0FBT3V4QixFQUFBLEVBQVUzbkIsTUFDbkIsS0FBTzJtQixFQUFTbGpCLEVBQU10TixFQUFPMndCLE1BQ3pCQSxFQUNKLEtBQU9GLEVBQVluakIsRUFBTXROLEVBQU9zeEIsRUFBTVosRUFBS0MsTUFDdkNXLEVBQ0osS0FBT2IsRUFBWW5qQixFQUFNdE4sRUFBT3V4QixFQUFPYixFQUFLQyxNQUN4Q1ksRUFHSixRQUZFQSxJQUNBWixFQUNLLElBQUlhLEVBQUEsRUFBVUYsRUFBT3JwQixFQUFZeW9CLEVBQU16b0IsR0FBYXNwQixFQUFRRCxHQUFRcnBCLEdBQWEwb0IsRUFBU0QsR0FBT3pvQixFQUMxRyxDQ2NzQndwQixDQUFxQi9CLEVBQVF6bkIsR0FDN0N5RixFQUFRMUIsTUFBTTBQLFNBQVN1VixHQUN2QnZqQixFQUFROEosV0FDVixDQUNBLE1BQU8sQ0FBRTlKLFVBQVMwaEIsbUJBQ3BCLENBQ0EsaUJBQUEvSSxDQUFrQnJFLEdBQ2hCQSxFQUFLdlosWUFBY3VaLEVBQUttRCxnQkFBa0JqbUIsS0FBSzJDLFVBQVVvRyxXQUFhK1osRUFBSy9aLFdBQzNFLE1BQU00akIsRUFBVTdKLEVBQUt1RCxVQUNyQixHQUFJcm1CLEtBQUtzc0IsZ0JBQWdCSyxHQUV2QixPQURBM3NCLEtBQUs0c0Isd0JBQXdCRCxHQUN0QjNzQixLQUFLc3NCLGdCQUFnQkssR0FBU25lLFFBRXZDLE1BQU0sUUFBRUEsRUFBTyxpQkFBRTBoQixHQUFxQmx3QixLQUFLNnhCLHVCQUF1Qi9PLEdBTWxFLE9BTEE5aUIsS0FBS3NzQixnQkFBZ0JLLEdBQVcsQ0FDOUJ1RCxtQkFDQTFoQixVQUNBdWUsV0FBWSxHQUVQdmUsQ0FDVCxDQUNBLHVCQUFBb2UsQ0FBd0JELEdBQ3RCM3NCLEtBQUtzc0IsZ0JBQWdCSyxHQUFTSSxZQUNoQyxDQUNBLHNCQUFBcEcsQ0FBdUJnRyxHQUNyQixNQUFNaUUsRUFBZ0I1d0IsS0FBS3NzQixnQkFBZ0JLLEdBRTNDLEdBREFpRSxFQUFjN0QsYUFDbUIsSUFBN0I2RCxFQUFjN0QsV0FBa0IsQ0FDbENvRCxFQUFBLEVBQVdJLHVCQUF1QkssRUFBY1Ysa0JBQ2hENWxCLEVBQUEsRUFBWWEsY0FBY3lsQixFQUFjcGlCLFNBQ3hDLE1BQU0xRixFQUFTOG5CLEVBQWNwaUIsUUFBUTFGLE9BQ3JDQSxFQUFPbW5CLFNBQVcsS0FDbEJubkIsRUFBT2dvQixlQUFpQixVQUN4QmhvQixFQUFPMHBCLFVBQVksdUJBQ25CeHlCLEtBQUtzc0IsZ0JBQWdCSyxHQUFXLElBQ2xDLENBQ0YsQ0FDQSxpQkFBQW9FLENBQWtCcEUsR0FDaEIsT0FBTzNzQixLQUFLc3NCLGdCQUFnQkssR0FBU0ksVUFDdkMsQ0FZQSxrQkFBQStFLENBQW1CaFAsRUFBTTdYLEVBQU9sQyxFQUFZbW5CLEdBQzFDLE1BQU0sT0FBRU0sRUFBTSxRQUFFcGdCLEdBQVk4ZixFQUN0QnVDLEdBQU8sRUFBQUMsRUFBQSxHQUF3QnpuQixHQUMvQmdqQixFQUFXUyxFQUFBLEVBQWtCaUQsWUFBWTdPLEdBQVEsSUFBSzdYLEdBQ3REK1ksRUFBUWlLLEVBQVNqSyxNQUNqQlMsRUFBYXdKLEVBQVN4SixXQUN0QmtPLEVBQWExRSxFQUFTMEUsV0FDdEJDLEVBQWUzRSxFQUFTMkUsYUFDeEJDLEVBQWlCNUUsRUFBUzRFLGVBQzFCOXhCLEVBQVN5dkIsRUFBT3p2QixPQUN0QnFQLEVBQVE2UCxpQkFDUjdQLEVBQVF0RyxNQUFNZixFQUFZQSxHQUMxQixNQUFNRSxFQUEwQixFQUFoQmdDLEVBQU1oQyxRQUV0QixHQURBbUgsRUFBUWlnQixVQUFVLEVBQUcsRUFBR3BDLEVBQVNudEIsTUFBUSxFQUFJbUksRUFBU2dsQixFQUFTbHRCLE9BQVMsRUFBSWtJLEdBQ3hFZ0MsRUFBTXdZLFNBQVMzaUIsTUFBTyxDQUN4QixNQUFNeWYsRUFBY3RWLEVBQU13WSxRQUMxQnJULEVBQVEwaUIsVUFBWXZTLEVBQVl6ZixNQUNoQ3NQLEVBQVEyaUIsV0FBYXhTLEVBQVl3UyxXQUNqQzNpQixFQUFRNGlCLFNBQVd6UyxFQUFZeUksS0FDL0I1WSxFQUFRNmlCLFFBQVUxUyxFQUFZMlMsR0FDaEMsQ0FFQSxJQUFJQyxFQUNBQyxFQUZKaGpCLEVBQVFxaUIsS0FBT0EsRUFHZixNQUFNWSxFQUFjcG9CLEVBQU15ZSxXQUFhLEVBQUksRUFDM0MsSUFBSyxJQUFJNWpCLEVBQUksRUFBR0EsRUFBSXV0QixJQUFldnRCLEVBQUcsQ0FDcEMsTUFBTXd0QixFQUFlcm9CLEVBQU15ZSxZQUFvQixJQUFONWpCLEVBQ25DeXRCLEVBQWVELEVBQWVqcUIsS0FBS1csS0FBS1gsS0FBSzBsQixJQUFJLEVBQUdodUIsR0FBMEIsRUFBaEJrSyxFQUFNaEMsU0FBZSxFQUNuRnVxQixFQUFpQkQsRUFBZXhxQixFQUN0QyxHQUFJdXFCLEVBQWMsQ0FDaEJsakIsRUFBUWtRLFVBQVksUUFDcEJsUSxFQUFRbVEsWUFBYyxRQUN0QixNQUFNa1QsRUFBZ0J4b0IsRUFBTXllLFdBQ3RCZ0ssRUFBa0JELEVBQWNqZSxNQUNoQ21lLEVBQWtCRixFQUFjamtCLE1BQ3RDWSxFQUFRd2pCLFlBQWN2TCxFQUFBLEVBQU05bEIsT0FBTytsQixTQUFTb0wsR0FBaUJuTCxTQUFTb0wsR0FBaUJFLGVBQ3ZGLE1BQU1DLEVBQWlCTCxFQUFjNUssS0FBTzlmLEVBQ3RDZ3JCLEVBQXFCTixFQUFjbE8sU0FBV3hjLEVBQ3BEcUgsRUFBUTRqQixXQUFhRixFQUNyQjFqQixFQUFRNmpCLGNBQWdCNXFCLEtBQUtxZixJQUFJK0ssRUFBYzlLLE9BQVNvTCxFQUN4RDNqQixFQUFROGpCLGNBQWdCN3FCLEtBQUt1ZixJQUFJNkssRUFBYzlLLE9BQVNvTCxFQUFxQlAsQ0FDL0UsTUFDRXBqQixFQUFRK2pCLFlBQWNscEIsRUFBTThZLE9BQU92VSxPQUFTLEVBQzVDWSxFQUFRa1EsVUFBWXJWLEVBQU04WSxPQUFRLEVBQUFxUSxFQUFBLEdBQW1CbnBCLEVBQU04WSxNQUFPM1QsR0FBVyxLQUN6RW5GLEVBQU13WSxTQUFTM2lCLFFBQ2pCc1AsRUFBUW1RLGFBQWMsRUFBQTZULEVBQUEsR0FBbUJucEIsRUFBTXdZLFFBQVNyVCxJQUUxREEsRUFBUXdqQixZQUFjLFFBRXhCLElBQUlTLEdBQXNCNVAsRUFBYW9PLEVBQWV2TixVQUFZLEVBQzlEYixFQUFhb08sRUFBZXZOLFNBQVcsSUFDekMrTyxFQUFxQixHQUV2QixNQUFNQyxFQUFjcnBCLEVBQU13WSxTQUFTM2lCLE9BQVMsRUFDNUMsSUFBSyxJQUFJeXpCLEVBQUssRUFBR0EsRUFBS3ZRLEVBQU05ZSxPQUFRcXZCLElBQ2xDcEIsRUFBZ0JtQixFQUFjLEVBQzlCbEIsRUFBZ0JrQixFQUFjLEVBQUlDLEVBQUs5UCxFQUFhb08sRUFBZTJCLE9BQVNILEVBQ3hELFVBQWhCcHBCLEVBQU1xZSxNQUNSNkosR0FBaUJQLEVBQWVELEVBQVc0QixHQUNsQixXQUFoQnRwQixFQUFNcWUsUUFDZjZKLElBQWtCUCxFQUFlRCxFQUFXNEIsSUFBTyxHQUVqRHRwQixFQUFNd1ksU0FBUzNpQixPQUNqQmQsS0FBS3kwQixtQkFDSHpRLEVBQU11USxHQUNOdHBCLEVBQ0FpbEIsRUFDQWlELEVBQWdCbG9CLEVBQU1oQyxRQUN0Qm1xQixFQUFnQm5vQixFQUFNaEMsUUFBVXNxQixHQUNoQyxRQUdnQixJQUFoQnRvQixFQUFNOFksT0FDUi9qQixLQUFLeTBCLG1CQUNIelEsRUFBTXVRLEdBQ050cEIsRUFDQWlsQixFQUNBaUQsRUFBZ0Jsb0IsRUFBTWhDLFFBQ3RCbXFCLEVBQWdCbm9CLEVBQU1oQyxRQUFVc3FCLEVBSXhDLENBQ0YsQ0FXQSxrQkFBQWtCLENBQW1CM1IsRUFBTTdYLEVBQU9pbEIsRUFBa0J6a0IsRUFBR0MsRUFBR2dwQixHQUFXLEdBQ2pFLE1BQU0sUUFBRXRrQixHQUFZOGYsRUFDZDdHLEVBQWdCcGUsRUFBTW9lLGNBQzVCLElBQUlzTCxHQUErQixFQVduQyxHQVZJakcsRUFBQSxFQUFrQmtHLHFDQUNoQmxHLEVBQUEsRUFBa0JtRywyQkFDcEJ6a0IsRUFBUWlaLGNBQWdCLEdBQUdBLE1BQzNCalosRUFBUTBrQixrQkFBb0IsR0FBR3pMLE1BQy9Cc0wsR0FBK0IsSUFFL0J2a0IsRUFBUWlaLGNBQWdCLE1BQ3hCalosRUFBUTBrQixrQkFBb0IsUUFHVixJQUFsQnpMLEdBQXVCc0wsRUFNekIsWUFMSUQsRUFDRnRrQixFQUFRMmtCLFdBQVdqUyxFQUFNclgsRUFBR0MsR0FFNUIwRSxFQUFRNGtCLFNBQVNsUyxFQUFNclgsRUFBR0MsSUFJOUIsSUFBSXVwQixFQUFrQnhwQixFQUN0QixNQUFNeXBCLEVBQWN4RyxFQUFBLEVBQWtCeUcsa0JBQWtCclMsR0FDeEQsSUFBSXNTLEVBQWdCaGxCLEVBQVF1aEIsWUFBWTdPLEdBQU1oaUIsTUFDMUN1MEIsRUFBZSxFQUNuQixJQUFLLElBQUl2dkIsRUFBSSxFQUFHQSxFQUFJb3ZCLEVBQVlod0IsU0FBVVksRUFBRyxDQUMzQyxNQUFNd3ZCLEVBQWNKLEVBQVlwdkIsR0FDNUI0dUIsRUFDRnRrQixFQUFRMmtCLFdBQVdPLEVBQWFMLEVBQWlCdnBCLEdBRWpEMEUsRUFBUTRrQixTQUFTTSxFQUFhTCxFQUFpQnZwQixHQUVqRCxJQUFJNnBCLEVBQVUsR0FDZCxJQUFLLElBQUlyUixFQUFJcGUsRUFBSSxFQUFHb2UsRUFBSWdSLEVBQVlod0IsU0FBVWdmLEVBQzVDcVIsR0FBV0wsRUFBWWhSLEdBRXpCbVIsRUFBZWpsQixFQUFRdWhCLFlBQVk0RCxHQUFTejBCLE1BQzVDbTBCLEdBQW1CRyxFQUFnQkMsRUFBZWhNLEVBQ2xEK0wsRUFBZ0JDLENBQ2xCLENBQ0YsQ0FDQSxPQUFBN3pCLEdBQ0V4QixLQUFLc3NCLGdCQUFrQixJQUN6QixFQUdGb0YsRUFBaUJqd0IsVUFBWSxDQUMzQm1DLEtBQU0sQ0FDSixLQUFjK0ssWUFDZCxLQUFjQyxhQUNkLEtBQWNvaUIsY0FFaEJodEIsS0FBTSxjQzVQUixLQUFXOUIsSUFBSXd2QixHQUNmLEtBQVd4dkIsSUFBSWd2QixFLGdEQ0ZmLE1BQU1zRSxFQUFhLEksUUFBSSxHQUN2QixTQUFTOUUsRUFBd0I1SSxFQUFPaG5CLEVBQU9DLEVBQVFnSSxHQUNyRCxNQUFNMUUsRUFBU214QixFQUNmbnhCLEVBQU9tQixLQUFPLEVBQ2RuQixFQUFPb0IsS0FBTyxFQUNkcEIsRUFBT3FCLEtBQU9vaUIsRUFBTWhuQixNQUFRaUksRUFBYSxFQUN6QzFFLEVBQU9zQixLQUFPbWlCLEVBQU0vbUIsT0FBU2dJLEVBQWEsRUFDMUMsTUFBTXlGLEVBQVUsSUFBWWpFLGtCQUMxQmxHLEVBQU92RCxNQUNQdUQsRUFBT3RELE9BQ1BnSSxHQUNBLEdBU0YsT0FQQXlGLEVBQVExRixPQUFPZ29CLGVBQWlCLFFBQ2hDdGlCLEVBQVExRixPQUFPbW5CLFNBQVduSSxFQUMxQnRaLEVBQVExRixPQUFPMHBCLFVBQVksOEJBQzNCaGtCLEVBQVExQixNQUFNaE0sTUFBUUEsRUFBUWlJLEVBQzlCeUYsRUFBUTFCLE1BQU0vTCxPQUFTQSxFQUFTZ0ksRUFDaEN5RixFQUFRMUYsT0FBTzJzQixLQUFLLFNBQVVqbkIsRUFBUTFGLFFBQ3RDMEYsRUFBUThKLFlBQ0Q5SixDQUNULEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvYXBwL1Jlc2l6ZVBsdWdpbi5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL2FwcC9UaWNrZXJQbHVnaW4ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9hcHAvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL2ZpbHRlcnMvRmlsdGVyUGlwZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2NvbnRhaW5lci9ib3VuZHMvZ2V0RmFzdEdsb2JhbEJvdW5kcy5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL2ZpbHRlcnMvRmlsdGVyU3lzdGVtLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvY29udGFpbmVyL2JvdW5kcy9nZXRSZW5kZXJhYmxlQm91bmRzLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvZmlsdGVycy9pbml0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2dyYXBoaWNzL2dwdS9jb2xvclRvVW5pZm9ybS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2dyYXBoaWNzL3NoYXJlZC9HcmFwaGljc1BpcGUubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9ncmFwaGljcy9pbml0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC9zaGFyZWQvTWVzaFBpcGUubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9tZXNoL2luaXQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9tZXNoL3NoYXJlZC9CYXRjaGFibGVNZXNoLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC9zaGFyZWQvTWVzaEdlb21ldHJ5Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC1wbGFuZS9QbGFuZUdlb21ldHJ5Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLW5pbmUtc2xpY2UvTmluZVNsaWNlR2VvbWV0cnkubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtbmluZS1zbGljZS9OaW5lU2xpY2VTcHJpdGVQaXBlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLW5pbmUtc2xpY2UvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvc2hhZGVyL3RpbGluZ0JpdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvc2hhZGVyL1RpbGluZ1Nwcml0ZVNoYWRlci5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvdXRpbHMvUXVhZEdlb21ldHJ5Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLXRpbGluZy9UaWxpbmdTcHJpdGVQaXBlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLXRpbGluZy91dGlscy9zZXRVdnMubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtdGlsaW5nL3V0aWxzL2FwcGx5TWF0cml4Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLXRpbGluZy91dGlscy9zZXRQb3NpdGlvbnMubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtdGlsaW5nL2luaXQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUvQmF0Y2hhYmxlU3ByaXRlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvZ3JhcGhpY3Mvc2hhcmVkL0dyYXBoaWNzLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC9zZGZTaGFkZXIvc2hhZGVyLWJpdHMvbG9jYWxVbmlmb3JtTVNERkJpdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvc2RmU2hhZGVyL3NoYWRlci1iaXRzL21TREZCaXQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0L3NkZlNoYWRlci9TZGZTaGFkZXIubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWJpdG1hcC9CaXRtYXBUZXh0UGlwZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtYml0bWFwL2luaXQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvSFRNTFRleHRQaXBlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL0hUTUxUZXh0UmVuZGVyRGF0YS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy90ZXh0U3R5bGVUb0NTUy5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC9IdG1sVGV4dFN0eWxlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL3V0aWxzL2xvYWRGb250Q1NTLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL3V0aWxzL2xvYWRGb250QXNCYXNlNjQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvdXRpbHMvZ2V0Rm9udENzcy5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9tZWFzdXJlSHRtbFRleHQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvSFRNTFRleHRTeXN0ZW0ubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvdXRpbHMvZXh0cmFjdEZvbnRGYW1pbGllcy5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9nZXRTVkdVcmwubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvdXRpbHMvbG9hZFNWR0ltYWdlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvdXRpbHMvYnJvd3Nlci9pc1NhZmFyaS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9nZXRUZW1wb3JhcnlDYW52YXNGcm9tSW1hZ2UubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvY2FudmFzL0NhbnZhc1RleHRQaXBlLm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvdXRpbHMvY2FudmFzL2dldENhbnZhc0JvdW5kaW5nQm94Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC9jYW52YXMvQ2FudmFzVGV4dFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvdXRpbHMvZ2V0UG8yVGV4dHVyZUZyb21Tb3VyY2UubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBSZXNpemVQbHVnaW4ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgcGx1Z2luIHdpdGggc2NvcGUgb2YgYXBwbGljYXRpb24gaW5zdGFuY2VcbiAgICogQHN0YXRpY1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gU2VlIGFwcGxpY2F0aW9uIG9wdGlvbnNcbiAgICovXG4gIHN0YXRpYyBpbml0KG9wdGlvbnMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICB0aGlzLFxuICAgICAgXCJyZXNpemVUb1wiLFxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSFRNTCBlbGVtZW50IG9yIHdpbmRvdyB0byBhdXRvbWF0aWNhbGx5IHJlc2l6ZSB0aGVcbiAgICAgICAqIHJlbmRlcmVyJ3MgdmlldyBlbGVtZW50IHRvIG1hdGNoIHdpZHRoIGFuZCBoZWlnaHQuXG4gICAgICAgKiBAbWVtYmVyIHtXaW5kb3d8SFRNTEVsZW1lbnR9XG4gICAgICAgKiBAbmFtZSByZXNpemVUb1xuICAgICAgICogQG1lbWJlcm9mIGFwcC5BcHBsaWNhdGlvbiNcbiAgICAgICAqL1xuICAgICAge1xuICAgICAgICBzZXQoZG9tKSB7XG4gICAgICAgICAgZ2xvYmFsVGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMucXVldWVSZXNpemUpO1xuICAgICAgICAgIHRoaXMuX3Jlc2l6ZVRvID0gZG9tO1xuICAgICAgICAgIGlmIChkb20pIHtcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnF1ZXVlUmVzaXplKTtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2l6ZVRvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLnF1ZXVlUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLl9yZXNpemVUbykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9jYW5jZWxSZXNpemUoKTtcbiAgICAgIHRoaXMuX3Jlc2l6ZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMucmVzaXplKCkpO1xuICAgIH07XG4gICAgdGhpcy5fY2FuY2VsUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX3Jlc2l6ZUlkKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3Jlc2l6ZUlkKTtcbiAgICAgICAgdGhpcy5fcmVzaXplSWQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5yZXNpemUgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX3Jlc2l6ZVRvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhbmNlbFJlc2l6ZSgpO1xuICAgICAgbGV0IHdpZHRoO1xuICAgICAgbGV0IGhlaWdodDtcbiAgICAgIGlmICh0aGlzLl9yZXNpemVUbyA9PT0gZ2xvYmFsVGhpcy53aW5kb3cpIHtcbiAgICAgICAgd2lkdGggPSBnbG9iYWxUaGlzLmlubmVyV2lkdGg7XG4gICAgICAgIGhlaWdodCA9IGdsb2JhbFRoaXMuaW5uZXJIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IGNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQgfSA9IHRoaXMuX3Jlc2l6ZVRvO1xuICAgICAgICB3aWR0aCA9IGNsaWVudFdpZHRoO1xuICAgICAgICBoZWlnaHQgPSBjbGllbnRIZWlnaHQ7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfTtcbiAgICB0aGlzLl9yZXNpemVJZCA9IG51bGw7XG4gICAgdGhpcy5fcmVzaXplVG8gPSBudWxsO1xuICAgIHRoaXMucmVzaXplVG8gPSBvcHRpb25zLnJlc2l6ZVRvIHx8IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFuIHVwIHRoZSB0aWNrZXIsIHNjb3BlZCB0byBhcHBsaWNhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgZGVzdHJveSgpIHtcbiAgICBnbG9iYWxUaGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5xdWV1ZVJlc2l6ZSk7XG4gICAgdGhpcy5fY2FuY2VsUmVzaXplKCk7XG4gICAgdGhpcy5fY2FuY2VsUmVzaXplID0gbnVsbDtcbiAgICB0aGlzLnF1ZXVlUmVzaXplID0gbnVsbDtcbiAgICB0aGlzLnJlc2l6ZVRvID0gbnVsbDtcbiAgICB0aGlzLnJlc2l6ZSA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5SZXNpemVQbHVnaW4uZXh0ZW5zaW9uID0gRXh0ZW5zaW9uVHlwZS5BcHBsaWNhdGlvbjtcblxuZXhwb3J0IHsgUmVzaXplUGx1Z2luIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXNpemVQbHVnaW4ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgVVBEQVRFX1BSSU9SSVRZIH0gZnJvbSAnLi4vdGlja2VyL2NvbnN0Lm1qcyc7XG5pbXBvcnQgeyBUaWNrZXIgfSBmcm9tICcuLi90aWNrZXIvVGlja2VyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgVGlja2VyUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIHBsdWdpbiB3aXRoIHNjb3BlIG9mIGFwcGxpY2F0aW9uIGluc3RhbmNlXG4gICAqIEBzdGF0aWNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIFNlZSBhcHBsaWNhdGlvbiBvcHRpb25zXG4gICAqL1xuICBzdGF0aWMgaW5pdChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgYXV0b1N0YXJ0OiB0cnVlLFxuICAgICAgc2hhcmVkVGlja2VyOiBmYWxzZVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHRoaXMsXG4gICAgICBcInRpY2tlclwiLFxuICAgICAge1xuICAgICAgICBzZXQodGlja2VyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3RpY2tlcikge1xuICAgICAgICAgICAgdGhpcy5fdGlja2VyLnJlbW92ZSh0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3RpY2tlciA9IHRpY2tlcjtcbiAgICAgICAgICBpZiAodGlja2VyKSB7XG4gICAgICAgICAgICB0aWNrZXIuYWRkKHRoaXMucmVuZGVyLCB0aGlzLCBVUERBVEVfUFJJT1JJVFkuTE9XKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fdGlja2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLnN0b3AgPSAoKSA9PiB7XG4gICAgICB0aGlzLl90aWNrZXIuc3RvcCgpO1xuICAgIH07XG4gICAgdGhpcy5zdGFydCA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3RpY2tlci5zdGFydCgpO1xuICAgIH07XG4gICAgdGhpcy5fdGlja2VyID0gbnVsbDtcbiAgICB0aGlzLnRpY2tlciA9IG9wdGlvbnMuc2hhcmVkVGlja2VyID8gVGlja2VyLnNoYXJlZCA6IG5ldyBUaWNrZXIoKTtcbiAgICBpZiAob3B0aW9ucy5hdXRvU3RhcnQpIHtcbiAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENsZWFuIHVwIHRoZSB0aWNrZXIsIHNjb3BlZCB0byBhcHBsaWNhdGlvbi5cbiAgICogQHN0YXRpY1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3RpY2tlcikge1xuICAgICAgY29uc3Qgb2xkVGlja2VyID0gdGhpcy5fdGlja2VyO1xuICAgICAgdGhpcy50aWNrZXIgPSBudWxsO1xuICAgICAgb2xkVGlja2VyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5UaWNrZXJQbHVnaW4uZXh0ZW5zaW9uID0gRXh0ZW5zaW9uVHlwZS5BcHBsaWNhdGlvbjtcblxuZXhwb3J0IHsgVGlja2VyUGx1Z2luIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaWNrZXJQbHVnaW4ubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgUmVzaXplUGx1Z2luIH0gZnJvbSAnLi9SZXNpemVQbHVnaW4ubWpzJztcbmltcG9ydCB7IFRpY2tlclBsdWdpbiB9IGZyb20gJy4vVGlja2VyUGx1Z2luLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZXh0ZW5zaW9ucy5hZGQoUmVzaXplUGx1Z2luKTtcbmV4dGVuc2lvbnMuYWRkKFRpY2tlclBsdWdpbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0Lm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBGaWx0ZXJQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIHB1c2goZmlsdGVyRWZmZWN0LCBjb250YWluZXIsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgcmVuZGVyUGlwZXMgPSB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcztcbiAgICByZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKHtcbiAgICAgIHJlbmRlclBpcGVJZDogXCJmaWx0ZXJcIixcbiAgICAgIGNhbkJ1bmRsZTogZmFsc2UsXG4gICAgICBhY3Rpb246IFwicHVzaEZpbHRlclwiLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgZmlsdGVyRWZmZWN0XG4gICAgfSk7XG4gIH1cbiAgcG9wKF9maWx0ZXJFZmZlY3QsIF9jb250YWluZXIsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGluc3RydWN0aW9uU2V0LmFkZCh7XG4gICAgICByZW5kZXJQaXBlSWQ6IFwiZmlsdGVyXCIsXG4gICAgICBhY3Rpb246IFwicG9wRmlsdGVyXCIsXG4gICAgICBjYW5CdW5kbGU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgZXhlY3V0ZShpbnN0cnVjdGlvbikge1xuICAgIGlmIChpbnN0cnVjdGlvbi5hY3Rpb24gPT09IFwicHVzaEZpbHRlclwiKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5maWx0ZXIucHVzaChpbnN0cnVjdGlvbik7XG4gICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbi5hY3Rpb24gPT09IFwicG9wRmlsdGVyXCIpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmZpbHRlci5wb3AoKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbkZpbHRlclBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcImZpbHRlclwiXG59O1xuXG5leHBvcnQgeyBGaWx0ZXJQaXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWx0ZXJQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGJvdW5kc1Bvb2wgfSBmcm9tICcuL3V0aWxzL21hdHJpeEFuZEJvdW5kc1Bvb2wubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0ZW1wTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuZnVuY3Rpb24gZ2V0RmFzdEdsb2JhbEJvdW5kcyh0YXJnZXQsIGJvdW5kcykge1xuICBib3VuZHMuY2xlYXIoKTtcbiAgX2dldEdsb2JhbEJvdW5kc1JlY3Vyc2l2ZSh0YXJnZXQsIGJvdW5kcyk7XG4gIGlmICghYm91bmRzLmlzVmFsaWQpIHtcbiAgICBib3VuZHMuc2V0KDAsIDAsIDAsIDApO1xuICB9XG4gIGlmICghdGFyZ2V0LnJlbmRlckdyb3VwKSB7XG4gICAgYm91bmRzLmFwcGx5TWF0cml4KHRhcmdldC5wYXJlbnRSZW5kZXJHcm91cC53b3JsZFRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgYm91bmRzLmFwcGx5TWF0cml4KHRhcmdldC5yZW5kZXJHcm91cC5sb2NhbFRyYW5zZm9ybSk7XG4gIH1cbiAgcmV0dXJuIGJvdW5kcztcbn1cbmZ1bmN0aW9uIF9nZXRHbG9iYWxCb3VuZHNSZWN1cnNpdmUodGFyZ2V0LCBib3VuZHMpIHtcbiAgaWYgKHRhcmdldC5sb2NhbERpc3BsYXlTdGF0dXMgIT09IDcgfHwgIXRhcmdldC5tZWFzdXJhYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG1hbmFnZUVmZmVjdHMgPSAhIXRhcmdldC5lZmZlY3RzLmxlbmd0aDtcbiAgbGV0IGxvY2FsQm91bmRzID0gYm91bmRzO1xuICBpZiAodGFyZ2V0LnJlbmRlckdyb3VwIHx8IG1hbmFnZUVmZmVjdHMpIHtcbiAgICBsb2NhbEJvdW5kcyA9IGJvdW5kc1Bvb2wuZ2V0KCkuY2xlYXIoKTtcbiAgfVxuICBpZiAodGFyZ2V0LmJvdW5kc0FyZWEpIHtcbiAgICBib3VuZHMuYWRkUmVjdCh0YXJnZXQuYm91bmRzQXJlYSwgdGFyZ2V0LndvcmxkVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGFyZ2V0LnJlbmRlclBpcGVJZCkge1xuICAgICAgY29uc3Qgdmlld0JvdW5kcyA9IHRhcmdldC5ib3VuZHM7XG4gICAgICBsb2NhbEJvdW5kcy5hZGRGcmFtZShcbiAgICAgICAgdmlld0JvdW5kcy5taW5YLFxuICAgICAgICB2aWV3Qm91bmRzLm1pblksXG4gICAgICAgIHZpZXdCb3VuZHMubWF4WCxcbiAgICAgICAgdmlld0JvdW5kcy5tYXhZLFxuICAgICAgICB0YXJnZXQuZ3JvdXBUcmFuc2Zvcm1cbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGNoaWxkcmVuID0gdGFyZ2V0LmNoaWxkcmVuO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIF9nZXRHbG9iYWxCb3VuZHNSZWN1cnNpdmUoY2hpbGRyZW5baV0sIGxvY2FsQm91bmRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hbmFnZUVmZmVjdHMpIHtcbiAgICBsZXQgYWR2YW5jZWQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldC5lZmZlY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGFyZ2V0LmVmZmVjdHNbaV0uYWRkQm91bmRzKSB7XG4gICAgICAgIGlmICghYWR2YW5jZWQpIHtcbiAgICAgICAgICBhZHZhbmNlZCA9IHRydWU7XG4gICAgICAgICAgbG9jYWxCb3VuZHMuYXBwbHlNYXRyaXgodGFyZ2V0LnBhcmVudFJlbmRlckdyb3VwLndvcmxkVHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuZWZmZWN0c1tpXS5hZGRCb3VuZHMobG9jYWxCb3VuZHMsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWR2YW5jZWQpIHtcbiAgICAgIGxvY2FsQm91bmRzLmFwcGx5TWF0cml4KHRhcmdldC5wYXJlbnRSZW5kZXJHcm91cC53b3JsZFRyYW5zZm9ybS5jb3B5VG8odGVtcE1hdHJpeCkuaW52ZXJ0KCkpO1xuICAgICAgYm91bmRzLmFkZEJvdW5kcyhsb2NhbEJvdW5kcywgdGFyZ2V0LnJlbGF0aXZlR3JvdXBUcmFuc2Zvcm0pO1xuICAgIH1cbiAgICBib3VuZHMuYWRkQm91bmRzKGxvY2FsQm91bmRzKTtcbiAgICBib3VuZHNQb29sLnJldHVybihsb2NhbEJvdW5kcyk7XG4gIH0gZWxzZSBpZiAodGFyZ2V0LnJlbmRlckdyb3VwKSB7XG4gICAgYm91bmRzLmFkZEJvdW5kcyhsb2NhbEJvdW5kcywgdGFyZ2V0LnJlbGF0aXZlR3JvdXBUcmFuc2Zvcm0pO1xuICAgIGJvdW5kc1Bvb2wucmV0dXJuKGxvY2FsQm91bmRzKTtcbiAgfVxufVxuXG5leHBvcnQgeyBfZ2V0R2xvYmFsQm91bmRzUmVjdXJzaXZlLCBnZXRGYXN0R2xvYmFsQm91bmRzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRGYXN0R2xvYmFsQm91bmRzLm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vbWF0aHMvcG9pbnQvUG9pbnQubWpzJztcbmltcG9ydCB7IEJpbmRHcm91cCB9IGZyb20gJy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3NoYWRlci9CaW5kR3JvdXAubWpzJztcbmltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvZ2VvbWV0cnkvR2VvbWV0cnkubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IFRleHR1cmVQb29sIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlUG9vbC5tanMnO1xuaW1wb3J0IHsgUmVuZGVyZXJUeXBlIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy90eXBlcy5tanMnO1xuaW1wb3J0IHsgQm91bmRzIH0gZnJvbSAnLi4vc2NlbmUvY29udGFpbmVyL2JvdW5kcy9Cb3VuZHMubWpzJztcbmltcG9ydCB7IGdldEZhc3RHbG9iYWxCb3VuZHMgfSBmcm9tICcuLi9zY2VuZS9jb250YWluZXIvYm91bmRzL2dldEZhc3RHbG9iYWxCb3VuZHMubWpzJztcbmltcG9ydCB7IGdldEdsb2JhbFJlbmRlcmFibGVCb3VuZHMgfSBmcm9tICcuLi9zY2VuZS9jb250YWluZXIvYm91bmRzL2dldFJlbmRlcmFibGVCb3VuZHMubWpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBxdWFkR2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoe1xuICBhdHRyaWJ1dGVzOiB7XG4gICAgYVBvc2l0aW9uOiB7XG4gICAgICBidWZmZXI6IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDEsIDAsIDEsIDEsIDAsIDFdKSxcbiAgICAgIGZvcm1hdDogXCJmbG9hdDMyeDJcIixcbiAgICAgIHN0cmlkZTogMiAqIDQsXG4gICAgICBvZmZzZXQ6IDBcbiAgICB9XG4gIH0sXG4gIGluZGV4QnVmZmVyOiBuZXcgVWludDMyQXJyYXkoWzAsIDEsIDIsIDAsIDIsIDNdKVxufSk7XG5jbGFzcyBGaWx0ZXJTeXN0ZW0ge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2ZpbHRlclN0YWNrSW5kZXggPSAwO1xuICAgIHRoaXMuX2ZpbHRlclN0YWNrID0gW107XG4gICAgdGhpcy5fZmlsdGVyR2xvYmFsVW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVJbnB1dFNpemU6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoNCksIHR5cGU6IFwidmVjNDxmMzI+XCIgfSxcbiAgICAgIHVJbnB1dFBpeGVsOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KDQpLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1SW5wdXRDbGFtcDogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheSg0KSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdU91dHB1dEZyYW1lOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KDQpLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1R2xvYmFsRnJhbWU6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoNCksIHR5cGU6IFwidmVjNDxmMzI+XCIgfSxcbiAgICAgIHVPdXRwdXRUZXh0dXJlOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KDQpLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH1cbiAgICB9KTtcbiAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAgPSBuZXcgQmluZEdyb3VwKHt9KTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBiYWNrIHRleHR1cmUgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsdGVyLiBSZXF1aXJlcyB0aGUgZmlsdGVyIHRvIGhhdmUgYGJsZW5kUmVxdWlyZWRgIHNldCB0byB0cnVlLlxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBhY3RpdmVCYWNrVGV4dHVyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlRmlsdGVyRGF0YT8uYmFja1RleHR1cmU7XG4gIH1cbiAgcHVzaChpbnN0cnVjdGlvbikge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcbiAgICBjb25zdCBmaWx0ZXJzID0gaW5zdHJ1Y3Rpb24uZmlsdGVyRWZmZWN0LmZpbHRlcnM7XG4gICAgaWYgKCF0aGlzLl9maWx0ZXJTdGFja1t0aGlzLl9maWx0ZXJTdGFja0luZGV4XSkge1xuICAgICAgdGhpcy5fZmlsdGVyU3RhY2tbdGhpcy5fZmlsdGVyU3RhY2tJbmRleF0gPSB0aGlzLl9nZXRGaWx0ZXJEYXRhKCk7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlckRhdGEgPSB0aGlzLl9maWx0ZXJTdGFja1t0aGlzLl9maWx0ZXJTdGFja0luZGV4XTtcbiAgICB0aGlzLl9maWx0ZXJTdGFja0luZGV4Kys7XG4gICAgaWYgKGZpbHRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBmaWx0ZXJEYXRhLnNraXAgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBib3VuZHMgPSBmaWx0ZXJEYXRhLmJvdW5kcztcbiAgICBpZiAoaW5zdHJ1Y3Rpb24ucmVuZGVyYWJsZXMpIHtcbiAgICAgIGdldEdsb2JhbFJlbmRlcmFibGVCb3VuZHMoaW5zdHJ1Y3Rpb24ucmVuZGVyYWJsZXMsIGJvdW5kcyk7XG4gICAgfSBlbHNlIGlmIChpbnN0cnVjdGlvbi5maWx0ZXJFZmZlY3QuZmlsdGVyQXJlYSkge1xuICAgICAgYm91bmRzLmNsZWFyKCk7XG4gICAgICBib3VuZHMuYWRkUmVjdChpbnN0cnVjdGlvbi5maWx0ZXJFZmZlY3QuZmlsdGVyQXJlYSk7XG4gICAgICBib3VuZHMuYXBwbHlNYXRyaXgoaW5zdHJ1Y3Rpb24uY29udGFpbmVyLndvcmxkVHJhbnNmb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0RmFzdEdsb2JhbEJvdW5kcyhpbnN0cnVjdGlvbi5jb250YWluZXIsIGJvdW5kcyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbG9yVGV4dHVyZVNvdXJjZSA9IHJlbmRlcmVyLnJlbmRlclRhcmdldC5yZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlLnNvdXJjZTtcbiAgICBsZXQgcmVzb2x1dGlvbiA9IEluZmluaXR5O1xuICAgIGxldCBwYWRkaW5nID0gMDtcbiAgICBsZXQgYW50aWFsaWFzID0gdHJ1ZTtcbiAgICBsZXQgYmxlbmRSZXF1aXJlZCA9IGZhbHNlO1xuICAgIGxldCBlbmFibGVkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWx0ZXIgPSBmaWx0ZXJzW2ldO1xuICAgICAgcmVzb2x1dGlvbiA9IE1hdGgubWluKHJlc29sdXRpb24sIGZpbHRlci5yZXNvbHV0aW9uID09PSBcImluaGVyaXRcIiA/IGNvbG9yVGV4dHVyZVNvdXJjZS5fcmVzb2x1dGlvbiA6IGZpbHRlci5yZXNvbHV0aW9uKTtcbiAgICAgIHBhZGRpbmcgKz0gZmlsdGVyLnBhZGRpbmc7XG4gICAgICBpZiAoZmlsdGVyLmFudGlhbGlhcyA9PT0gXCJvZmZcIikge1xuICAgICAgICBhbnRpYWxpYXMgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLmFudGlhbGlhcyA9PT0gXCJpbmhlcml0XCIpIHtcbiAgICAgICAgYW50aWFsaWFzICYmIChhbnRpYWxpYXMgPSBjb2xvclRleHR1cmVTb3VyY2UuYW50aWFsaWFzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzQ29tcGF0aWJsZSA9ICEhKGZpbHRlci5jb21wYXRpYmxlUmVuZGVyZXJzICYgcmVuZGVyZXIudHlwZSk7XG4gICAgICBpZiAoIWlzQ29tcGF0aWJsZSkge1xuICAgICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGZpbHRlci5ibGVuZFJlcXVpcmVkICYmICEocmVuZGVyZXIuYmFja0J1ZmZlcj8udXNlQmFja0J1ZmZlciA/PyB0cnVlKSkge1xuICAgICAgICB3YXJuKFwiQmxlbmQgZmlsdGVyIHJlcXVpcmVzIGJhY2tCdWZmZXIgb24gV2ViR0wgcmVuZGVyZXIgdG8gYmUgZW5hYmxlZC4gU2V0IGB1c2VCYWNrQnVmZmVyOiB0cnVlYCBpbiB0aGUgcmVuZGVyZXIgb3B0aW9ucy5cIik7XG4gICAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBlbmFibGVkID0gZmlsdGVyLmVuYWJsZWQgfHwgZW5hYmxlZDtcbiAgICAgIGJsZW5kUmVxdWlyZWQgPSBibGVuZFJlcXVpcmVkIHx8IGZpbHRlci5ibGVuZFJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgIGZpbHRlckRhdGEuc2tpcCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHZpZXdQb3J0ID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJvb3RWaWV3UG9ydDtcbiAgICBib3VuZHMuc2NhbGUocmVzb2x1dGlvbikuZml0Qm91bmRzKDAsIHZpZXdQb3J0LndpZHRoLCAwLCB2aWV3UG9ydC5oZWlnaHQpLmNlaWwoKS5zY2FsZSgxIC8gcmVzb2x1dGlvbikucGFkKHBhZGRpbmcgfCAwKTtcbiAgICBpZiAoIWJvdW5kcy5pc1Bvc2l0aXZlKSB7XG4gICAgICBmaWx0ZXJEYXRhLnNraXAgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaWx0ZXJEYXRhLnNraXAgPSBmYWxzZTtcbiAgICBmaWx0ZXJEYXRhLmJvdW5kcyA9IGJvdW5kcztcbiAgICBmaWx0ZXJEYXRhLmJsZW5kUmVxdWlyZWQgPSBibGVuZFJlcXVpcmVkO1xuICAgIGZpbHRlckRhdGEuY29udGFpbmVyID0gaW5zdHJ1Y3Rpb24uY29udGFpbmVyO1xuICAgIGZpbHRlckRhdGEuZmlsdGVyRWZmZWN0ID0gaW5zdHJ1Y3Rpb24uZmlsdGVyRWZmZWN0O1xuICAgIGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJlbmRlclN1cmZhY2U7XG4gICAgZmlsdGVyRGF0YS5pbnB1dFRleHR1cmUgPSBUZXh0dXJlUG9vbC5nZXRPcHRpbWFsVGV4dHVyZShcbiAgICAgIGJvdW5kcy53aWR0aCxcbiAgICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgICByZXNvbHV0aW9uLFxuICAgICAgYW50aWFsaWFzXG4gICAgKTtcbiAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQuYmluZChmaWx0ZXJEYXRhLmlucHV0VGV4dHVyZSwgdHJ1ZSk7XG4gICAgcmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMucHVzaCh7XG4gICAgICBvZmZzZXQ6IGJvdW5kc1xuICAgIH0pO1xuICB9XG4gIHBvcCgpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG4gICAgdGhpcy5fZmlsdGVyU3RhY2tJbmRleC0tO1xuICAgIGNvbnN0IGZpbHRlckRhdGEgPSB0aGlzLl9maWx0ZXJTdGFja1t0aGlzLl9maWx0ZXJTdGFja0luZGV4XTtcbiAgICBpZiAoZmlsdGVyRGF0YS5za2lwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZUZpbHRlckRhdGEgPSBmaWx0ZXJEYXRhO1xuICAgIGNvbnN0IGlucHV0VGV4dHVyZSA9IGZpbHRlckRhdGEuaW5wdXRUZXh0dXJlO1xuICAgIGNvbnN0IGJvdW5kcyA9IGZpbHRlckRhdGEuYm91bmRzO1xuICAgIGxldCBiYWNrVGV4dHVyZSA9IFRleHR1cmUuRU1QVFk7XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmZpbmlzaFJlbmRlclBhc3MoKTtcbiAgICBpZiAoZmlsdGVyRGF0YS5ibGVuZFJlcXVpcmVkKSB7XG4gICAgICBjb25zdCBwcmV2aW91c0JvdW5kcyA9IHRoaXMuX2ZpbHRlclN0YWNrSW5kZXggPiAwID8gdGhpcy5fZmlsdGVyU3RhY2tbdGhpcy5fZmlsdGVyU3RhY2tJbmRleCAtIDFdLmJvdW5kcyA6IG51bGw7XG4gICAgICBjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlKTtcbiAgICAgIGJhY2tUZXh0dXJlID0gdGhpcy5nZXRCYWNrVGV4dHVyZShyZW5kZXJUYXJnZXQsIGJvdW5kcywgcHJldmlvdXNCb3VuZHMpO1xuICAgIH1cbiAgICBmaWx0ZXJEYXRhLmJhY2tUZXh0dXJlID0gYmFja1RleHR1cmU7XG4gICAgY29uc3QgZmlsdGVycyA9IGZpbHRlckRhdGEuZmlsdGVyRWZmZWN0LmZpbHRlcnM7XG4gICAgdGhpcy5fZ2xvYmFsRmlsdGVyQmluZEdyb3VwLnNldFJlc291cmNlKGlucHV0VGV4dHVyZS5zb3VyY2Uuc3R5bGUsIDIpO1xuICAgIHRoaXMuX2dsb2JhbEZpbHRlckJpbmRHcm91cC5zZXRSZXNvdXJjZShiYWNrVGV4dHVyZS5zb3VyY2UsIDMpO1xuICAgIHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnBvcCgpO1xuICAgIGlmIChmaWx0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZmlsdGVyc1swXS5hcHBseSh0aGlzLCBpbnB1dFRleHR1cmUsIGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlLCBmYWxzZSk7XG4gICAgICBUZXh0dXJlUG9vbC5yZXR1cm5UZXh0dXJlKGlucHV0VGV4dHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBmbGlwID0gZmlsdGVyRGF0YS5pbnB1dFRleHR1cmU7XG4gICAgICBsZXQgZmxvcCA9IFRleHR1cmVQb29sLmdldE9wdGltYWxUZXh0dXJlKFxuICAgICAgICBib3VuZHMud2lkdGgsXG4gICAgICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgICAgIGZsaXAuc291cmNlLl9yZXNvbHV0aW9uLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSBmaWx0ZXJzW2ldO1xuICAgICAgICBmaWx0ZXIuYXBwbHkodGhpcywgZmxpcCwgZmxvcCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHQgPSBmbGlwO1xuICAgICAgICBmbGlwID0gZmxvcDtcbiAgICAgICAgZmxvcCA9IHQ7XG4gICAgICB9XG4gICAgICBmaWx0ZXJzW2ldLmFwcGx5KHRoaXMsIGZsaXAsIGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlLCBmYWxzZSk7XG4gICAgICBUZXh0dXJlUG9vbC5yZXR1cm5UZXh0dXJlKGZsaXApO1xuICAgICAgVGV4dHVyZVBvb2wucmV0dXJuVGV4dHVyZShmbG9wKTtcbiAgICB9XG4gICAgaWYgKGZpbHRlckRhdGEuYmxlbmRSZXF1aXJlZCkge1xuICAgICAgVGV4dHVyZVBvb2wucmV0dXJuVGV4dHVyZShiYWNrVGV4dHVyZSk7XG4gICAgfVxuICB9XG4gIGdldEJhY2tUZXh0dXJlKGxhc3RSZW5kZXJTdXJmYWNlLCBib3VuZHMsIHByZXZpb3VzQm91bmRzKSB7XG4gICAgY29uc3QgYmFja2dyb3VuZFJlc29sdXRpb24gPSBsYXN0UmVuZGVyU3VyZmFjZS5jb2xvclRleHR1cmUuc291cmNlLl9yZXNvbHV0aW9uO1xuICAgIGNvbnN0IGJhY2tUZXh0dXJlID0gVGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUoXG4gICAgICBib3VuZHMud2lkdGgsXG4gICAgICBib3VuZHMuaGVpZ2h0LFxuICAgICAgYmFja2dyb3VuZFJlc29sdXRpb24sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgbGV0IHggPSBib3VuZHMubWluWDtcbiAgICBsZXQgeSA9IGJvdW5kcy5taW5ZO1xuICAgIGlmIChwcmV2aW91c0JvdW5kcykge1xuICAgICAgeCAtPSBwcmV2aW91c0JvdW5kcy5taW5YO1xuICAgICAgeSAtPSBwcmV2aW91c0JvdW5kcy5taW5ZO1xuICAgIH1cbiAgICB4ID0gTWF0aC5mbG9vcih4ICogYmFja2dyb3VuZFJlc29sdXRpb24pO1xuICAgIHkgPSBNYXRoLmZsb29yKHkgKiBiYWNrZ3JvdW5kUmVzb2x1dGlvbik7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwoYm91bmRzLndpZHRoICogYmFja2dyb3VuZFJlc29sdXRpb24pO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChib3VuZHMuaGVpZ2h0ICogYmFja2dyb3VuZFJlc29sdXRpb24pO1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyVGFyZ2V0LmNvcHlUb1RleHR1cmUoXG4gICAgICBsYXN0UmVuZGVyU3VyZmFjZSxcbiAgICAgIGJhY2tUZXh0dXJlLFxuICAgICAgeyB4LCB5IH0sXG4gICAgICB7IHdpZHRoLCBoZWlnaHQgfSxcbiAgICAgIHsgeDogMCwgeTogMCB9XG4gICAgKTtcbiAgICByZXR1cm4gYmFja1RleHR1cmU7XG4gIH1cbiAgYXBwbHlGaWx0ZXIoZmlsdGVyLCBpbnB1dCwgb3V0cHV0LCBjbGVhcikge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcbiAgICBjb25zdCBmaWx0ZXJEYXRhID0gdGhpcy5fZmlsdGVyU3RhY2tbdGhpcy5fZmlsdGVyU3RhY2tJbmRleF07XG4gICAgY29uc3QgYm91bmRzID0gZmlsdGVyRGF0YS5ib3VuZHM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gUG9pbnQuc2hhcmVkO1xuICAgIGNvbnN0IHByZXZpb3VzUmVuZGVyU3VyZmFjZSA9IGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlO1xuICAgIGNvbnN0IGlzRmluYWxUYXJnZXQgPSBwcmV2aW91c1JlbmRlclN1cmZhY2UgPT09IG91dHB1dDtcbiAgICBsZXQgcmVzb2x1dGlvbiA9IHRoaXMucmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJvb3RSZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlLnNvdXJjZS5fcmVzb2x1dGlvbjtcbiAgICBsZXQgY3VycmVudEluZGV4ID0gdGhpcy5fZmlsdGVyU3RhY2tJbmRleCAtIDE7XG4gICAgd2hpbGUgKGN1cnJlbnRJbmRleCA+IDAgJiYgdGhpcy5fZmlsdGVyU3RhY2tbY3VycmVudEluZGV4XS5za2lwKSB7XG4gICAgICAtLWN1cnJlbnRJbmRleDtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRJbmRleCA+IDApIHtcbiAgICAgIHJlc29sdXRpb24gPSB0aGlzLl9maWx0ZXJTdGFja1tjdXJyZW50SW5kZXhdLmlucHV0VGV4dHVyZS5zb3VyY2UuX3Jlc29sdXRpb247XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlclVuaWZvcm1zID0gdGhpcy5fZmlsdGVyR2xvYmFsVW5pZm9ybXM7XG4gICAgY29uc3QgdW5pZm9ybXMgPSBmaWx0ZXJVbmlmb3Jtcy51bmlmb3JtcztcbiAgICBjb25zdCBvdXRwdXRGcmFtZSA9IHVuaWZvcm1zLnVPdXRwdXRGcmFtZTtcbiAgICBjb25zdCBpbnB1dFNpemUgPSB1bmlmb3Jtcy51SW5wdXRTaXplO1xuICAgIGNvbnN0IGlucHV0UGl4ZWwgPSB1bmlmb3Jtcy51SW5wdXRQaXhlbDtcbiAgICBjb25zdCBpbnB1dENsYW1wID0gdW5pZm9ybXMudUlucHV0Q2xhbXA7XG4gICAgY29uc3QgZ2xvYmFsRnJhbWUgPSB1bmlmb3Jtcy51R2xvYmFsRnJhbWU7XG4gICAgY29uc3Qgb3V0cHV0VGV4dHVyZSA9IHVuaWZvcm1zLnVPdXRwdXRUZXh0dXJlO1xuICAgIGlmIChpc0ZpbmFsVGFyZ2V0KSB7XG4gICAgICBsZXQgbGFzdEluZGV4ID0gdGhpcy5fZmlsdGVyU3RhY2tJbmRleDtcbiAgICAgIHdoaWxlIChsYXN0SW5kZXggPiAwKSB7XG4gICAgICAgIGxhc3RJbmRleC0tO1xuICAgICAgICBjb25zdCBmaWx0ZXJEYXRhMiA9IHRoaXMuX2ZpbHRlclN0YWNrW3RoaXMuX2ZpbHRlclN0YWNrSW5kZXggLSAxXTtcbiAgICAgICAgaWYgKCFmaWx0ZXJEYXRhMi5za2lwKSB7XG4gICAgICAgICAgb2Zmc2V0LnggPSBmaWx0ZXJEYXRhMi5ib3VuZHMubWluWDtcbiAgICAgICAgICBvZmZzZXQueSA9IGZpbHRlckRhdGEyLmJvdW5kcy5taW5ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXRwdXRGcmFtZVswXSA9IGJvdW5kcy5taW5YIC0gb2Zmc2V0Lng7XG4gICAgICBvdXRwdXRGcmFtZVsxXSA9IGJvdW5kcy5taW5ZIC0gb2Zmc2V0Lnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dEZyYW1lWzBdID0gMDtcbiAgICAgIG91dHB1dEZyYW1lWzFdID0gMDtcbiAgICB9XG4gICAgb3V0cHV0RnJhbWVbMl0gPSBpbnB1dC5mcmFtZS53aWR0aDtcbiAgICBvdXRwdXRGcmFtZVszXSA9IGlucHV0LmZyYW1lLmhlaWdodDtcbiAgICBpbnB1dFNpemVbMF0gPSBpbnB1dC5zb3VyY2Uud2lkdGg7XG4gICAgaW5wdXRTaXplWzFdID0gaW5wdXQuc291cmNlLmhlaWdodDtcbiAgICBpbnB1dFNpemVbMl0gPSAxIC8gaW5wdXRTaXplWzBdO1xuICAgIGlucHV0U2l6ZVszXSA9IDEgLyBpbnB1dFNpemVbMV07XG4gICAgaW5wdXRQaXhlbFswXSA9IGlucHV0LnNvdXJjZS5waXhlbFdpZHRoO1xuICAgIGlucHV0UGl4ZWxbMV0gPSBpbnB1dC5zb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgaW5wdXRQaXhlbFsyXSA9IDEgLyBpbnB1dFBpeGVsWzBdO1xuICAgIGlucHV0UGl4ZWxbM10gPSAxIC8gaW5wdXRQaXhlbFsxXTtcbiAgICBpbnB1dENsYW1wWzBdID0gMC41ICogaW5wdXRQaXhlbFsyXTtcbiAgICBpbnB1dENsYW1wWzFdID0gMC41ICogaW5wdXRQaXhlbFszXTtcbiAgICBpbnB1dENsYW1wWzJdID0gaW5wdXQuZnJhbWUud2lkdGggKiBpbnB1dFNpemVbMl0gLSAwLjUgKiBpbnB1dFBpeGVsWzJdO1xuICAgIGlucHV0Q2xhbXBbM10gPSBpbnB1dC5mcmFtZS5oZWlnaHQgKiBpbnB1dFNpemVbM10gLSAwLjUgKiBpbnB1dFBpeGVsWzNdO1xuICAgIGNvbnN0IHJvb3RUZXh0dXJlID0gdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXQucm9vdFJlbmRlclRhcmdldC5jb2xvclRleHR1cmU7XG4gICAgZ2xvYmFsRnJhbWVbMF0gPSBvZmZzZXQueCAqIHJlc29sdXRpb247XG4gICAgZ2xvYmFsRnJhbWVbMV0gPSBvZmZzZXQueSAqIHJlc29sdXRpb247XG4gICAgZ2xvYmFsRnJhbWVbMl0gPSByb290VGV4dHVyZS5zb3VyY2Uud2lkdGggKiByZXNvbHV0aW9uO1xuICAgIGdsb2JhbEZyYW1lWzNdID0gcm9vdFRleHR1cmUuc291cmNlLmhlaWdodCAqIHJlc29sdXRpb247XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KG91dHB1dCk7XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmJpbmQob3V0cHV0LCAhIWNsZWFyKTtcbiAgICBpZiAob3V0cHV0IGluc3RhbmNlb2YgVGV4dHVyZSkge1xuICAgICAgb3V0cHV0VGV4dHVyZVswXSA9IG91dHB1dC5mcmFtZS53aWR0aDtcbiAgICAgIG91dHB1dFRleHR1cmVbMV0gPSBvdXRwdXQuZnJhbWUuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXRUZXh0dXJlWzBdID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuICAgICAgb3V0cHV0VGV4dHVyZVsxXSA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG4gICAgfVxuICAgIG91dHB1dFRleHR1cmVbMl0gPSByZW5kZXJUYXJnZXQuaXNSb290ID8gLTEgOiAxO1xuICAgIGZpbHRlclVuaWZvcm1zLnVwZGF0ZSgpO1xuICAgIGlmIChyZW5kZXJlci5yZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2gpIHtcbiAgICAgIGNvbnN0IGJhdGNoVW5pZm9ybXMgPSByZW5kZXJlci5yZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2guZ2V0VWJvUmVzb3VyY2UoZmlsdGVyVW5pZm9ybXMpO1xuICAgICAgdGhpcy5fZ2xvYmFsRmlsdGVyQmluZEdyb3VwLnNldFJlc291cmNlKGJhdGNoVW5pZm9ybXMsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAuc2V0UmVzb3VyY2UoZmlsdGVyVW5pZm9ybXMsIDApO1xuICAgIH1cbiAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAuc2V0UmVzb3VyY2UoaW5wdXQuc291cmNlLCAxKTtcbiAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAuc2V0UmVzb3VyY2UoaW5wdXQuc291cmNlLnN0eWxlLCAyKTtcbiAgICBmaWx0ZXIuZ3JvdXBzWzBdID0gdGhpcy5fZ2xvYmFsRmlsdGVyQmluZEdyb3VwO1xuICAgIHJlbmRlcmVyLmVuY29kZXIuZHJhdyh7XG4gICAgICBnZW9tZXRyeTogcXVhZEdlb21ldHJ5LFxuICAgICAgc2hhZGVyOiBmaWx0ZXIsXG4gICAgICBzdGF0ZTogZmlsdGVyLl9zdGF0ZSxcbiAgICAgIHRvcG9sb2d5OiBcInRyaWFuZ2xlLWxpc3RcIlxuICAgIH0pO1xuICAgIGlmIChyZW5kZXJlci50eXBlID09PSBSZW5kZXJlclR5cGUuV0VCR0wpIHtcbiAgICAgIHJlbmRlcmVyLnJlbmRlclRhcmdldC5maW5pc2hSZW5kZXJQYXNzKCk7XG4gICAgfVxuICB9XG4gIF9nZXRGaWx0ZXJEYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBza2lwOiBmYWxzZSxcbiAgICAgIGlucHV0VGV4dHVyZTogbnVsbCxcbiAgICAgIGJvdW5kczogbmV3IEJvdW5kcygpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgZmlsdGVyRWZmZWN0OiBudWxsLFxuICAgICAgYmxlbmRSZXF1aXJlZDogZmFsc2UsXG4gICAgICBwcmV2aW91c1JlbmRlclN1cmZhY2U6IG51bGxcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNdWx0aXBseSBfaW5wdXQgbm9ybWFsaXplZCBjb29yZGluYXRlc18gdG8gdGhpcyBtYXRyaXggdG8gZ2V0IF9zcHJpdGUgdGV4dHVyZSBub3JtYWxpemVkIGNvb3JkaW5hdGVzXy5cbiAgICpcbiAgICogVXNlIGBvdXRwdXRNYXRyaXggKiB2VGV4dHVyZUNvb3JkYCBpbiB0aGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gb3V0cHV0TWF0cml4IC0gVGhlIG1hdHJpeCB0byBvdXRwdXQgdG8uXG4gICAqIEBwYXJhbSB7U3ByaXRlfSBzcHJpdGUgLSBUaGUgc3ByaXRlIHRvIG1hcCB0by5cbiAgICogQHJldHVybnMgVGhlIG1hcHBlZCBtYXRyaXguXG4gICAqL1xuICBjYWxjdWxhdGVTcHJpdGVNYXRyaXgob3V0cHV0TWF0cml4LCBzcHJpdGUpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fYWN0aXZlRmlsdGVyRGF0YTtcbiAgICBjb25zdCBtYXBwZWRNYXRyaXggPSBvdXRwdXRNYXRyaXguc2V0KFxuICAgICAgZGF0YS5pbnB1dFRleHR1cmUuX3NvdXJjZS53aWR0aCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgZGF0YS5pbnB1dFRleHR1cmUuX3NvdXJjZS5oZWlnaHQsXG4gICAgICBkYXRhLmJvdW5kcy5taW5YLFxuICAgICAgZGF0YS5ib3VuZHMubWluWVxuICAgICk7XG4gICAgY29uc3Qgd29ybGRUcmFuc2Zvcm0gPSBzcHJpdGUud29ybGRUcmFuc2Zvcm0uY29weVRvKE1hdHJpeC5zaGFyZWQpO1xuICAgIHdvcmxkVHJhbnNmb3JtLmludmVydCgpO1xuICAgIG1hcHBlZE1hdHJpeC5wcmVwZW5kKHdvcmxkVHJhbnNmb3JtKTtcbiAgICBtYXBwZWRNYXRyaXguc2NhbGUoXG4gICAgICAxIC8gc3ByaXRlLnRleHR1cmUuZnJhbWUud2lkdGgsXG4gICAgICAxIC8gc3ByaXRlLnRleHR1cmUuZnJhbWUuaGVpZ2h0XG4gICAgKTtcbiAgICBtYXBwZWRNYXRyaXgudHJhbnNsYXRlKHNwcml0ZS5hbmNob3IueCwgc3ByaXRlLmFuY2hvci55KTtcbiAgICByZXR1cm4gbWFwcGVkTWF0cml4O1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuRmlsdGVyU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJmaWx0ZXJcIlxufTtcblxuZXhwb3J0IHsgRmlsdGVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWx0ZXJTeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXRHbG9iYWxSZW5kZXJhYmxlQm91bmRzKHJlbmRlcmFibGVzLCBib3VuZHMpIHtcbiAgYm91bmRzLmNsZWFyKCk7XG4gIGNvbnN0IHRlbXBNYXRyaXggPSBib3VuZHMubWF0cml4O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcmVuZGVyYWJsZSA9IHJlbmRlcmFibGVzW2ldO1xuICAgIGlmIChyZW5kZXJhYmxlLmdsb2JhbERpc3BsYXlTdGF0dXMgPCA3KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYm91bmRzLm1hdHJpeCA9IHJlbmRlcmFibGUud29ybGRUcmFuc2Zvcm07XG4gICAgcmVuZGVyYWJsZS5hZGRCb3VuZHMoYm91bmRzKTtcbiAgfVxuICBib3VuZHMubWF0cml4ID0gdGVtcE1hdHJpeDtcbiAgcmV0dXJuIGJvdW5kcztcbn1cblxuZXhwb3J0IHsgZ2V0R2xvYmFsUmVuZGVyYWJsZUJvdW5kcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UmVuZGVyYWJsZUJvdW5kcy5tanMubWFwXG4iLCJpbXBvcnQgeyBleHRlbnNpb25zIH0gZnJvbSAnLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBGaWx0ZXJQaXBlIH0gZnJvbSAnLi9GaWx0ZXJQaXBlLm1qcyc7XG5pbXBvcnQgeyBGaWx0ZXJTeXN0ZW0gfSBmcm9tICcuL0ZpbHRlclN5c3RlbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKEZpbHRlclN5c3RlbSk7XG5leHRlbnNpb25zLmFkZChGaWx0ZXJQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBsb2NhbFVuaWZvcm1CaXQgPSB7XG4gIG5hbWU6IFwibG9jYWwtdW5pZm9ybS1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG5cbiAgICAgICAgICAgIHN0cnVjdCBMb2NhbFVuaWZvcm1zIHtcbiAgICAgICAgICAgICAgICB1VHJhbnNmb3JtTWF0cml4Om1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVDb2xvcjp2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgdVJvdW5kOmYzMixcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQGdyb3VwKDEpIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiBsb2NhbFVuaWZvcm1zIDogTG9jYWxVbmlmb3JtcztcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IGxvY2FsVW5pZm9ybXMudUNvbG9yO1xuICAgICAgICAgICAgbW9kZWxNYXRyaXggKj0gbG9jYWxVbmlmb3Jtcy51VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBlbmQ6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGlmKGxvY2FsVW5pZm9ybXMudVJvdW5kID09IDEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdlBvc2l0aW9uID0gdmVjNChyb3VuZFBpeGVscyh2UG9zaXRpb24ueHksIGdsb2JhbFVuaWZvcm1zLnVSZXNvbHV0aW9uKSwgdlBvc2l0aW9uLnp3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdEdyb3VwMiA9IHtcbiAgLi4ubG9jYWxVbmlmb3JtQml0LFxuICB2ZXJ0ZXg6IHtcbiAgICAuLi5sb2NhbFVuaWZvcm1CaXQudmVydGV4LFxuICAgIC8vIHJlcGxhY2UgdGhlIGdyb3VwIVxuICAgIGhlYWRlcjogbG9jYWxVbmlmb3JtQml0LnZlcnRleC5oZWFkZXIucmVwbGFjZShcImdyb3VwKDEpXCIsIFwiZ3JvdXAoMilcIilcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdEdsID0ge1xuICBuYW1lOiBcImxvY2FsLXVuaWZvcm0tYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuXG4gICAgICAgICAgICB1bmlmb3JtIG1hdDMgdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjNCB1Q29sb3I7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IHVSb3VuZDtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IHVDb2xvcjtcbiAgICAgICAgICAgIG1vZGVsTWF0cml4ID0gdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgYFxuICAgICksXG4gICAgZW5kOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICBpZih1Um91bmQgPT0gMS4pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24ueHkgPSByb3VuZFBpeGVscyhnbF9Qb3NpdGlvbi54eSwgdVJlc29sdXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyBsb2NhbFVuaWZvcm1CaXQsIGxvY2FsVW5pZm9ybUJpdEdsLCBsb2NhbFVuaWZvcm1CaXRHcm91cDIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsVW5pZm9ybUJpdC5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNvbG9yVG9Vbmlmb3JtKHJnYiwgYWxwaGEsIG91dCwgb2Zmc2V0KSB7XG4gIG91dFtvZmZzZXQrK10gPSAocmdiID4+IDE2ICYgMjU1KSAvIDI1NTtcbiAgb3V0W29mZnNldCsrXSA9IChyZ2IgPj4gOCAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSAocmdiICYgMjU1KSAvIDI1NTtcbiAgb3V0W29mZnNldCsrXSA9IGFscGhhO1xufVxuZnVuY3Rpb24gY29sb3IzMkJpdFRvVW5pZm9ybShhYmdyLCBvdXQsIG9mZnNldCkge1xuICBjb25zdCBhbHBoYSA9IChhYmdyID4+IDI0ICYgMjU1KSAvIDI1NTtcbiAgb3V0W29mZnNldCsrXSA9IChhYmdyICYgMjU1KSAvIDI1NSAqIGFscGhhO1xuICBvdXRbb2Zmc2V0KytdID0gKGFiZ3IgPj4gOCAmIDI1NSkgLyAyNTUgKiBhbHBoYTtcbiAgb3V0W29mZnNldCsrXSA9IChhYmdyID4+IDE2ICYgMjU1KSAvIDI1NSAqIGFscGhhO1xuICBvdXRbb2Zmc2V0KytdID0gYWxwaGE7XG59XG5cbmV4cG9ydCB7IGNvbG9yMzJCaXRUb1VuaWZvcm0sIGNvbG9yVG9Vbmlmb3JtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvclRvVW5pZm9ybS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL1N0YXRlLm1qcyc7XG5pbXBvcnQgeyBCaWdQb29sIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcG9vbC9Qb29sR3JvdXAubWpzJztcbmltcG9ydCB7IGNvbG9yMzJCaXRUb1VuaWZvcm0gfSBmcm9tICcuLi9ncHUvY29sb3JUb1VuaWZvcm0ubWpzJztcbmltcG9ydCB7IEJhdGNoYWJsZUdyYXBoaWNzIH0gZnJvbSAnLi9CYXRjaGFibGVHcmFwaGljcy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdyYXBoaWNzUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBhZGFwdG9yKSB7XG4gICAgdGhpcy5zdGF0ZSA9IFN0YXRlLmZvcjJkKCk7XG4gICAgLy8gYmF0Y2hhYmxlIGdyYXBoaWNzIGxpc3QsIHVzZWQgdG8gcmVuZGVyIGJhdGNoZXNcbiAgICB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCA9IHRoaXMuZGVzdHJveVJlbmRlcmFibGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fYWRhcHRvciA9IGFkYXB0b3I7XG4gICAgdGhpcy5fYWRhcHRvci5pbml0KCk7XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKGdyYXBoaWNzKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdyYXBoaWNzLmNvbnRleHQ7XG4gICAgY29uc3Qgd2FzQmF0Y2hlZCA9ICEhdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljcy51aWRdO1xuICAgIGNvbnN0IGdwdUNvbnRleHQgPSB0aGlzLnJlbmRlcmVyLmdyYXBoaWNzQ29udGV4dC51cGRhdGVHcHVDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChncHVDb250ZXh0LmlzQmF0Y2hhYmxlIHx8IHdhc0JhdGNoZWQgIT09IGdwdUNvbnRleHQuaXNCYXRjaGFibGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYWRkUmVuZGVyYWJsZShncmFwaGljcywgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBncHVDb250ZXh0ID0gdGhpcy5yZW5kZXJlci5ncmFwaGljc0NvbnRleHQudXBkYXRlR3B1Q29udGV4dChncmFwaGljcy5jb250ZXh0KTtcbiAgICBpZiAoZ3JhcGhpY3MuX2RpZEdyYXBoaWNzVXBkYXRlKSB7XG4gICAgICBncmFwaGljcy5fZGlkR3JhcGhpY3NVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3JlYnVpbGQoZ3JhcGhpY3MpO1xuICAgIH1cbiAgICBpZiAoZ3B1Q29udGV4dC5pc0JhdGNoYWJsZSkge1xuICAgICAgdGhpcy5fYWRkVG9CYXRjaGVyKGdyYXBoaWNzLCBpbnN0cnVjdGlvblNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKGdyYXBoaWNzKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZShncmFwaGljcykge1xuICAgIGNvbnN0IGJhdGNoZXMgPSB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoW2dyYXBoaWNzLnVpZF07XG4gICAgaWYgKGJhdGNoZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBiYXRjaCA9IGJhdGNoZXNbaV07XG4gICAgICAgIGJhdGNoLl9iYXRjaGVyLnVwZGF0ZUVsZW1lbnQoYmF0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkZXN0cm95UmVuZGVyYWJsZShncmFwaGljcykge1xuICAgIGlmICh0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoW2dyYXBoaWNzLnVpZF0pIHtcbiAgICAgIHRoaXMuX3JlbW92ZUJhdGNoRm9yUmVuZGVyYWJsZShncmFwaGljcy51aWQpO1xuICAgIH1cbiAgICBncmFwaGljcy5vZmYoXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gIH1cbiAgZXhlY3V0ZShncmFwaGljcykge1xuICAgIGlmICghZ3JhcGhpY3MuaXNSZW5kZXJhYmxlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcbiAgICBjb25zdCBjb250ZXh0ID0gZ3JhcGhpY3MuY29udGV4dDtcbiAgICBjb25zdCBjb250ZXh0U3lzdGVtID0gcmVuZGVyZXIuZ3JhcGhpY3NDb250ZXh0O1xuICAgIGlmICghY29udGV4dFN5c3RlbS5nZXRHcHVDb250ZXh0KGNvbnRleHQpLmJhdGNoZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNoYWRlciA9IGNvbnRleHQuY3VzdG9tU2hhZGVyIHx8IHRoaXMuX2FkYXB0b3Iuc2hhZGVyO1xuICAgIHRoaXMuc3RhdGUuYmxlbmRNb2RlID0gZ3JhcGhpY3MuZ3JvdXBCbGVuZE1vZGU7XG4gICAgY29uc3QgbG9jYWxVbmlmb3JtcyA9IHNoYWRlci5yZXNvdXJjZXMubG9jYWxVbmlmb3Jtcy51bmlmb3JtcztcbiAgICBsb2NhbFVuaWZvcm1zLnVUcmFuc2Zvcm1NYXRyaXggPSBncmFwaGljcy5ncm91cFRyYW5zZm9ybTtcbiAgICBsb2NhbFVuaWZvcm1zLnVSb3VuZCA9IHJlbmRlcmVyLl9yb3VuZFBpeGVscyB8IGdyYXBoaWNzLl9yb3VuZFBpeGVscztcbiAgICBjb2xvcjMyQml0VG9Vbmlmb3JtKFxuICAgICAgZ3JhcGhpY3MuZ3JvdXBDb2xvckFscGhhLFxuICAgICAgbG9jYWxVbmlmb3Jtcy51Q29sb3IsXG4gICAgICAwXG4gICAgKTtcbiAgICB0aGlzLl9hZGFwdG9yLmV4ZWN1dGUodGhpcywgZ3JhcGhpY3MpO1xuICB9XG4gIF9yZWJ1aWxkKGdyYXBoaWNzKSB7XG4gICAgY29uc3Qgd2FzQmF0Y2hlZCA9ICEhdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljcy51aWRdO1xuICAgIGNvbnN0IGdwdUNvbnRleHQgPSB0aGlzLnJlbmRlcmVyLmdyYXBoaWNzQ29udGV4dC51cGRhdGVHcHVDb250ZXh0KGdyYXBoaWNzLmNvbnRleHQpO1xuICAgIGlmICh3YXNCYXRjaGVkKSB7XG4gICAgICB0aGlzLl9yZW1vdmVCYXRjaEZvclJlbmRlcmFibGUoZ3JhcGhpY3MudWlkKTtcbiAgICB9XG4gICAgaWYgKGdwdUNvbnRleHQuaXNCYXRjaGFibGUpIHtcbiAgICAgIHRoaXMuX2luaXRCYXRjaGVzRm9yUmVuZGVyYWJsZShncmFwaGljcyk7XG4gICAgfVxuICAgIGdyYXBoaWNzLmJhdGNoZWQgPSBncHVDb250ZXh0LmlzQmF0Y2hhYmxlO1xuICB9XG4gIF9hZGRUb0JhdGNoZXIoZ3JhcGhpY3MsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgYmF0Y2hQaXBlID0gdGhpcy5yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaDtcbiAgICBjb25zdCBiYXRjaGVzID0gdGhpcy5fZ2V0QmF0Y2hlc0ZvclJlbmRlcmFibGUoZ3JhcGhpY3MpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYmF0Y2ggPSBiYXRjaGVzW2ldO1xuICAgICAgYmF0Y2hQaXBlLmFkZFRvQmF0Y2goYmF0Y2gsIGluc3RydWN0aW9uU2V0KTtcbiAgICB9XG4gIH1cbiAgX2dldEJhdGNoZXNGb3JSZW5kZXJhYmxlKGdyYXBoaWNzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dyYXBoaWNzQmF0Y2hlc0hhc2hbZ3JhcGhpY3MudWlkXSB8fCB0aGlzLl9pbml0QmF0Y2hlc0ZvclJlbmRlcmFibGUoZ3JhcGhpY3MpO1xuICB9XG4gIF9pbml0QmF0Y2hlc0ZvclJlbmRlcmFibGUoZ3JhcGhpY3MpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ3JhcGhpY3MuY29udGV4dDtcbiAgICBjb25zdCBncHVDb250ZXh0ID0gdGhpcy5yZW5kZXJlci5ncmFwaGljc0NvbnRleHQuZ2V0R3B1Q29udGV4dChjb250ZXh0KTtcbiAgICBjb25zdCByb3VuZFBpeGVscyA9IHRoaXMucmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgZ3JhcGhpY3MuX3JvdW5kUGl4ZWxzO1xuICAgIGNvbnN0IGJhdGNoZXMgPSBncHVDb250ZXh0LmJhdGNoZXMubWFwKChiYXRjaCkgPT4ge1xuICAgICAgY29uc3QgYmF0Y2hDbG9uZSA9IEJpZ1Bvb2wuZ2V0KEJhdGNoYWJsZUdyYXBoaWNzKTtcbiAgICAgIGJhdGNoLmNvcHlUbyhiYXRjaENsb25lKTtcbiAgICAgIGJhdGNoQ2xvbmUucmVuZGVyYWJsZSA9IGdyYXBoaWNzO1xuICAgICAgYmF0Y2hDbG9uZS5yb3VuZFBpeGVscyA9IHJvdW5kUGl4ZWxzO1xuICAgICAgcmV0dXJuIGJhdGNoQ2xvbmU7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMuX2dyYXBoaWNzQmF0Y2hlc0hhc2hbZ3JhcGhpY3MudWlkXSA9PT0gdm9pZCAwKSB7XG4gICAgICBncmFwaGljcy5vbihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgICB9XG4gICAgdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljcy51aWRdID0gYmF0Y2hlcztcbiAgICByZXR1cm4gYmF0Y2hlcztcbiAgfVxuICBfcmVtb3ZlQmF0Y2hGb3JSZW5kZXJhYmxlKGdyYXBoaWNzVWlkKSB7XG4gICAgdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljc1VpZF0uZm9yRWFjaCgoYmF0Y2gpID0+IHtcbiAgICAgIEJpZ1Bvb2wucmV0dXJuKGJhdGNoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoW2dyYXBoaWNzVWlkXSA9IG51bGw7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLl9hZGFwdG9yLmRlc3Ryb3koKTtcbiAgICB0aGlzLl9hZGFwdG9yID0gbnVsbDtcbiAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaCkge1xuICAgICAgdGhpcy5fcmVtb3ZlQmF0Y2hGb3JSZW5kZXJhYmxlKGkpO1xuICAgIH1cbiAgICB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkdyYXBoaWNzUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwiZ3JhcGhpY3NcIlxufTtcblxuZXhwb3J0IHsgR3JhcGhpY3NQaXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcmFwaGljc1BpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgR3JhcGhpY3NDb250ZXh0U3lzdGVtIH0gZnJvbSAnLi9zaGFyZWQvR3JhcGhpY3NDb250ZXh0U3lzdGVtLm1qcyc7XG5pbXBvcnQgeyBHcmFwaGljc1BpcGUgfSBmcm9tICcuL3NoYXJlZC9HcmFwaGljc1BpcGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChHcmFwaGljc1BpcGUpO1xuZXh0ZW5zaW9ucy5hZGQoR3JhcGhpY3NDb250ZXh0U3lzdGVtKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgQmluZEdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc2hhZGVyL0JpbmRHcm91cC5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgZ2V0QWRqdXN0ZWRCbGVuZE1vZGVCbGVuZCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL2dldEFkanVzdGVkQmxlbmRNb2RlQmxlbmQubWpzJztcbmltcG9ydCB7IEJpZ1Bvb2wgfSBmcm9tICcuLi8uLi8uLi91dGlscy9wb29sL1Bvb2xHcm91cC5tanMnO1xuaW1wb3J0IHsgY29sb3IzMkJpdFRvVW5pZm9ybSB9IGZyb20gJy4uLy4uL2dyYXBoaWNzL2dwdS9jb2xvclRvVW5pZm9ybS5tanMnO1xuaW1wb3J0IHsgQmF0Y2hhYmxlTWVzaCB9IGZyb20gJy4vQmF0Y2hhYmxlTWVzaC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIE1lc2hQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIsIGFkYXB0b3IpIHtcbiAgICB0aGlzLmxvY2FsVW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVUcmFuc2Zvcm1NYXRyaXg6IHsgdmFsdWU6IG5ldyBNYXRyaXgoKSwgdHlwZTogXCJtYXQzeDM8ZjMyPlwiIH0sXG4gICAgICB1Q29sb3I6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIDEsIDFdKSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdVJvdW5kOiB7IHZhbHVlOiAwLCB0eXBlOiBcImYzMlwiIH1cbiAgICB9KTtcbiAgICB0aGlzLmxvY2FsVW5pZm9ybXNCaW5kR3JvdXAgPSBuZXcgQmluZEdyb3VwKHtcbiAgICAgIDA6IHRoaXMubG9jYWxVbmlmb3Jtc1xuICAgIH0pO1xuICAgIHRoaXMuX21lc2hEYXRhSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCA9IHRoaXMuZGVzdHJveVJlbmRlcmFibGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fYWRhcHRvciA9IGFkYXB0b3I7XG4gICAgdGhpcy5fYWRhcHRvci5pbml0KCk7XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKG1lc2gpIHtcbiAgICBjb25zdCBtZXNoRGF0YSA9IHRoaXMuX2dldE1lc2hEYXRhKG1lc2gpO1xuICAgIGNvbnN0IHdhc0JhdGNoZWQgPSBtZXNoRGF0YS5iYXRjaGVkO1xuICAgIGNvbnN0IGlzQmF0Y2hlZCA9IG1lc2guYmF0Y2hlZDtcbiAgICBtZXNoRGF0YS5iYXRjaGVkID0gaXNCYXRjaGVkO1xuICAgIGlmICh3YXNCYXRjaGVkICE9PSBpc0JhdGNoZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaXNCYXRjaGVkKSB7XG4gICAgICBjb25zdCBnZW9tZXRyeSA9IG1lc2guX2dlb21ldHJ5O1xuICAgICAgaWYgKGdlb21ldHJ5LmluZGljZXMubGVuZ3RoICE9PSBtZXNoRGF0YS5pbmRleFNpemUgfHwgZ2VvbWV0cnkucG9zaXRpb25zLmxlbmd0aCAhPT0gbWVzaERhdGEudmVydGV4U2l6ZSkge1xuICAgICAgICBtZXNoRGF0YS5pbmRleFNpemUgPSBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgbWVzaERhdGEudmVydGV4U2l6ZSA9IGdlb21ldHJ5LnBvc2l0aW9ucy5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgYmF0Y2hhYmxlTWVzaCA9IHRoaXMuX2dldEJhdGNoYWJsZU1lc2gobWVzaCk7XG4gICAgICBjb25zdCB0ZXh0dXJlID0gbWVzaC50ZXh0dXJlO1xuICAgICAgaWYgKGJhdGNoYWJsZU1lc2gudGV4dHVyZS5fc291cmNlICE9PSB0ZXh0dXJlLl9zb3VyY2UpIHtcbiAgICAgICAgaWYgKGJhdGNoYWJsZU1lc2gudGV4dHVyZS5fc291cmNlICE9PSB0ZXh0dXJlLl9zb3VyY2UpIHtcbiAgICAgICAgICByZXR1cm4gIWJhdGNoYWJsZU1lc2guX2JhdGNoZXIuY2hlY2tBbmRVcGRhdGVUZXh0dXJlKGJhdGNoYWJsZU1lc2gsIHRleHR1cmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRSZW5kZXJhYmxlKG1lc2gsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgYmF0Y2hlciA9IHRoaXMucmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2g7XG4gICAgY29uc3QgeyBiYXRjaGVkIH0gPSB0aGlzLl9nZXRNZXNoRGF0YShtZXNoKTtcbiAgICBpZiAoYmF0Y2hlZCkge1xuICAgICAgY29uc3QgZ3B1QmF0Y2hhYmxlTWVzaCA9IHRoaXMuX2dldEJhdGNoYWJsZU1lc2gobWVzaCk7XG4gICAgICBncHVCYXRjaGFibGVNZXNoLnRleHR1cmUgPSBtZXNoLl90ZXh0dXJlO1xuICAgICAgZ3B1QmF0Y2hhYmxlTWVzaC5nZW9tZXRyeSA9IG1lc2guX2dlb21ldHJ5O1xuICAgICAgYmF0Y2hlci5hZGRUb0JhdGNoKGdwdUJhdGNoYWJsZU1lc2gsIGluc3RydWN0aW9uU2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmF0Y2hlci5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgICBpbnN0cnVjdGlvblNldC5hZGQobWVzaCk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVJlbmRlcmFibGUobWVzaCkge1xuICAgIGlmIChtZXNoLmJhdGNoZWQpIHtcbiAgICAgIGNvbnN0IGdwdUJhdGNoYWJsZU1lc2ggPSB0aGlzLl9ncHVCYXRjaGFibGVNZXNoSGFzaFttZXNoLnVpZF07XG4gICAgICBncHVCYXRjaGFibGVNZXNoLnRleHR1cmUgPSBtZXNoLl90ZXh0dXJlO1xuICAgICAgZ3B1QmF0Y2hhYmxlTWVzaC5nZW9tZXRyeSA9IG1lc2guX2dlb21ldHJ5O1xuICAgICAgZ3B1QmF0Y2hhYmxlTWVzaC5fYmF0Y2hlci51cGRhdGVFbGVtZW50KGdwdUJhdGNoYWJsZU1lc2gpO1xuICAgIH1cbiAgfVxuICBkZXN0cm95UmVuZGVyYWJsZShtZXNoKSB7XG4gICAgdGhpcy5fbWVzaERhdGFIYXNoW21lc2gudWlkXSA9IG51bGw7XG4gICAgY29uc3QgZ3B1TWVzaCA9IHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoW21lc2gudWlkXTtcbiAgICBpZiAoZ3B1TWVzaCkge1xuICAgICAgQmlnUG9vbC5yZXR1cm4oZ3B1TWVzaCk7XG4gICAgICB0aGlzLl9ncHVCYXRjaGFibGVNZXNoSGFzaFttZXNoLnVpZF0gPSBudWxsO1xuICAgIH1cbiAgICBtZXNoLm9mZihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgfVxuICBleGVjdXRlKG1lc2gpIHtcbiAgICBpZiAoIW1lc2guaXNSZW5kZXJhYmxlKVxuICAgICAgcmV0dXJuO1xuICAgIG1lc2guc3RhdGUuYmxlbmRNb2RlID0gZ2V0QWRqdXN0ZWRCbGVuZE1vZGVCbGVuZChtZXNoLmdyb3VwQmxlbmRNb2RlLCBtZXNoLnRleHR1cmUuX3NvdXJjZSk7XG4gICAgY29uc3QgbG9jYWxVbmlmb3JtcyA9IHRoaXMubG9jYWxVbmlmb3JtcztcbiAgICBsb2NhbFVuaWZvcm1zLnVuaWZvcm1zLnVUcmFuc2Zvcm1NYXRyaXggPSBtZXNoLmdyb3VwVHJhbnNmb3JtO1xuICAgIGxvY2FsVW5pZm9ybXMudW5pZm9ybXMudVJvdW5kID0gdGhpcy5yZW5kZXJlci5fcm91bmRQaXhlbHMgfCBtZXNoLl9yb3VuZFBpeGVscztcbiAgICBsb2NhbFVuaWZvcm1zLnVwZGF0ZSgpO1xuICAgIGNvbG9yMzJCaXRUb1VuaWZvcm0oXG4gICAgICBtZXNoLmdyb3VwQ29sb3JBbHBoYSxcbiAgICAgIGxvY2FsVW5pZm9ybXMudW5pZm9ybXMudUNvbG9yLFxuICAgICAgMFxuICAgICk7XG4gICAgdGhpcy5fYWRhcHRvci5leGVjdXRlKHRoaXMsIG1lc2gpO1xuICB9XG4gIF9nZXRNZXNoRGF0YShtZXNoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc2hEYXRhSGFzaFttZXNoLnVpZF0gfHwgdGhpcy5faW5pdE1lc2hEYXRhKG1lc2gpO1xuICB9XG4gIF9pbml0TWVzaERhdGEobWVzaCkge1xuICAgIHRoaXMuX21lc2hEYXRhSGFzaFttZXNoLnVpZF0gPSB7XG4gICAgICBiYXRjaGVkOiBtZXNoLmJhdGNoZWQsXG4gICAgICBpbmRleFNpemU6IG1lc2guX2dlb21ldHJ5LmluZGljZXM/Lmxlbmd0aCxcbiAgICAgIHZlcnRleFNpemU6IG1lc2guX2dlb21ldHJ5LnBvc2l0aW9ucz8ubGVuZ3RoXG4gICAgfTtcbiAgICBtZXNoLm9uKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIHJldHVybiB0aGlzLl9tZXNoRGF0YUhhc2hbbWVzaC51aWRdO1xuICB9XG4gIF9nZXRCYXRjaGFibGVNZXNoKG1lc2gpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2hbbWVzaC51aWRdIHx8IHRoaXMuX2luaXRCYXRjaGFibGVNZXNoKG1lc2gpO1xuICB9XG4gIF9pbml0QmF0Y2hhYmxlTWVzaChtZXNoKSB7XG4gICAgY29uc3QgZ3B1TWVzaCA9IEJpZ1Bvb2wuZ2V0KEJhdGNoYWJsZU1lc2gpO1xuICAgIGdwdU1lc2gucmVuZGVyYWJsZSA9IG1lc2g7XG4gICAgZ3B1TWVzaC50ZXh0dXJlID0gbWVzaC5fdGV4dHVyZTtcbiAgICBncHVNZXNoLnRyYW5zZm9ybSA9IG1lc2guZ3JvdXBUcmFuc2Zvcm07XG4gICAgZ3B1TWVzaC5yb3VuZFBpeGVscyA9IHRoaXMucmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgbWVzaC5fcm91bmRQaXhlbHM7XG4gICAgdGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2hbbWVzaC51aWRdID0gZ3B1TWVzaDtcbiAgICByZXR1cm4gZ3B1TWVzaDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl9ncHVCYXRjaGFibGVNZXNoSGFzaCkge1xuICAgICAgaWYgKHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoW2ldKSB7XG4gICAgICAgIEJpZ1Bvb2wucmV0dXJuKHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2ggPSBudWxsO1xuICAgIHRoaXMuX21lc2hEYXRhSGFzaCA9IG51bGw7XG4gICAgdGhpcy5sb2NhbFVuaWZvcm1zID0gbnVsbDtcbiAgICB0aGlzLmxvY2FsVW5pZm9ybXNCaW5kR3JvdXAgPSBudWxsO1xuICAgIHRoaXMuX2FkYXB0b3IuZGVzdHJveSgpO1xuICAgIHRoaXMuX2FkYXB0b3IgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuTWVzaFBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcIm1lc2hcIlxufTtcblxuZXhwb3J0IHsgTWVzaFBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lc2hQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE1lc2hQaXBlIH0gZnJvbSAnLi9zaGFyZWQvTWVzaFBpcGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChNZXNoUGlwZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgQmF0Y2hhYmxlTWVzaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmF0Y2hlck5hbWUgPSBcImRlZmF1bHRcIjtcbiAgICB0aGlzLnBhY2tBc1F1YWQgPSBmYWxzZTtcbiAgICB0aGlzLmluZGV4T2Zmc2V0ID0gMDtcbiAgICB0aGlzLmF0dHJpYnV0ZU9mZnNldCA9IDA7XG4gICAgdGhpcy5yb3VuZFBpeGVscyA9IDA7XG4gICAgdGhpcy5fYmF0Y2hlciA9IG51bGw7XG4gICAgdGhpcy5fYmF0Y2ggPSBudWxsO1xuICAgIHRoaXMuX3V2VXBkYXRlSWQgPSAtMTtcbiAgICB0aGlzLl90ZXh0dXJlTWF0cml4VXBkYXRlSWQgPSAtMTtcbiAgfVxuICBnZXQgYmxlbmRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmFibGUuZ3JvdXBCbGVuZE1vZGU7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gbnVsbDtcbiAgICB0aGlzLnRleHR1cmUgPSBudWxsO1xuICAgIHRoaXMuX2JhdGNoZXIgPSBudWxsO1xuICAgIHRoaXMuX2JhdGNoID0gbnVsbDtcbiAgICB0aGlzLmdlb21ldHJ5ID0gbnVsbDtcbiAgICB0aGlzLl91dlVwZGF0ZUlkID0gLTE7XG4gICAgdGhpcy5fdGV4dHVyZU1hdHJpeFVwZGF0ZUlkID0gLTE7XG4gIH1cbiAgZ2V0IHV2cygpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG4gICAgY29uc3QgdXZCdWZmZXIgPSBnZW9tZXRyeS5nZXRCdWZmZXIoXCJhVVZcIik7XG4gICAgY29uc3QgdXZzID0gdXZCdWZmZXIuZGF0YTtcbiAgICBsZXQgdHJhbnNmb3JtZWRVdnMgPSB1dnM7XG4gICAgY29uc3QgdGV4dHVyZU1hdHJpeCA9IHRoaXMudGV4dHVyZS50ZXh0dXJlTWF0cml4O1xuICAgIGlmICghdGV4dHVyZU1hdHJpeC5pc1NpbXBsZSkge1xuICAgICAgdHJhbnNmb3JtZWRVdnMgPSB0aGlzLl90cmFuc2Zvcm1lZFV2cztcbiAgICAgIGlmICh0aGlzLl90ZXh0dXJlTWF0cml4VXBkYXRlSWQgIT09IHRleHR1cmVNYXRyaXguX3VwZGF0ZUlEIHx8IHRoaXMuX3V2VXBkYXRlSWQgIT09IHV2QnVmZmVyLl91cGRhdGVJRCkge1xuICAgICAgICBpZiAoIXRyYW5zZm9ybWVkVXZzIHx8IHRyYW5zZm9ybWVkVXZzLmxlbmd0aCA8IHV2cy5sZW5ndGgpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1lZFV2cyA9IHRoaXMuX3RyYW5zZm9ybWVkVXZzID0gbmV3IEZsb2F0MzJBcnJheSh1dnMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXh0dXJlTWF0cml4VXBkYXRlSWQgPSB0ZXh0dXJlTWF0cml4Ll91cGRhdGVJRDtcbiAgICAgICAgdGhpcy5fdXZVcGRhdGVJZCA9IHV2QnVmZmVyLl91cGRhdGVJRDtcbiAgICAgICAgdGV4dHVyZU1hdHJpeC5tdWx0aXBseVV2cyh1dnMsIHRyYW5zZm9ybWVkVXZzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkVXZzO1xuICB9XG4gIGdldCBwb3NpdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkucG9zaXRpb25zO1xuICB9XG4gIGdldCBpbmRpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLmdlb21ldHJ5LmluZGljZXM7XG4gIH1cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmFibGUuZ3JvdXBDb2xvckFscGhhO1xuICB9XG4gIGdldCBncm91cFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJhYmxlLmdyb3VwVHJhbnNmb3JtO1xuICB9XG4gIGdldCBhdHRyaWJ1dGVTaXplKCkge1xuICAgIHJldHVybiB0aGlzLmdlb21ldHJ5LnBvc2l0aW9ucy5sZW5ndGggLyAyO1xuICB9XG4gIGdldCBpbmRleFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkuaW5kaWNlcy5sZW5ndGg7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmF0Y2hhYmxlTWVzaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2hhYmxlTWVzaC5tanMubWFwXG4iLCJpbXBvcnQgeyBCdWZmZXIgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9idWZmZXIvQnVmZmVyLm1qcyc7XG5pbXBvcnQgeyBCdWZmZXJVc2FnZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2J1ZmZlci9jb25zdC5tanMnO1xuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9nZW9tZXRyeS9HZW9tZXRyeS5tanMnO1xuaW1wb3J0IHsgZGVwcmVjYXRpb24sIHY4XzBfMCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvZGVwcmVjYXRpb24ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfTWVzaEdlb21ldHJ5ID0gY2xhc3MgX01lc2hHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIGxldCBvcHRpb25zID0gYXJnc1swXSA/PyB7fTtcbiAgICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkge1xuICAgICAgZGVwcmVjYXRpb24odjhfMF8wLCBcInVzZSBuZXcgTWVzaEdlb21ldHJ5KHsgcG9zaXRpb25zLCB1dnMsIGluZGljZXMgfSkgaW5zdGVhZFwiKTtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHBvc2l0aW9uczogb3B0aW9ucyxcbiAgICAgICAgdXZzOiBhcmdzWzFdLFxuICAgICAgICBpbmRpY2VzOiBhcmdzWzJdXG4gICAgICB9O1xuICAgIH1cbiAgICBvcHRpb25zID0geyAuLi5fTWVzaEdlb21ldHJ5LmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH07XG4gICAgY29uc3QgcG9zaXRpb25zID0gb3B0aW9ucy5wb3NpdGlvbnMgfHwgbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMSwgMCwgMSwgMSwgMCwgMV0pO1xuICAgIGNvbnN0IHV2cyA9IG9wdGlvbnMudXZzIHx8IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDEsIDAsIDEsIDEsIDAsIDFdKTtcbiAgICBjb25zdCBpbmRpY2VzID0gb3B0aW9ucy5pbmRpY2VzIHx8IG5ldyBVaW50MzJBcnJheShbMCwgMSwgMiwgMCwgMiwgM10pO1xuICAgIGNvbnN0IHNocmlua1RvRml0ID0gb3B0aW9ucy5zaHJpbmtCdWZmZXJzVG9GaXQ7XG4gICAgY29uc3QgcG9zaXRpb25CdWZmZXIgPSBuZXcgQnVmZmVyKHtcbiAgICAgIGRhdGE6IHBvc2l0aW9ucyxcbiAgICAgIGxhYmVsOiBcImF0dHJpYnV0ZS1tZXNoLXBvc2l0aW9uc1wiLFxuICAgICAgc2hyaW5rVG9GaXQsXG4gICAgICB1c2FnZTogQnVmZmVyVXNhZ2UuVkVSVEVYIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1RcbiAgICB9KTtcbiAgICBjb25zdCB1dkJ1ZmZlciA9IG5ldyBCdWZmZXIoe1xuICAgICAgZGF0YTogdXZzLFxuICAgICAgbGFiZWw6IFwiYXR0cmlidXRlLW1lc2gtdXZzXCIsXG4gICAgICBzaHJpbmtUb0ZpdCxcbiAgICAgIHVzYWdlOiBCdWZmZXJVc2FnZS5WRVJURVggfCBCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgIH0pO1xuICAgIGNvbnN0IGluZGV4QnVmZmVyID0gbmV3IEJ1ZmZlcih7XG4gICAgICBkYXRhOiBpbmRpY2VzLFxuICAgICAgbGFiZWw6IFwiaW5kZXgtbWVzaC1idWZmZXJcIixcbiAgICAgIHNocmlua1RvRml0LFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLklOREVYIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1RcbiAgICB9KTtcbiAgICBzdXBlcih7XG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGFQb3NpdGlvbjoge1xuICAgICAgICAgIGJ1ZmZlcjogcG9zaXRpb25CdWZmZXIsXG4gICAgICAgICAgZm9ybWF0OiBcImZsb2F0MzJ4MlwiLFxuICAgICAgICAgIHN0cmlkZTogMiAqIDQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIGFVVjoge1xuICAgICAgICAgIGJ1ZmZlcjogdXZCdWZmZXIsXG4gICAgICAgICAgZm9ybWF0OiBcImZsb2F0MzJ4MlwiLFxuICAgICAgICAgIHN0cmlkZTogMiAqIDQsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbmRleEJ1ZmZlcixcbiAgICAgIHRvcG9sb2d5OiBvcHRpb25zLnRvcG9sb2d5XG4gICAgfSk7XG4gICAgdGhpcy5iYXRjaE1vZGUgPSBcImF1dG9cIjtcbiAgfVxuICAvKiogVGhlIHBvc2l0aW9ucyBvZiB0aGUgbWVzaC4gKi9cbiAgZ2V0IHBvc2l0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmFQb3NpdGlvbi5idWZmZXIuZGF0YTtcbiAgfVxuICBzZXQgcG9zaXRpb25zKHZhbHVlKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzLmFQb3NpdGlvbi5idWZmZXIuZGF0YSA9IHZhbHVlO1xuICB9XG4gIC8qKiBUaGUgVVZzIG9mIHRoZSBtZXNoLiAqL1xuICBnZXQgdXZzKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuYVVWLmJ1ZmZlci5kYXRhO1xuICB9XG4gIHNldCB1dnModmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXMuYVVWLmJ1ZmZlci5kYXRhID0gdmFsdWU7XG4gIH1cbiAgLyoqIFRoZSBpbmRpY2VzIG9mIHRoZSBtZXNoLiAqL1xuICBnZXQgaW5kaWNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleEJ1ZmZlci5kYXRhO1xuICB9XG4gIHNldCBpbmRpY2VzKHZhbHVlKSB7XG4gICAgdGhpcy5pbmRleEJ1ZmZlci5kYXRhID0gdmFsdWU7XG4gIH1cbn07XG5fTWVzaEdlb21ldHJ5LmRlZmF1bHRPcHRpb25zID0ge1xuICB0b3BvbG9neTogXCJ0cmlhbmdsZS1saXN0XCIsXG4gIHNocmlua0J1ZmZlcnNUb0ZpdDogZmFsc2Vcbn07XG5sZXQgTWVzaEdlb21ldHJ5ID0gX01lc2hHZW9tZXRyeTtcblxuZXhwb3J0IHsgTWVzaEdlb21ldHJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NZXNoR2VvbWV0cnkubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVwcmVjYXRpb24sIHY4XzBfMCB9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcvZGVwcmVjYXRpb24ubWpzJztcbmltcG9ydCB7IE1lc2hHZW9tZXRyeSB9IGZyb20gJy4uL21lc2gvc2hhcmVkL01lc2hHZW9tZXRyeS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9QbGFuZUdlb21ldHJ5ID0gY2xhc3MgX1BsYW5lR2VvbWV0cnkgZXh0ZW5kcyBNZXNoR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIGxldCBvcHRpb25zID0gYXJnc1swXSA/PyB7fTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJQbGFuZUdlb21ldHJ5IGNvbnN0cnVjdG9yIGNoYW5nZWQgcGxlYXNlIHVzZSB7IHdpZHRoLCBoZWlnaHQsIHZlcnRpY2VzWCwgdmVydGljZXNZIH0gaW5zdGVhZFwiKTtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHdpZHRoOiBvcHRpb25zLFxuICAgICAgICBoZWlnaHQ6IGFyZ3NbMV0sXG4gICAgICAgIHZlcnRpY2VzWDogYXJnc1syXSxcbiAgICAgICAgdmVydGljZXNZOiBhcmdzWzNdXG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmJ1aWxkKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWZyZXNoZXMgcGxhbmUgY29vcmRpbmF0ZXNcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGJlIGFwcGxpZWQgdG8gcGxhbmUgZ2VvbWV0cnlcbiAgICovXG4gIGJ1aWxkKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0geyAuLi5fUGxhbmVHZW9tZXRyeS5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMudmVydGljZXNYID0gdGhpcy52ZXJ0aWNlc1ggPz8gb3B0aW9ucy52ZXJ0aWNlc1g7XG4gICAgdGhpcy52ZXJ0aWNlc1kgPSB0aGlzLnZlcnRpY2VzWSA/PyBvcHRpb25zLnZlcnRpY2VzWTtcbiAgICB0aGlzLndpZHRoID0gdGhpcy53aWR0aCA/PyBvcHRpb25zLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgPz8gb3B0aW9ucy5oZWlnaHQ7XG4gICAgY29uc3QgdG90YWwgPSB0aGlzLnZlcnRpY2VzWCAqIHRoaXMudmVydGljZXNZO1xuICAgIGNvbnN0IHZlcnRzID0gW107XG4gICAgY29uc3QgdXZzID0gW107XG4gICAgY29uc3QgaW5kaWNlcyA9IFtdO1xuICAgIGNvbnN0IHZlcnRpY2VzWCA9IHRoaXMudmVydGljZXNYIC0gMTtcbiAgICBjb25zdCB2ZXJ0aWNlc1kgPSB0aGlzLnZlcnRpY2VzWSAtIDE7XG4gICAgY29uc3Qgc2l6ZVggPSB0aGlzLndpZHRoIC8gdmVydGljZXNYO1xuICAgIGNvbnN0IHNpemVZID0gdGhpcy5oZWlnaHQgLyB2ZXJ0aWNlc1k7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG4gICAgICBjb25zdCB4ID0gaSAlIHRoaXMudmVydGljZXNYO1xuICAgICAgY29uc3QgeSA9IGkgLyB0aGlzLnZlcnRpY2VzWCB8IDA7XG4gICAgICB2ZXJ0cy5wdXNoKHggKiBzaXplWCwgeSAqIHNpemVZKTtcbiAgICAgIHV2cy5wdXNoKHggLyB2ZXJ0aWNlc1gsIHkgLyB2ZXJ0aWNlc1kpO1xuICAgIH1cbiAgICBjb25zdCB0b3RhbFN1YiA9IHZlcnRpY2VzWCAqIHZlcnRpY2VzWTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsU3ViOyBpKyspIHtcbiAgICAgIGNvbnN0IHhwb3MgPSBpICUgdmVydGljZXNYO1xuICAgICAgY29uc3QgeXBvcyA9IGkgLyB2ZXJ0aWNlc1ggfCAwO1xuICAgICAgY29uc3QgdmFsdWUgPSB5cG9zICogdGhpcy52ZXJ0aWNlc1ggKyB4cG9zO1xuICAgICAgY29uc3QgdmFsdWUyID0geXBvcyAqIHRoaXMudmVydGljZXNYICsgeHBvcyArIDE7XG4gICAgICBjb25zdCB2YWx1ZTMgPSAoeXBvcyArIDEpICogdGhpcy52ZXJ0aWNlc1ggKyB4cG9zO1xuICAgICAgY29uc3QgdmFsdWU0ID0gKHlwb3MgKyAxKSAqIHRoaXMudmVydGljZXNYICsgeHBvcyArIDE7XG4gICAgICBpbmRpY2VzLnB1c2goXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZTIsXG4gICAgICAgIHZhbHVlMyxcbiAgICAgICAgdmFsdWUyLFxuICAgICAgICB2YWx1ZTQsXG4gICAgICAgIHZhbHVlM1xuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5idWZmZXJzWzBdLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHZlcnRzKTtcbiAgICB0aGlzLmJ1ZmZlcnNbMV0uZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkodXZzKTtcbiAgICB0aGlzLmluZGV4QnVmZmVyLmRhdGEgPSBuZXcgVWludDMyQXJyYXkoaW5kaWNlcyk7XG4gICAgdGhpcy5idWZmZXJzWzBdLnVwZGF0ZSgpO1xuICAgIHRoaXMuYnVmZmVyc1sxXS51cGRhdGUoKTtcbiAgICB0aGlzLmluZGV4QnVmZmVyLnVwZGF0ZSgpO1xuICB9XG59O1xuX1BsYW5lR2VvbWV0cnkuZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHdpZHRoOiAxMDAsXG4gIGhlaWdodDogMTAwLFxuICB2ZXJ0aWNlc1g6IDEwLFxuICB2ZXJ0aWNlc1k6IDEwXG59O1xubGV0IFBsYW5lR2VvbWV0cnkgPSBfUGxhbmVHZW9tZXRyeTtcblxuZXhwb3J0IHsgUGxhbmVHZW9tZXRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGxhbmVHZW9tZXRyeS5tanMubWFwXG4iLCJpbXBvcnQgeyBQbGFuZUdlb21ldHJ5IH0gZnJvbSAnLi4vbWVzaC1wbGFuZS9QbGFuZUdlb21ldHJ5Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgX05pbmVTbGljZUdlb21ldHJ5ID0gY2xhc3MgX05pbmVTbGljZUdlb21ldHJ5IGV4dGVuZHMgUGxhbmVHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMgPSB7IC4uLl9OaW5lU2xpY2VHZW9tZXRyeS5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHN1cGVyKHtcbiAgICAgIHdpZHRoOiBvcHRpb25zLndpZHRoLFxuICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCxcbiAgICAgIHZlcnRpY2VzWDogNCxcbiAgICAgIHZlcnRpY2VzWTogNFxuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBOaW5lU2xpY2VHZW9tZXRyeSB3aXRoIHRoZSBvcHRpb25zLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9mIHRoZSBOaW5lU2xpY2VHZW9tZXRyeS5cbiAgICovXG4gIHVwZGF0ZShvcHRpb25zKSB7XG4gICAgdGhpcy53aWR0aCA9IG9wdGlvbnMud2lkdGggPz8gdGhpcy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ID8/IHRoaXMuaGVpZ2h0O1xuICAgIHRoaXMuX29yaWdpbmFsV2lkdGggPSBvcHRpb25zLm9yaWdpbmFsV2lkdGggPz8gdGhpcy5fb3JpZ2luYWxXaWR0aDtcbiAgICB0aGlzLl9vcmlnaW5hbEhlaWdodCA9IG9wdGlvbnMub3JpZ2luYWxIZWlnaHQgPz8gdGhpcy5fb3JpZ2luYWxIZWlnaHQ7XG4gICAgdGhpcy5fbGVmdFdpZHRoID0gb3B0aW9ucy5sZWZ0V2lkdGggPz8gdGhpcy5fbGVmdFdpZHRoO1xuICAgIHRoaXMuX3JpZ2h0V2lkdGggPSBvcHRpb25zLnJpZ2h0V2lkdGggPz8gdGhpcy5fcmlnaHRXaWR0aDtcbiAgICB0aGlzLl90b3BIZWlnaHQgPSBvcHRpb25zLnRvcEhlaWdodCA/PyB0aGlzLl90b3BIZWlnaHQ7XG4gICAgdGhpcy5fYm90dG9tSGVpZ2h0ID0gb3B0aW9ucy5ib3R0b21IZWlnaHQgPz8gdGhpcy5fYm90dG9tSGVpZ2h0O1xuICAgIHRoaXMudXBkYXRlVXZzKCk7XG4gICAgdGhpcy51cGRhdGVQb3NpdGlvbnMoKTtcbiAgfVxuICAvKiogVXBkYXRlcyB0aGUgcG9zaXRpb25zIG9mIHRoZSB2ZXJ0aWNlcy4gKi9cbiAgdXBkYXRlUG9zaXRpb25zKCkge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHRoaXMucG9zaXRpb25zO1xuICAgIGNvbnN0IHcgPSB0aGlzLl9sZWZ0V2lkdGggKyB0aGlzLl9yaWdodFdpZHRoO1xuICAgIGNvbnN0IHNjYWxlVyA9IHRoaXMud2lkdGggPiB3ID8gMSA6IHRoaXMud2lkdGggLyB3O1xuICAgIGNvbnN0IGggPSB0aGlzLl90b3BIZWlnaHQgKyB0aGlzLl9ib3R0b21IZWlnaHQ7XG4gICAgY29uc3Qgc2NhbGVIID0gdGhpcy5oZWlnaHQgPiBoID8gMSA6IHRoaXMuaGVpZ2h0IC8gaDtcbiAgICBjb25zdCBzY2FsZSA9IE1hdGgubWluKHNjYWxlVywgc2NhbGVIKTtcbiAgICBwb3NpdGlvbnNbOV0gPSBwb3NpdGlvbnNbMTFdID0gcG9zaXRpb25zWzEzXSA9IHBvc2l0aW9uc1sxNV0gPSB0aGlzLl90b3BIZWlnaHQgKiBzY2FsZTtcbiAgICBwb3NpdGlvbnNbMTddID0gcG9zaXRpb25zWzE5XSA9IHBvc2l0aW9uc1syMV0gPSBwb3NpdGlvbnNbMjNdID0gdGhpcy5oZWlnaHQgLSB0aGlzLl9ib3R0b21IZWlnaHQgKiBzY2FsZTtcbiAgICBwb3NpdGlvbnNbMjVdID0gcG9zaXRpb25zWzI3XSA9IHBvc2l0aW9uc1syOV0gPSBwb3NpdGlvbnNbMzFdID0gdGhpcy5oZWlnaHQ7XG4gICAgcG9zaXRpb25zWzJdID0gcG9zaXRpb25zWzEwXSA9IHBvc2l0aW9uc1sxOF0gPSBwb3NpdGlvbnNbMjZdID0gdGhpcy5fbGVmdFdpZHRoICogc2NhbGU7XG4gICAgcG9zaXRpb25zWzRdID0gcG9zaXRpb25zWzEyXSA9IHBvc2l0aW9uc1syMF0gPSBwb3NpdGlvbnNbMjhdID0gdGhpcy53aWR0aCAtIHRoaXMuX3JpZ2h0V2lkdGggKiBzY2FsZTtcbiAgICBwb3NpdGlvbnNbNl0gPSBwb3NpdGlvbnNbMTRdID0gcG9zaXRpb25zWzIyXSA9IHBvc2l0aW9uc1szMF0gPSB0aGlzLndpZHRoO1xuICAgIHRoaXMuZ2V0QnVmZmVyKFwiYVBvc2l0aW9uXCIpLnVwZGF0ZSgpO1xuICB9XG4gIC8qKiBVcGRhdGVzIHRoZSBVVnMgb2YgdGhlIHZlcnRpY2VzLiAqL1xuICB1cGRhdGVVdnMoKSB7XG4gICAgY29uc3QgdXZzID0gdGhpcy51dnM7XG4gICAgdXZzWzBdID0gdXZzWzhdID0gdXZzWzE2XSA9IHV2c1syNF0gPSAwO1xuICAgIHV2c1sxXSA9IHV2c1szXSA9IHV2c1s1XSA9IHV2c1s3XSA9IDA7XG4gICAgdXZzWzZdID0gdXZzWzE0XSA9IHV2c1syMl0gPSB1dnNbMzBdID0gMTtcbiAgICB1dnNbMjVdID0gdXZzWzI3XSA9IHV2c1syOV0gPSB1dnNbMzFdID0gMTtcbiAgICBjb25zdCBfdXZ3ID0gMSAvIHRoaXMuX29yaWdpbmFsV2lkdGg7XG4gICAgY29uc3QgX3V2aCA9IDEgLyB0aGlzLl9vcmlnaW5hbEhlaWdodDtcbiAgICB1dnNbMl0gPSB1dnNbMTBdID0gdXZzWzE4XSA9IHV2c1syNl0gPSBfdXZ3ICogdGhpcy5fbGVmdFdpZHRoO1xuICAgIHV2c1s5XSA9IHV2c1sxMV0gPSB1dnNbMTNdID0gdXZzWzE1XSA9IF91dmggKiB0aGlzLl90b3BIZWlnaHQ7XG4gICAgdXZzWzRdID0gdXZzWzEyXSA9IHV2c1syMF0gPSB1dnNbMjhdID0gMSAtIF91dncgKiB0aGlzLl9yaWdodFdpZHRoO1xuICAgIHV2c1sxN10gPSB1dnNbMTldID0gdXZzWzIxXSA9IHV2c1syM10gPSAxIC0gX3V2aCAqIHRoaXMuX2JvdHRvbUhlaWdodDtcbiAgICB0aGlzLmdldEJ1ZmZlcihcImFVVlwiKS51cGRhdGUoKTtcbiAgfVxufTtcbi8qKiBUaGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgTmluZVNsaWNlR2VvbWV0cnkuICovXG5fTmluZVNsaWNlR2VvbWV0cnkuZGVmYXVsdE9wdGlvbnMgPSB7XG4gIC8qKiBUaGUgd2lkdGggb2YgdGhlIE5pbmVTbGljZVBsYW5lLCBzZXR0aW5nIHRoaXMgd2lsbCBhY3R1YWxseSBtb2RpZnkgdGhlIHZlcnRpY2VzIGFuZCBVVidzIG9mIHRoaXMgcGxhbmUuICovXG4gIHdpZHRoOiAxMDAsXG4gIC8qKiBUaGUgaGVpZ2h0IG9mIHRoZSBOaW5lU2xpY2VQbGFuZSwgc2V0dGluZyB0aGlzIHdpbGwgYWN0dWFsbHkgbW9kaWZ5IHRoZSB2ZXJ0aWNlcyBhbmQgVVYncyBvZiB0aGlzIHBsYW5lLiAqL1xuICBoZWlnaHQ6IDEwMCxcbiAgLyoqIFRoZSB3aWR0aCBvZiB0aGUgbGVmdCBjb2x1bW4uICovXG4gIGxlZnRXaWR0aDogMTAsXG4gIC8qKiBUaGUgaGVpZ2h0IG9mIHRoZSB0b3Agcm93LiAqL1xuICB0b3BIZWlnaHQ6IDEwLFxuICAvKiogVGhlIHdpZHRoIG9mIHRoZSByaWdodCBjb2x1bW4uICovXG4gIHJpZ2h0V2lkdGg6IDEwLFxuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgYm90dG9tIHJvdy4gKi9cbiAgYm90dG9tSGVpZ2h0OiAxMCxcbiAgLyoqIFRoZSBvcmlnaW5hbCB3aWR0aCBvZiB0aGUgdGV4dHVyZSAqL1xuICBvcmlnaW5hbFdpZHRoOiAxMDAsXG4gIC8qKiBUaGUgb3JpZ2luYWwgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlICovXG4gIG9yaWdpbmFsSGVpZ2h0OiAxMDBcbn07XG5sZXQgTmluZVNsaWNlR2VvbWV0cnkgPSBfTmluZVNsaWNlR2VvbWV0cnk7XG5cbmV4cG9ydCB7IE5pbmVTbGljZUdlb21ldHJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OaW5lU2xpY2VHZW9tZXRyeS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBCaWdQb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9vbC9Qb29sR3JvdXAubWpzJztcbmltcG9ydCB7IEJhdGNoYWJsZU1lc2ggfSBmcm9tICcuLi9tZXNoL3NoYXJlZC9CYXRjaGFibGVNZXNoLm1qcyc7XG5pbXBvcnQgeyBOaW5lU2xpY2VHZW9tZXRyeSB9IGZyb20gJy4vTmluZVNsaWNlR2VvbWV0cnkubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBOaW5lU2xpY2VTcHJpdGVQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9ncHVTcHJpdGVIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCA9IHRoaXMuZGVzdHJveVJlbmRlcmFibGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIGFkZFJlbmRlcmFibGUoc3ByaXRlLCBpbnN0cnVjdGlvblNldCkge1xuICAgIGNvbnN0IGdwdVNwcml0ZSA9IHRoaXMuX2dldEdwdVNwcml0ZShzcHJpdGUpO1xuICAgIGlmIChzcHJpdGUuX2RpZFNwcml0ZVVwZGF0ZSlcbiAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZVNwcml0ZShzcHJpdGUsIGdwdVNwcml0ZSk7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYWRkVG9CYXRjaChncHVTcHJpdGUsIGluc3RydWN0aW9uU2V0KTtcbiAgfVxuICB1cGRhdGVSZW5kZXJhYmxlKHNwcml0ZSkge1xuICAgIGNvbnN0IGdwdVNwcml0ZSA9IHRoaXMuX2dwdVNwcml0ZUhhc2hbc3ByaXRlLnVpZF07XG4gICAgaWYgKHNwcml0ZS5fZGlkU3ByaXRlVXBkYXRlKVxuICAgICAgdGhpcy5fdXBkYXRlQmF0Y2hhYmxlU3ByaXRlKHNwcml0ZSwgZ3B1U3ByaXRlKTtcbiAgICBncHVTcHJpdGUuX2JhdGNoZXIudXBkYXRlRWxlbWVudChncHVTcHJpdGUpO1xuICB9XG4gIHZhbGlkYXRlUmVuZGVyYWJsZShzcHJpdGUpIHtcbiAgICBjb25zdCB0ZXh0dXJlID0gc3ByaXRlLl90ZXh0dXJlO1xuICAgIGNvbnN0IGdwdVNwcml0ZSA9IHRoaXMuX2dldEdwdVNwcml0ZShzcHJpdGUpO1xuICAgIGlmIChncHVTcHJpdGUudGV4dHVyZS5fc291cmNlICE9PSB0ZXh0dXJlLl9zb3VyY2UpIHtcbiAgICAgIHJldHVybiAhZ3B1U3ByaXRlLl9iYXRjaGVyLmNoZWNrQW5kVXBkYXRlVGV4dHVyZShncHVTcHJpdGUsIHRleHR1cmUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZGVzdHJveVJlbmRlcmFibGUoc3ByaXRlKSB7XG4gICAgY29uc3QgYmF0Y2hhYmxlTWVzaCA9IHRoaXMuX2dwdVNwcml0ZUhhc2hbc3ByaXRlLnVpZF07XG4gICAgQmlnUG9vbC5yZXR1cm4oYmF0Y2hhYmxlTWVzaC5nZW9tZXRyeSk7XG4gICAgQmlnUG9vbC5yZXR1cm4oYmF0Y2hhYmxlTWVzaCk7XG4gICAgdGhpcy5fZ3B1U3ByaXRlSGFzaFtzcHJpdGUudWlkXSA9IG51bGw7XG4gICAgc3ByaXRlLm9mZihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgfVxuICBfdXBkYXRlQmF0Y2hhYmxlU3ByaXRlKHNwcml0ZSwgYmF0Y2hhYmxlU3ByaXRlKSB7XG4gICAgc3ByaXRlLl9kaWRTcHJpdGVVcGRhdGUgPSBmYWxzZTtcbiAgICBiYXRjaGFibGVTcHJpdGUuZ2VvbWV0cnkudXBkYXRlKHNwcml0ZSk7XG4gICAgYmF0Y2hhYmxlU3ByaXRlLnRleHR1cmUgPSBzcHJpdGUuX3RleHR1cmU7XG4gIH1cbiAgX2dldEdwdVNwcml0ZShzcHJpdGUpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3B1U3ByaXRlSGFzaFtzcHJpdGUudWlkXSB8fCB0aGlzLl9pbml0R1BVU3ByaXRlKHNwcml0ZSk7XG4gIH1cbiAgX2luaXRHUFVTcHJpdGUoc3ByaXRlKSB7XG4gICAgY29uc3QgYmF0Y2hhYmxlTWVzaCA9IEJpZ1Bvb2wuZ2V0KEJhdGNoYWJsZU1lc2gpO1xuICAgIGJhdGNoYWJsZU1lc2guZ2VvbWV0cnkgPSBCaWdQb29sLmdldChOaW5lU2xpY2VHZW9tZXRyeSk7XG4gICAgYmF0Y2hhYmxlTWVzaC5yZW5kZXJhYmxlID0gc3ByaXRlO1xuICAgIGJhdGNoYWJsZU1lc2gudHJhbnNmb3JtID0gc3ByaXRlLmdyb3VwVHJhbnNmb3JtO1xuICAgIGJhdGNoYWJsZU1lc2gudGV4dHVyZSA9IHNwcml0ZS5fdGV4dHVyZTtcbiAgICBiYXRjaGFibGVNZXNoLnJvdW5kUGl4ZWxzID0gdGhpcy5fcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgc3ByaXRlLl9yb3VuZFBpeGVscztcbiAgICBzcHJpdGUuX2RpZFNwcml0ZVVwZGF0ZSA9IHRydWU7XG4gICAgdGhpcy5fZ3B1U3ByaXRlSGFzaFtzcHJpdGUudWlkXSA9IGJhdGNoYWJsZU1lc2g7XG4gICAgc3ByaXRlLm9uKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIHJldHVybiBiYXRjaGFibGVNZXNoO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dwdVNwcml0ZUhhc2gpIHtcbiAgICAgIGNvbnN0IGJhdGNoYWJsZU1lc2ggPSB0aGlzLl9ncHVTcHJpdGVIYXNoW2ldO1xuICAgICAgYmF0Y2hhYmxlTWVzaC5nZW9tZXRyeS5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuX2dwdVNwcml0ZUhhc2ggPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbk5pbmVTbGljZVNwcml0ZVBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcIm5pbmVTbGljZVNwcml0ZVwiXG59O1xuXG5leHBvcnQgeyBOaW5lU2xpY2VTcHJpdGVQaXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OaW5lU2xpY2VTcHJpdGVQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IE5pbmVTbGljZVNwcml0ZVBpcGUgfSBmcm9tICcuL05pbmVTbGljZVNwcml0ZVBpcGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChOaW5lU2xpY2VTcHJpdGVQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0aWxpbmdCaXQgPSB7XG4gIG5hbWU6IFwidGlsaW5nLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHN0cnVjdCBUaWxpbmdVbmlmb3JtcyB7XG4gICAgICAgICAgICAgICAgdU1hcENvb3JkOm1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVDbGFtcEZyYW1lOnZlYzQ8ZjMyPixcbiAgICAgICAgICAgICAgICB1Q2xhbXBPZmZzZXQ6dmVjMjxmMzI+LFxuICAgICAgICAgICAgICAgIHVUZXh0dXJlVHJhbnNmb3JtOm1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVTaXplQW5jaG9yOnZlYzQ8ZjMyPlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgQGdyb3VwKDIpIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiB0aWxpbmdVbmlmb3JtczogVGlsaW5nVW5pZm9ybXM7XG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMSkgdmFyIHVUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMikgdmFyIHVTYW1wbGVyOiBzYW1wbGVyO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICB1diA9ICh0aWxpbmdVbmlmb3Jtcy51VGV4dHVyZVRyYW5zZm9ybSAqIHZlYzModXYsIDEuMCkpLnh5O1xuXG4gICAgICAgICAgICBwb3NpdGlvbiA9IChwb3NpdGlvbiAtIHRpbGluZ1VuaWZvcm1zLnVTaXplQW5jaG9yLnp3KSAqIHRpbGluZ1VuaWZvcm1zLnVTaXplQW5jaG9yLnh5O1xuICAgICAgICBgXG4gICAgKVxuICB9LFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgc3RydWN0IFRpbGluZ1VuaWZvcm1zIHtcbiAgICAgICAgICAgICAgICB1TWFwQ29vcmQ6bWF0M3gzPGYzMj4sXG4gICAgICAgICAgICAgICAgdUNsYW1wRnJhbWU6dmVjNDxmMzI+LFxuICAgICAgICAgICAgICAgIHVDbGFtcE9mZnNldDp2ZWMyPGYzMj4sXG4gICAgICAgICAgICAgICAgdVRleHR1cmVUcmFuc2Zvcm06bWF0M3gzPGYzMj4sXG4gICAgICAgICAgICAgICAgdVNpemVBbmNob3I6dmVjNDxmMzI+XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IHRpbGluZ1VuaWZvcm1zOiBUaWxpbmdVbmlmb3JtcztcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygxKSB2YXIgdVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygyKSB2YXIgdVNhbXBsZXI6IHNhbXBsZXI7XG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcblxuICAgICAgICAgICAgdmFyIGNvb3JkID0gdlVWICsgY2VpbCh0aWxpbmdVbmlmb3Jtcy51Q2xhbXBPZmZzZXQgLSB2VVYpO1xuICAgICAgICAgICAgY29vcmQgPSAodGlsaW5nVW5pZm9ybXMudU1hcENvb3JkICogdmVjMyhjb29yZCwgMS4wKSkueHk7XG4gICAgICAgICAgICB2YXIgdW5jbGFtcGVkID0gY29vcmQ7XG4gICAgICAgICAgICBjb29yZCA9IGNsYW1wKGNvb3JkLCB0aWxpbmdVbmlmb3Jtcy51Q2xhbXBGcmFtZS54eSwgdGlsaW5nVW5pZm9ybXMudUNsYW1wRnJhbWUuencpO1xuXG4gICAgICAgICAgICB2YXIgYmlhcyA9IDAuO1xuXG4gICAgICAgICAgICBpZih1bmNsYW1wZWQueCA9PSBjb29yZC54ICYmIHVuY2xhbXBlZC55ID09IGNvb3JkLnkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmlhcyA9IC0zMi47XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICBvdXRDb2xvciA9IHRleHR1cmVTYW1wbGVCaWFzKHVUZXh0dXJlLCB1U2FtcGxlciwgY29vcmQsIGJpYXMpO1xuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuY29uc3QgdGlsaW5nQml0R2wgPSB7XG4gIG5hbWU6IFwidGlsaW5nLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHVuaWZvcm0gbWF0MyB1VGV4dHVyZVRyYW5zZm9ybTtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjNCB1U2l6ZUFuY2hvcjtcbiAgICAgICAgXG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHV2ID0gKHVUZXh0dXJlVHJhbnNmb3JtICogdmVjMyhhVVYsIDEuMCkpLnh5O1xuXG4gICAgICAgICAgICBwb3NpdGlvbiA9IChwb3NpdGlvbiAtIHVTaXplQW5jaG9yLnp3KSAqIHVTaXplQW5jaG9yLnh5O1xuICAgICAgICBgXG4gICAgKVxuICB9LFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XG4gICAgICAgICAgICB1bmlmb3JtIG1hdDMgdU1hcENvb3JkO1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWM0IHVDbGFtcEZyYW1lO1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWMyIHVDbGFtcE9mZnNldDtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuXG4gICAgICAgIHZlYzIgY29vcmQgPSB2VVYgKyBjZWlsKHVDbGFtcE9mZnNldCAtIHZVVik7XG4gICAgICAgIGNvb3JkID0gKHVNYXBDb29yZCAqIHZlYzMoY29vcmQsIDEuMCkpLnh5O1xuICAgICAgICB2ZWMyIHVuY2xhbXBlZCA9IGNvb3JkO1xuICAgICAgICBjb29yZCA9IGNsYW1wKGNvb3JkLCB1Q2xhbXBGcmFtZS54eSwgdUNsYW1wRnJhbWUuencpO1xuICAgICAgICBcbiAgICAgICAgb3V0Q29sb3IgPSB0ZXh0dXJlKHVUZXh0dXJlLCBjb29yZCwgdW5jbGFtcGVkID09IGNvb3JkID8gMC4wIDogLTMyLjApOy8vIGxvZC1iaWFzIHZlcnkgbmVnYXRpdmUgdG8gZm9yY2UgbG9kIDBcbiAgICBcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcblxuZXhwb3J0IHsgdGlsaW5nQml0LCB0aWxpbmdCaXRHbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGlsaW5nQml0Lm1qcy5tYXBcbiIsImltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGNvbXBpbGVIaWdoU2hhZGVyR3B1UHJvZ3JhbSwgY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0gfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGxvY2FsVW5pZm9ybUJpdCwgbG9jYWxVbmlmb3JtQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvbG9jYWxVbmlmb3JtQml0Lm1qcyc7XG5pbXBvcnQgeyByb3VuZFBpeGVsc0JpdCwgcm91bmRQaXhlbHNCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9yb3VuZFBpeGVsc0JpdC5tanMnO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1NoYWRlci5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgdGlsaW5nQml0LCB0aWxpbmdCaXRHbCB9IGZyb20gJy4vdGlsaW5nQml0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xubGV0IGdwdVByb2dyYW07XG5sZXQgZ2xQcm9ncmFtO1xuY2xhc3MgVGlsaW5nU3ByaXRlU2hhZGVyIGV4dGVuZHMgU2hhZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgZ3B1UHJvZ3JhbSA/PyAoZ3B1UHJvZ3JhbSA9IGNvbXBpbGVIaWdoU2hhZGVyR3B1UHJvZ3JhbSh7XG4gICAgICBuYW1lOiBcInRpbGluZy1zcHJpdGUtc2hhZGVyXCIsXG4gICAgICBiaXRzOiBbXG4gICAgICAgIGxvY2FsVW5pZm9ybUJpdCxcbiAgICAgICAgdGlsaW5nQml0LFxuICAgICAgICByb3VuZFBpeGVsc0JpdFxuICAgICAgXVxuICAgIH0pKTtcbiAgICBnbFByb2dyYW0gPz8gKGdsUHJvZ3JhbSA9IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwidGlsaW5nLXNwcml0ZS1zaGFkZXJcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgbG9jYWxVbmlmb3JtQml0R2wsXG4gICAgICAgIHRpbGluZ0JpdEdsLFxuICAgICAgICByb3VuZFBpeGVsc0JpdEdsXG4gICAgICBdXG4gICAgfSkpO1xuICAgIGNvbnN0IHRpbGluZ1VuaWZvcm1zID0gbmV3IFVuaWZvcm1Hcm91cCh7XG4gICAgICB1TWFwQ29vcmQ6IHsgdmFsdWU6IG5ldyBNYXRyaXgoKSwgdHlwZTogXCJtYXQzeDM8ZjMyPlwiIH0sXG4gICAgICB1Q2xhbXBGcmFtZTogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMSwgMV0pLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1Q2xhbXBPZmZzZXQ6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDBdKSwgdHlwZTogXCJ2ZWMyPGYzMj5cIiB9LFxuICAgICAgdVRleHR1cmVUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgoKSwgdHlwZTogXCJtYXQzeDM8ZjMyPlwiIH0sXG4gICAgICB1U2l6ZUFuY2hvcjogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMTAwLCAxMDAsIDAuNSwgMC41XSksIHR5cGU6IFwidmVjNDxmMzI+XCIgfVxuICAgIH0pO1xuICAgIHN1cGVyKHtcbiAgICAgIGdsUHJvZ3JhbSxcbiAgICAgIGdwdVByb2dyYW0sXG4gICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgbG9jYWxVbmlmb3JtczogbmV3IFVuaWZvcm1Hcm91cCh7XG4gICAgICAgICAgdVRyYW5zZm9ybU1hdHJpeDogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgICAgICB1Q29sb3I6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIDEsIDFdKSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgICAgIHVSb3VuZDogeyB2YWx1ZTogMCwgdHlwZTogXCJmMzJcIiB9XG4gICAgICAgIH0pLFxuICAgICAgICB0aWxpbmdVbmlmb3JtcyxcbiAgICAgICAgdVRleHR1cmU6IFRleHR1cmUuRU1QVFkuc291cmNlLFxuICAgICAgICB1U2FtcGxlcjogVGV4dHVyZS5FTVBUWS5zb3VyY2Uuc3R5bGVcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICB1cGRhdGVVbmlmb3Jtcyh3aWR0aCwgaGVpZ2h0LCBtYXRyaXgsIGFuY2hvclgsIGFuY2hvclksIHRleHR1cmUpIHtcbiAgICBjb25zdCB0aWxpbmdVbmlmb3JtcyA9IHRoaXMucmVzb3VyY2VzLnRpbGluZ1VuaWZvcm1zO1xuICAgIGNvbnN0IHRleHR1cmVXaWR0aCA9IHRleHR1cmUud2lkdGg7XG4gICAgY29uc3QgdGV4dHVyZUhlaWdodCA9IHRleHR1cmUuaGVpZ2h0O1xuICAgIGNvbnN0IHRleHR1cmVNYXRyaXggPSB0ZXh0dXJlLnRleHR1cmVNYXRyaXg7XG4gICAgY29uc3QgdVRleHR1cmVUcmFuc2Zvcm0gPSB0aWxpbmdVbmlmb3Jtcy51bmlmb3Jtcy51VGV4dHVyZVRyYW5zZm9ybTtcbiAgICB1VGV4dHVyZVRyYW5zZm9ybS5zZXQoXG4gICAgICBtYXRyaXguYSAqIHRleHR1cmVXaWR0aCAvIHdpZHRoLFxuICAgICAgbWF0cml4LmIgKiB0ZXh0dXJlV2lkdGggLyBoZWlnaHQsXG4gICAgICBtYXRyaXguYyAqIHRleHR1cmVIZWlnaHQgLyB3aWR0aCxcbiAgICAgIG1hdHJpeC5kICogdGV4dHVyZUhlaWdodCAvIGhlaWdodCxcbiAgICAgIG1hdHJpeC50eCAvIHdpZHRoLFxuICAgICAgbWF0cml4LnR5IC8gaGVpZ2h0XG4gICAgKTtcbiAgICB1VGV4dHVyZVRyYW5zZm9ybS5pbnZlcnQoKTtcbiAgICB0aWxpbmdVbmlmb3Jtcy51bmlmb3Jtcy51TWFwQ29vcmQgPSB0ZXh0dXJlTWF0cml4Lm1hcENvb3JkO1xuICAgIHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVDbGFtcEZyYW1lID0gdGV4dHVyZU1hdHJpeC51Q2xhbXBGcmFtZTtcbiAgICB0aWxpbmdVbmlmb3Jtcy51bmlmb3Jtcy51Q2xhbXBPZmZzZXQgPSB0ZXh0dXJlTWF0cml4LnVDbGFtcE9mZnNldDtcbiAgICB0aWxpbmdVbmlmb3Jtcy51bmlmb3Jtcy51VGV4dHVyZVRyYW5zZm9ybSA9IHVUZXh0dXJlVHJhbnNmb3JtO1xuICAgIHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVTaXplQW5jaG9yWzBdID0gd2lkdGg7XG4gICAgdGlsaW5nVW5pZm9ybXMudW5pZm9ybXMudVNpemVBbmNob3JbMV0gPSBoZWlnaHQ7XG4gICAgdGlsaW5nVW5pZm9ybXMudW5pZm9ybXMudVNpemVBbmNob3JbMl0gPSBhbmNob3JYO1xuICAgIHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVTaXplQW5jaG9yWzNdID0gYW5jaG9yWTtcbiAgICBpZiAodGV4dHVyZSkge1xuICAgICAgdGhpcy5yZXNvdXJjZXMudVRleHR1cmUgPSB0ZXh0dXJlLnNvdXJjZTtcbiAgICAgIHRoaXMucmVzb3VyY2VzLnVTYW1wbGVyID0gdGV4dHVyZS5zb3VyY2Uuc3R5bGU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFRpbGluZ1Nwcml0ZVNoYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGlsaW5nU3ByaXRlU2hhZGVyLm1qcy5tYXBcbiIsImltcG9ydCB7IE1lc2hHZW9tZXRyeSB9IGZyb20gJy4uLy4uL21lc2gvc2hhcmVkL01lc2hHZW9tZXRyeS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIFF1YWRHZW9tZXRyeSBleHRlbmRzIE1lc2hHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIHBvc2l0aW9uczogbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMSwgMCwgMSwgMSwgMCwgMV0pLFxuICAgICAgdXZzOiBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAxLCAwLCAxLCAxLCAwLCAxXSksXG4gICAgICBpbmRpY2VzOiBuZXcgVWludDMyQXJyYXkoWzAsIDEsIDIsIDAsIDIsIDNdKVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IFF1YWRHZW9tZXRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVhZEdlb21ldHJ5Lm1qcy5tYXBcbiIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IGdldEFkanVzdGVkQmxlbmRNb2RlQmxlbmQgfSBmcm9tICcuLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zdGF0ZS9nZXRBZGp1c3RlZEJsZW5kTW9kZUJsZW5kLm1qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL1N0YXRlLm1qcyc7XG5pbXBvcnQgeyBSZW5kZXJlclR5cGUgfSBmcm9tICcuLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBjb2xvcjMyQml0VG9Vbmlmb3JtIH0gZnJvbSAnLi4vZ3JhcGhpY3MvZ3B1L2NvbG9yVG9Vbmlmb3JtLm1qcyc7XG5pbXBvcnQgeyBCYXRjaGFibGVNZXNoIH0gZnJvbSAnLi4vbWVzaC9zaGFyZWQvQmF0Y2hhYmxlTWVzaC5tanMnO1xuaW1wb3J0IHsgTWVzaEdlb21ldHJ5IH0gZnJvbSAnLi4vbWVzaC9zaGFyZWQvTWVzaEdlb21ldHJ5Lm1qcyc7XG5pbXBvcnQgeyBUaWxpbmdTcHJpdGVTaGFkZXIgfSBmcm9tICcuL3NoYWRlci9UaWxpbmdTcHJpdGVTaGFkZXIubWpzJztcbmltcG9ydCB7IFF1YWRHZW9tZXRyeSB9IGZyb20gJy4vdXRpbHMvUXVhZEdlb21ldHJ5Lm1qcyc7XG5pbXBvcnQgeyBzZXRQb3NpdGlvbnMgfSBmcm9tICcuL3V0aWxzL3NldFBvc2l0aW9ucy5tanMnO1xuaW1wb3J0IHsgc2V0VXZzIH0gZnJvbSAnLi91dGlscy9zZXRVdnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBzaGFyZWRRdWFkID0gbmV3IFF1YWRHZW9tZXRyeSgpO1xuY2xhc3MgVGlsaW5nU3ByaXRlUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fc3RhdGUgPSBTdGF0ZS5kZWZhdWx0MmQ7XG4gICAgdGhpcy5fdGlsaW5nU3ByaXRlRGF0YUhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kID0gdGhpcy5kZXN0cm95UmVuZGVyYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKHJlbmRlcmFibGUpIHtcbiAgICBjb25zdCB0aWxpbmdTcHJpdGVEYXRhID0gdGhpcy5fZ2V0VGlsaW5nU3ByaXRlRGF0YShyZW5kZXJhYmxlKTtcbiAgICBjb25zdCBjb3VsZEJhdGNoID0gdGlsaW5nU3ByaXRlRGF0YS5jYW5CYXRjaDtcbiAgICB0aGlzLl91cGRhdGVDYW5CYXRjaChyZW5kZXJhYmxlKTtcbiAgICBjb25zdCBjYW5CYXRjaCA9IHRpbGluZ1Nwcml0ZURhdGEuY2FuQmF0Y2g7XG4gICAgaWYgKGNhbkJhdGNoICYmIGNhbkJhdGNoID09PSBjb3VsZEJhdGNoKSB7XG4gICAgICBjb25zdCB7IGJhdGNoYWJsZU1lc2ggfSA9IHRpbGluZ1Nwcml0ZURhdGE7XG4gICAgICBpZiAoYmF0Y2hhYmxlTWVzaCAmJiBiYXRjaGFibGVNZXNoLnRleHR1cmUuX3NvdXJjZSAhPT0gcmVuZGVyYWJsZS50ZXh0dXJlLl9zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICFiYXRjaGFibGVNZXNoLl9iYXRjaGVyLmNoZWNrQW5kVXBkYXRlVGV4dHVyZShiYXRjaGFibGVNZXNoLCByZW5kZXJhYmxlLnRleHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY291bGRCYXRjaCAhPT0gY2FuQmF0Y2g7XG4gIH1cbiAgYWRkUmVuZGVyYWJsZSh0aWxpbmdTcHJpdGUsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgYmF0Y2hlciA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoO1xuICAgIHRoaXMuX3VwZGF0ZUNhbkJhdGNoKHRpbGluZ1Nwcml0ZSk7XG4gICAgY29uc3QgdGlsaW5nU3ByaXRlRGF0YSA9IHRoaXMuX2dldFRpbGluZ1Nwcml0ZURhdGEodGlsaW5nU3ByaXRlKTtcbiAgICBjb25zdCB7IGdlb21ldHJ5LCBjYW5CYXRjaCB9ID0gdGlsaW5nU3ByaXRlRGF0YTtcbiAgICBpZiAoY2FuQmF0Y2gpIHtcbiAgICAgIHRpbGluZ1Nwcml0ZURhdGEuYmF0Y2hhYmxlTWVzaCB8fCAodGlsaW5nU3ByaXRlRGF0YS5iYXRjaGFibGVNZXNoID0gbmV3IEJhdGNoYWJsZU1lc2goKSk7XG4gICAgICBjb25zdCBiYXRjaGFibGVNZXNoID0gdGlsaW5nU3ByaXRlRGF0YS5iYXRjaGFibGVNZXNoO1xuICAgICAgaWYgKHRpbGluZ1Nwcml0ZS5fZGlkVGlsaW5nU3ByaXRlVXBkYXRlKSB7XG4gICAgICAgIHRpbGluZ1Nwcml0ZS5fZGlkVGlsaW5nU3ByaXRlVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZU1lc2godGlsaW5nU3ByaXRlKTtcbiAgICAgICAgYmF0Y2hhYmxlTWVzaC5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICBiYXRjaGFibGVNZXNoLnJlbmRlcmFibGUgPSB0aWxpbmdTcHJpdGU7XG4gICAgICAgIGJhdGNoYWJsZU1lc2gudHJhbnNmb3JtID0gdGlsaW5nU3ByaXRlLmdyb3VwVHJhbnNmb3JtO1xuICAgICAgICBiYXRjaGFibGVNZXNoLnRleHR1cmUgPSB0aWxpbmdTcHJpdGUuX3RleHR1cmU7XG4gICAgICB9XG4gICAgICBiYXRjaGFibGVNZXNoLnJvdW5kUGl4ZWxzID0gdGhpcy5fcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgdGlsaW5nU3ByaXRlLl9yb3VuZFBpeGVscztcbiAgICAgIGJhdGNoZXIuYWRkVG9CYXRjaChiYXRjaGFibGVNZXNoLCBpbnN0cnVjdGlvblNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhdGNoZXIuYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgICAgdGlsaW5nU3ByaXRlRGF0YS5zaGFkZXIgfHwgKHRpbGluZ1Nwcml0ZURhdGEuc2hhZGVyID0gbmV3IFRpbGluZ1Nwcml0ZVNoYWRlcigpKTtcbiAgICAgIHRoaXMudXBkYXRlUmVuZGVyYWJsZSh0aWxpbmdTcHJpdGUpO1xuICAgICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKHRpbGluZ1Nwcml0ZSk7XG4gICAgfVxuICB9XG4gIGV4ZWN1dGUodGlsaW5nU3ByaXRlKSB7XG4gICAgY29uc3QgeyBzaGFkZXIgfSA9IHRoaXMuX3RpbGluZ1Nwcml0ZURhdGFIYXNoW3RpbGluZ1Nwcml0ZS51aWRdO1xuICAgIHNoYWRlci5ncm91cHNbMF0gPSB0aGlzLl9yZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5iaW5kR3JvdXA7XG4gICAgY29uc3QgbG9jYWxVbmlmb3JtcyA9IHNoYWRlci5yZXNvdXJjZXMubG9jYWxVbmlmb3Jtcy51bmlmb3JtcztcbiAgICBsb2NhbFVuaWZvcm1zLnVUcmFuc2Zvcm1NYXRyaXggPSB0aWxpbmdTcHJpdGUuZ3JvdXBUcmFuc2Zvcm07XG4gICAgbG9jYWxVbmlmb3Jtcy51Um91bmQgPSB0aGlzLl9yZW5kZXJlci5fcm91bmRQaXhlbHMgfCB0aWxpbmdTcHJpdGUuX3JvdW5kUGl4ZWxzO1xuICAgIGNvbG9yMzJCaXRUb1VuaWZvcm0oXG4gICAgICB0aWxpbmdTcHJpdGUuZ3JvdXBDb2xvckFscGhhLFxuICAgICAgbG9jYWxVbmlmb3Jtcy51Q29sb3IsXG4gICAgICAwXG4gICAgKTtcbiAgICB0aGlzLl9zdGF0ZS5ibGVuZE1vZGUgPSBnZXRBZGp1c3RlZEJsZW5kTW9kZUJsZW5kKHRpbGluZ1Nwcml0ZS5ncm91cEJsZW5kTW9kZSwgdGlsaW5nU3ByaXRlLnRleHR1cmUuX3NvdXJjZSk7XG4gICAgdGhpcy5fcmVuZGVyZXIuZW5jb2Rlci5kcmF3KHtcbiAgICAgIGdlb21ldHJ5OiBzaGFyZWRRdWFkLFxuICAgICAgc2hhZGVyLFxuICAgICAgc3RhdGU6IHRoaXMuX3N0YXRlXG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZSh0aWxpbmdTcHJpdGUpIHtcbiAgICBjb25zdCB0aWxpbmdTcHJpdGVEYXRhID0gdGhpcy5fZ2V0VGlsaW5nU3ByaXRlRGF0YSh0aWxpbmdTcHJpdGUpO1xuICAgIGNvbnN0IHsgY2FuQmF0Y2ggfSA9IHRpbGluZ1Nwcml0ZURhdGE7XG4gICAgaWYgKGNhbkJhdGNoKSB7XG4gICAgICBjb25zdCB7IGJhdGNoYWJsZU1lc2ggfSA9IHRpbGluZ1Nwcml0ZURhdGE7XG4gICAgICBpZiAodGlsaW5nU3ByaXRlLl9kaWRUaWxpbmdTcHJpdGVVcGRhdGUpXG4gICAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZU1lc2godGlsaW5nU3ByaXRlKTtcbiAgICAgIGJhdGNoYWJsZU1lc2guX2JhdGNoZXIudXBkYXRlRWxlbWVudChiYXRjaGFibGVNZXNoKTtcbiAgICB9IGVsc2UgaWYgKHRpbGluZ1Nwcml0ZS5fZGlkVGlsaW5nU3ByaXRlVXBkYXRlKSB7XG4gICAgICBjb25zdCB7IHNoYWRlciB9ID0gdGlsaW5nU3ByaXRlRGF0YTtcbiAgICAgIHNoYWRlci51cGRhdGVVbmlmb3JtcyhcbiAgICAgICAgdGlsaW5nU3ByaXRlLndpZHRoLFxuICAgICAgICB0aWxpbmdTcHJpdGUuaGVpZ2h0LFxuICAgICAgICB0aWxpbmdTcHJpdGUuX3RpbGVUcmFuc2Zvcm0ubWF0cml4LFxuICAgICAgICB0aWxpbmdTcHJpdGUuYW5jaG9yLngsXG4gICAgICAgIHRpbGluZ1Nwcml0ZS5hbmNob3IueSxcbiAgICAgICAgdGlsaW5nU3ByaXRlLnRleHR1cmVcbiAgICAgICk7XG4gICAgfVxuICAgIHRpbGluZ1Nwcml0ZS5fZGlkVGlsaW5nU3ByaXRlVXBkYXRlID0gZmFsc2U7XG4gIH1cbiAgZGVzdHJveVJlbmRlcmFibGUodGlsaW5nU3ByaXRlKSB7XG4gICAgY29uc3QgdGlsaW5nU3ByaXRlRGF0YSA9IHRoaXMuX2dldFRpbGluZ1Nwcml0ZURhdGEodGlsaW5nU3ByaXRlKTtcbiAgICB0aWxpbmdTcHJpdGVEYXRhLmJhdGNoYWJsZU1lc2ggPSBudWxsO1xuICAgIHRpbGluZ1Nwcml0ZURhdGEuc2hhZGVyPy5kZXN0cm95KCk7XG4gICAgdGhpcy5fdGlsaW5nU3ByaXRlRGF0YUhhc2hbdGlsaW5nU3ByaXRlLnVpZF0gPSBudWxsO1xuICAgIHRpbGluZ1Nwcml0ZS5vZmYoXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gIH1cbiAgX2dldFRpbGluZ1Nwcml0ZURhdGEocmVuZGVyYWJsZSkge1xuICAgIHJldHVybiB0aGlzLl90aWxpbmdTcHJpdGVEYXRhSGFzaFtyZW5kZXJhYmxlLnVpZF0gfHwgdGhpcy5faW5pdFRpbGluZ1Nwcml0ZURhdGEocmVuZGVyYWJsZSk7XG4gIH1cbiAgX2luaXRUaWxpbmdTcHJpdGVEYXRhKHRpbGluZ1Nwcml0ZSkge1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IE1lc2hHZW9tZXRyeSh7XG4gICAgICBpbmRpY2VzOiBzaGFyZWRRdWFkLmluZGljZXMsXG4gICAgICBwb3NpdGlvbnM6IHNoYXJlZFF1YWQucG9zaXRpb25zLnNsaWNlKCksXG4gICAgICB1dnM6IHNoYXJlZFF1YWQudXZzLnNsaWNlKClcbiAgICB9KTtcbiAgICB0aGlzLl90aWxpbmdTcHJpdGVEYXRhSGFzaFt0aWxpbmdTcHJpdGUudWlkXSA9IHtcbiAgICAgIGNhbkJhdGNoOiB0cnVlLFxuICAgICAgcmVuZGVyYWJsZTogdGlsaW5nU3ByaXRlLFxuICAgICAgZ2VvbWV0cnlcbiAgICB9O1xuICAgIHRpbGluZ1Nwcml0ZS5vbihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgICByZXR1cm4gdGhpcy5fdGlsaW5nU3ByaXRlRGF0YUhhc2hbdGlsaW5nU3ByaXRlLnVpZF07XG4gIH1cbiAgX3VwZGF0ZUJhdGNoYWJsZU1lc2godGlsaW5nU3ByaXRlKSB7XG4gICAgY29uc3QgcmVuZGVyYWJsZURhdGEgPSB0aGlzLl9nZXRUaWxpbmdTcHJpdGVEYXRhKHRpbGluZ1Nwcml0ZSk7XG4gICAgY29uc3QgeyBnZW9tZXRyeSB9ID0gcmVuZGVyYWJsZURhdGE7XG4gICAgY29uc3Qgc3R5bGUgPSB0aWxpbmdTcHJpdGUudGV4dHVyZS5zb3VyY2Uuc3R5bGU7XG4gICAgaWYgKHN0eWxlLmFkZHJlc3NNb2RlICE9PSBcInJlcGVhdFwiKSB7XG4gICAgICBzdHlsZS5hZGRyZXNzTW9kZSA9IFwicmVwZWF0XCI7XG4gICAgICBzdHlsZS51cGRhdGUoKTtcbiAgICB9XG4gICAgc2V0VXZzKHRpbGluZ1Nwcml0ZSwgZ2VvbWV0cnkudXZzKTtcbiAgICBzZXRQb3NpdGlvbnModGlsaW5nU3ByaXRlLCBnZW9tZXRyeS5wb3NpdGlvbnMpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX3RpbGluZ1Nwcml0ZURhdGFIYXNoKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlKHRoaXMuX3RpbGluZ1Nwcml0ZURhdGFIYXNoW2ldLnJlbmRlcmFibGUpO1xuICAgIH1cbiAgICB0aGlzLl90aWxpbmdTcHJpdGVEYXRhSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG4gIF91cGRhdGVDYW5CYXRjaCh0aWxpbmdTcHJpdGUpIHtcbiAgICBjb25zdCByZW5kZXJhYmxlRGF0YSA9IHRoaXMuX2dldFRpbGluZ1Nwcml0ZURhdGEodGlsaW5nU3ByaXRlKTtcbiAgICBjb25zdCB0ZXh0dXJlID0gdGlsaW5nU3ByaXRlLnRleHR1cmU7XG4gICAgbGV0IF9ub25Qb3dPZjJ3cmFwcGluZyA9IHRydWU7XG4gICAgaWYgKHRoaXMuX3JlbmRlcmVyLnR5cGUgPT09IFJlbmRlcmVyVHlwZS5XRUJHTCkge1xuICAgICAgX25vblBvd09mMndyYXBwaW5nID0gdGhpcy5fcmVuZGVyZXIuY29udGV4dC5zdXBwb3J0cy5ub25Qb3dPZjJ3cmFwcGluZztcbiAgICB9XG4gICAgcmVuZGVyYWJsZURhdGEuY2FuQmF0Y2ggPSB0ZXh0dXJlLnRleHR1cmVNYXRyaXguaXNTaW1wbGUgJiYgKF9ub25Qb3dPZjJ3cmFwcGluZyB8fCB0ZXh0dXJlLnNvdXJjZS5pc1Bvd2VyT2ZUd28pO1xuICAgIHJldHVybiByZW5kZXJhYmxlRGF0YS5jYW5CYXRjaDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cblRpbGluZ1Nwcml0ZVBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcInRpbGluZ1Nwcml0ZVwiXG59O1xuXG5leHBvcnQgeyBUaWxpbmdTcHJpdGVQaXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaWxpbmdTcHJpdGVQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IGFwcGx5TWF0cml4IH0gZnJvbSAnLi9hcHBseU1hdHJpeC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHNldFV2cyh0aWxpbmdTcHJpdGUsIHV2cykge1xuICBjb25zdCB0ZXh0dXJlID0gdGlsaW5nU3ByaXRlLnRleHR1cmU7XG4gIGNvbnN0IHdpZHRoID0gdGV4dHVyZS5mcmFtZS53aWR0aDtcbiAgY29uc3QgaGVpZ2h0ID0gdGV4dHVyZS5mcmFtZS5oZWlnaHQ7XG4gIGxldCBhbmNob3JYID0gMDtcbiAgbGV0IGFuY2hvclkgPSAwO1xuICBpZiAodGlsaW5nU3ByaXRlLl9hcHBseUFuY2hvclRvVGV4dHVyZSkge1xuICAgIGFuY2hvclggPSB0aWxpbmdTcHJpdGUuYW5jaG9yLng7XG4gICAgYW5jaG9yWSA9IHRpbGluZ1Nwcml0ZS5hbmNob3IueTtcbiAgfVxuICB1dnNbMF0gPSB1dnNbNl0gPSAtYW5jaG9yWDtcbiAgdXZzWzJdID0gdXZzWzRdID0gMSAtIGFuY2hvclg7XG4gIHV2c1sxXSA9IHV2c1szXSA9IC1hbmNob3JZO1xuICB1dnNbNV0gPSB1dnNbN10gPSAxIC0gYW5jaG9yWTtcbiAgY29uc3QgdGV4dHVyZU1hdHJpeCA9IE1hdHJpeC5zaGFyZWQ7XG4gIHRleHR1cmVNYXRyaXguY29weUZyb20odGlsaW5nU3ByaXRlLl90aWxlVHJhbnNmb3JtLm1hdHJpeCk7XG4gIHRleHR1cmVNYXRyaXgudHggLz0gdGlsaW5nU3ByaXRlLndpZHRoO1xuICB0ZXh0dXJlTWF0cml4LnR5IC89IHRpbGluZ1Nwcml0ZS5oZWlnaHQ7XG4gIHRleHR1cmVNYXRyaXguaW52ZXJ0KCk7XG4gIHRleHR1cmVNYXRyaXguc2NhbGUodGlsaW5nU3ByaXRlLndpZHRoIC8gd2lkdGgsIHRpbGluZ1Nwcml0ZS5oZWlnaHQgLyBoZWlnaHQpO1xuICBhcHBseU1hdHJpeCh1dnMsIDIsIDAsIHRleHR1cmVNYXRyaXgpO1xufVxuXG5leHBvcnQgeyBzZXRVdnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFV2cy5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGFwcGx5TWF0cml4KGFycmF5LCBzdHJpZGUsIG9mZnNldCwgbWF0cml4KSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGNvbnN0IHNpemUgPSBhcnJheS5sZW5ndGggLyAoc3RyaWRlIHx8IDIpO1xuICBjb25zdCBhID0gbWF0cml4LmE7XG4gIGNvbnN0IGIgPSBtYXRyaXguYjtcbiAgY29uc3QgYyA9IG1hdHJpeC5jO1xuICBjb25zdCBkID0gbWF0cml4LmQ7XG4gIGNvbnN0IHR4ID0gbWF0cml4LnR4O1xuICBjb25zdCB0eSA9IG1hdHJpeC50eTtcbiAgb2Zmc2V0ICo9IHN0cmlkZTtcbiAgd2hpbGUgKGluZGV4IDwgc2l6ZSkge1xuICAgIGNvbnN0IHggPSBhcnJheVtvZmZzZXRdO1xuICAgIGNvbnN0IHkgPSBhcnJheVtvZmZzZXQgKyAxXTtcbiAgICBhcnJheVtvZmZzZXRdID0gYSAqIHggKyBjICogeSArIHR4O1xuICAgIGFycmF5W29mZnNldCArIDFdID0gYiAqIHggKyBkICogeSArIHR5O1xuICAgIG9mZnNldCArPSBzdHJpZGU7XG4gICAgaW5kZXgrKztcbiAgfVxufVxuXG5leHBvcnQgeyBhcHBseU1hdHJpeCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHlNYXRyaXgubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBzZXRQb3NpdGlvbnModGlsaW5nU3ByaXRlLCBwb3NpdGlvbnMpIHtcbiAgY29uc3QgYW5jaG9yWCA9IHRpbGluZ1Nwcml0ZS5hbmNob3IueDtcbiAgY29uc3QgYW5jaG9yWSA9IHRpbGluZ1Nwcml0ZS5hbmNob3IueTtcbiAgcG9zaXRpb25zWzBdID0gLWFuY2hvclggKiB0aWxpbmdTcHJpdGUud2lkdGg7XG4gIHBvc2l0aW9uc1sxXSA9IC1hbmNob3JZICogdGlsaW5nU3ByaXRlLmhlaWdodDtcbiAgcG9zaXRpb25zWzJdID0gKDEgLSBhbmNob3JYKSAqIHRpbGluZ1Nwcml0ZS53aWR0aDtcbiAgcG9zaXRpb25zWzNdID0gLWFuY2hvclkgKiB0aWxpbmdTcHJpdGUuaGVpZ2h0O1xuICBwb3NpdGlvbnNbNF0gPSAoMSAtIGFuY2hvclgpICogdGlsaW5nU3ByaXRlLndpZHRoO1xuICBwb3NpdGlvbnNbNV0gPSAoMSAtIGFuY2hvclkpICogdGlsaW5nU3ByaXRlLmhlaWdodDtcbiAgcG9zaXRpb25zWzZdID0gLWFuY2hvclggKiB0aWxpbmdTcHJpdGUud2lkdGg7XG4gIHBvc2l0aW9uc1s3XSA9ICgxIC0gYW5jaG9yWSkgKiB0aWxpbmdTcHJpdGUuaGVpZ2h0O1xufVxuXG5leHBvcnQgeyBzZXRQb3NpdGlvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFBvc2l0aW9ucy5tanMubWFwXG4iLCJpbXBvcnQgeyBleHRlbnNpb25zIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBUaWxpbmdTcHJpdGVQaXBlIH0gZnJvbSAnLi9UaWxpbmdTcHJpdGVQaXBlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZXh0ZW5zaW9ucy5hZGQoVGlsaW5nU3ByaXRlUGlwZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgQmF0Y2hhYmxlU3ByaXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iYXRjaGVyTmFtZSA9IFwiZGVmYXVsdFwiO1xuICAgIC8vIGJhdGNoIHNwZWNpZmljLi5cbiAgICB0aGlzLmF0dHJpYnV0ZVNpemUgPSA0O1xuICAgIHRoaXMuaW5kZXhTaXplID0gNjtcbiAgICB0aGlzLnBhY2tBc1F1YWQgPSB0cnVlO1xuICAgIHRoaXMucm91bmRQaXhlbHMgPSAwO1xuICAgIHRoaXMuX2F0dHJpYnV0ZVN0YXJ0ID0gMDtcbiAgICAvLyBsb2NhdGlvbiBpbiB0aGUgYnVmZmVyXG4gICAgdGhpcy5fYmF0Y2hlciA9IG51bGw7XG4gICAgdGhpcy5fYmF0Y2ggPSBudWxsO1xuICB9XG4gIGdldCBibGVuZE1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyYWJsZS5ncm91cEJsZW5kTW9kZTtcbiAgfVxuICBnZXQgY29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyYWJsZS5ncm91cENvbG9yQWxwaGE7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gbnVsbDtcbiAgICB0aGlzLnRleHR1cmUgPSBudWxsO1xuICAgIHRoaXMuX2JhdGNoZXIgPSBudWxsO1xuICAgIHRoaXMuX2JhdGNoID0gbnVsbDtcbiAgICB0aGlzLmJvdW5kcyA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmF0Y2hhYmxlU3ByaXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXRjaGFibGVTcHJpdGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVwcmVjYXRpb24sIHY4XzBfMCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvZGVwcmVjYXRpb24ubWpzJztcbmltcG9ydCB7IFZpZXdDb250YWluZXIgfSBmcm9tICcuLi8uLi92aWV3L1ZpZXcubWpzJztcbmltcG9ydCB7IEdyYXBoaWNzQ29udGV4dCB9IGZyb20gJy4vR3JhcGhpY3NDb250ZXh0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3JhcGhpY3MgZXh0ZW5kcyBWaWV3Q29udGFpbmVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIEdyYXBoaWNzLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2YgR3JhcGhpY3NDb250ZXh0KSB7XG4gICAgICBvcHRpb25zID0geyBjb250ZXh0OiBvcHRpb25zIH07XG4gICAgfVxuICAgIGNvbnN0IHsgY29udGV4dCwgcm91bmRQaXhlbHMsIC4uLnJlc3QgfSA9IG9wdGlvbnMgfHwge307XG4gICAgc3VwZXIoe1xuICAgICAgbGFiZWw6IFwiR3JhcGhpY3NcIixcbiAgICAgIC4uLnJlc3RcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlclBpcGVJZCA9IFwiZ3JhcGhpY3NcIjtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHRoaXMuX2NvbnRleHQgPSB0aGlzLl9vd25lZENvbnRleHQgPSBuZXcgR3JhcGhpY3NDb250ZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICB0aGlzLl9jb250ZXh0Lm9uKFwidXBkYXRlXCIsIHRoaXMub25WaWV3VXBkYXRlLCB0aGlzKTtcbiAgICB0aGlzLmFsbG93Q2hpbGRyZW4gPSBmYWxzZTtcbiAgICB0aGlzLnJvdW5kUGl4ZWxzID0gcm91bmRQaXhlbHMgPz8gZmFsc2U7XG4gIH1cbiAgc2V0IGNvbnRleHQoY29udGV4dCkge1xuICAgIGlmIChjb250ZXh0ID09PSB0aGlzLl9jb250ZXh0KVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2NvbnRleHQub2ZmKFwidXBkYXRlXCIsIHRoaXMub25WaWV3VXBkYXRlLCB0aGlzKTtcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLl9jb250ZXh0Lm9uKFwidXBkYXRlXCIsIHRoaXMub25WaWV3VXBkYXRlLCB0aGlzKTtcbiAgICB0aGlzLm9uVmlld1VwZGF0ZSgpO1xuICB9XG4gIGdldCBjb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZXh0O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgbG9jYWwgYm91bmRzIG9mIHRoZSBncmFwaGljLlxuICAgKiBAdHlwZSB7cmVuZGVyaW5nLkJvdW5kc31cbiAgICovXG4gIGdldCBib3VuZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuYm91bmRzO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIHRoZSBib3VuZHMgb2YgdGhpcyBvYmplY3QgdG8gdGhlIGJvdW5kcyBvYmplY3QuXG4gICAqIEBwYXJhbSBib3VuZHMgLSBUaGUgb3V0cHV0IGJvdW5kcyBvYmplY3QuXG4gICAqL1xuICBhZGRCb3VuZHMoYm91bmRzKSB7XG4gICAgYm91bmRzLmFkZEJvdW5kcyh0aGlzLl9jb250ZXh0LmJvdW5kcyk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludC5cbiAgICogQHBhcmFtIHBvaW50IC0gVGhlIHBvaW50IHRvIGNoZWNrXG4gICAqL1xuICBjb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuY29udGFpbnNQb2ludChwb2ludCk7XG4gIH1cbiAgb25WaWV3VXBkYXRlKCkge1xuICAgIHRoaXMuX2RpZFZpZXdDaGFuZ2VUaWNrKys7XG4gICAgdGhpcy5fZGlkR3JhcGhpY3NVcGRhdGUgPSB0cnVlO1xuICAgIGlmICh0aGlzLmRpZFZpZXdVcGRhdGUpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5kaWRWaWV3VXBkYXRlID0gdHJ1ZTtcbiAgICBjb25zdCByZW5kZXJHcm91cCA9IHRoaXMucmVuZGVyR3JvdXAgfHwgdGhpcy5wYXJlbnRSZW5kZXJHcm91cDtcbiAgICBpZiAocmVuZGVyR3JvdXApIHtcbiAgICAgIHJlbmRlckdyb3VwLm9uQ2hpbGRWaWV3VXBkYXRlKHRoaXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhpcyBncmFwaGljcyByZW5kZXJhYmxlIGFuZCBvcHRpb25hbGx5IGl0cyBjb250ZXh0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgcGFyYW1ldGVyLiBBIGJvb2xlYW4gd2lsbCBhY3QgYXMgaWYgYWxsIG9wdGlvbnNcbiAgICpcbiAgICogSWYgdGhlIGNvbnRleHQgd2FzIGNyZWF0ZWQgYnkgdGhpcyBncmFwaGljcyBhbmQgYGRlc3Ryb3koZmFsc2UpYCBvciBgZGVzdHJveSgpYCBpcyBjYWxsZWRcbiAgICogdGhlbiB0aGUgY29udGV4dCB3aWxsIHN0aWxsIGJlIGRlc3Ryb3llZC5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gZXhwbGljaXRseSBub3QgZGVzdHJveSB0aGlzIGNvbnRleHQgdGhhdCB0aGlzIGdyYXBoaWNzIGNyZWF0ZWQsXG4gICAqIHRoZW4geW91IHNob3VsZCBwYXNzIGRlc3Ryb3koeyBjb250ZXh0OiBmYWxzZSB9KVxuICAgKlxuICAgKiBJZiB0aGUgY29udGV4dCB3YXMgcGFzc2VkIGluIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBjb25zdHJ1Y3RvciB0aGVuIGl0IHdpbGwgbm90IGJlIGRlc3Ryb3llZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRleHR1cmU9ZmFsc2VdIC0gU2hvdWxkIGRlc3Ryb3kgdGhlIHRleHR1cmUgb2YgdGhlIGdyYXBoaWNzIGNvbnRleHRcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50ZXh0dXJlU291cmNlPWZhbHNlXSAtIFNob3VsZCBkZXN0cm95IHRoZSB0ZXh0dXJlIHNvdXJjZSBvZiB0aGUgZ3JhcGhpY3MgY29udGV4dFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbnRleHQ9ZmFsc2VdIC0gU2hvdWxkIGRlc3Ryb3kgdGhlIGNvbnRleHRcbiAgICovXG4gIGRlc3Ryb3kob3B0aW9ucykge1xuICAgIGlmICh0aGlzLl9vd25lZENvbnRleHQgJiYgIW9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX293bmVkQ29udGV4dC5kZXN0cm95KG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucyA9PT0gdHJ1ZSB8fCBvcHRpb25zPy5jb250ZXh0ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLl9jb250ZXh0LmRlc3Ryb3kob3B0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMuX293bmVkQ29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgc3VwZXIuZGVzdHJveShvcHRpb25zKTtcbiAgfVxuICBfY2FsbENvbnRleHRNZXRob2QobWV0aG9kLCBhcmdzKSB7XG4gICAgdGhpcy5jb250ZXh0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEdyYXBoaWNzQ29udGV4dCBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBmaWxsIHN0eWxlIG9mIHRoZSBncmFwaGljcyBjb250ZXh0LiBUaGUgZmlsbCBzdHlsZSBjYW4gYmUgYSBjb2xvciwgZ3JhZGllbnQsXG4gICAqIHBhdHRlcm4sIG9yIGEgbW9yZSBjb21wbGV4IHN0eWxlIGRlZmluZWQgYnkgYSBGaWxsU3R5bGUgb2JqZWN0LlxuICAgKiBAcGFyYW0ge0ZpbGxJbnB1dH0gYXJncyAtIFRoZSBmaWxsIHN0eWxlIHRvIGFwcGx5LiBUaGlzIGNhbiBiZSBhIHNpbXBsZSBjb2xvciwgYSBncmFkaWVudCBvclxuICAgKiBwYXR0ZXJuIG9iamVjdCwgb3IgYSBGaWxsU3R5bGUgb3IgQ29udmVydGVkRmlsbFN0eWxlIG9iamVjdC5cbiAgICogQHJldHVybnMgVGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IEdyYXBoaWNzQ29udGV4dCBmb3IgbWV0aG9kIGNoYWluaW5nLlxuICAgKi9cbiAgc2V0RmlsbFN0eWxlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJzZXRGaWxsU3R5bGVcIiwgYXJncyk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgc3Ryb2tlIHN0eWxlIG9mIHRoZSBncmFwaGljcyBjb250ZXh0LiBTaW1pbGFyIHRvIGZpbGwgc3R5bGVzLCBzdHJva2Ugc3R5bGVzIGNhblxuICAgKiBlbmNvbXBhc3MgY29sb3JzLCBncmFkaWVudHMsIHBhdHRlcm5zLCBvciBtb3JlIGRldGFpbGVkIGNvbmZpZ3VyYXRpb25zIHZpYSBhIFN0cm9rZVN0eWxlIG9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJva2VJbnB1dH0gYXJncyAtIFRoZSBzdHJva2Ugc3R5bGUgdG8gYXBwbHkuIENhbiBiZSBkZWZpbmVkIGFzIGEgY29sb3IsIGEgZ3JhZGllbnQgb3IgcGF0dGVybixcbiAgICogb3IgYSBTdHJva2VTdHlsZSBvciBDb252ZXJ0ZWRTdHJva2VTdHlsZSBvYmplY3QuXG4gICAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBHcmFwaGljc0NvbnRleHQgZm9yIG1ldGhvZCBjaGFpbmluZy5cbiAgICovXG4gIHNldFN0cm9rZVN0eWxlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJzZXRTdHJva2VTdHlsZVwiLCBhcmdzKTtcbiAgfVxuICBmaWxsKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJmaWxsXCIsIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBTdHJva2VzIHRoZSBjdXJyZW50IHBhdGggd2l0aCB0aGUgY3VycmVudCBzdHJva2Ugc3R5bGUuIFRoaXMgbWV0aG9kIGNhbiB0YWtlIGFuIG9wdGlvbmFsXG4gICAqIEZpbGxTdHlsZSBwYXJhbWV0ZXIgdG8gZGVmaW5lIHRoZSBzdHJva2UncyBhcHBlYXJhbmNlLCBpbmNsdWRpbmcgaXRzIGNvbG9yLCB3aWR0aCwgYW5kIG90aGVyIHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7RmlsbFN0eWxlfSBhcmdzIC0gKE9wdGlvbmFsKSBUaGUgc3Ryb2tlIHN0eWxlIHRvIGFwcGx5LiBDYW4gYmUgZGVmaW5lZCBhcyBhIHNpbXBsZSBjb2xvciBvciBhIG1vcmVcbiAgICogY29tcGxleCBzdHlsZSBvYmplY3QuIElmIG9taXR0ZWQsIHVzZXMgdGhlIGN1cnJlbnQgc3Ryb2tlIHN0eWxlLlxuICAgKiBAcmV0dXJucyBUaGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgR3JhcGhpY3NDb250ZXh0IGZvciBtZXRob2QgY2hhaW5pbmcuXG4gICAqL1xuICBzdHJva2UoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcInN0cm9rZVwiLCBhcmdzKTtcbiAgfVxuICB0ZXh0dXJlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJ0ZXh0dXJlXCIsIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGN1cnJlbnQgcGF0aC4gQW55IHByZXZpb3VzIHBhdGggYW5kIGl0cyBjb21tYW5kcyBhcmUgZGlzY2FyZGVkIGFuZCBhIG5ldyBwYXRoIGlzXG4gICAqIHN0YXJ0ZWQuIFRoaXMgaXMgdHlwaWNhbGx5IGNhbGxlZCBiZWZvcmUgYmVnaW5uaW5nIGEgbmV3IHNoYXBlIG9yIHNlcmllcyBvZiBkcmF3aW5nIGNvbW1hbmRzLlxuICAgKiBAcmV0dXJucyBUaGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgR3JhcGhpY3NDb250ZXh0IGZvciBtZXRob2QgY2hhaW5pbmcuXG4gICAqL1xuICBiZWdpblBhdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwiYmVnaW5QYXRoXCIsIFtdKTtcbiAgfVxuICAvKipcbiAgICogQXBwbGllcyBhIGN1dG91dCB0byB0aGUgbGFzdCBkcmF3biBzaGFwZS4gVGhpcyBpcyB1c2VkIHRvIGNyZWF0ZSBob2xlcyBvciBjb21wbGV4IHNoYXBlcyBieVxuICAgKiBzdWJ0cmFjdGluZyBhIHBhdGggZnJvbSB0aGUgcHJldmlvdXNseSBkcmF3biBwYXRoLiBJZiBhIGhvbGUgaXMgbm90IGNvbXBsZXRlbHkgaW4gYSBzaGFwZSwgaXQgd2lsbFxuICAgKiBmYWlsIHRvIGN1dCBjb3JyZWN0bHkhXG4gICAqL1xuICBjdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwiY3V0XCIsIFtdKTtcbiAgfVxuICBhcmMoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImFyY1wiLCBhcmdzKTtcbiAgfVxuICBhcmNUbyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwiYXJjVG9cIiwgYXJncyk7XG4gIH1cbiAgYXJjVG9TdmcoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImFyY1RvU3ZnXCIsIGFyZ3MpO1xuICB9XG4gIGJlemllckN1cnZlVG8oLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImJlemllckN1cnZlVG9cIiwgYXJncyk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgY3VycmVudCBwYXRoIGJ5IGRyYXdpbmcgYSBzdHJhaWdodCBsaW5lIGJhY2sgdG8gdGhlIHN0YXJ0LlxuICAgKiBJZiB0aGUgc2hhcGUgaXMgYWxyZWFkeSBjbG9zZWQgb3IgdGhlcmUgYXJlIG5vIHBvaW50cyBpbiB0aGUgcGF0aCwgdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nLlxuICAgKiBAcmV0dXJucyBUaGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGZvciBjaGFpbmluZy5cbiAgICovXG4gIGNsb3NlUGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJjbG9zZVBhdGhcIiwgW10pO1xuICB9XG4gIGVsbGlwc2UoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImVsbGlwc2VcIiwgYXJncyk7XG4gIH1cbiAgY2lyY2xlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJjaXJjbGVcIiwgYXJncyk7XG4gIH1cbiAgcGF0aCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwicGF0aFwiLCBhcmdzKTtcbiAgfVxuICBsaW5lVG8oLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImxpbmVUb1wiLCBhcmdzKTtcbiAgfVxuICBtb3ZlVG8oLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcIm1vdmVUb1wiLCBhcmdzKTtcbiAgfVxuICBxdWFkcmF0aWNDdXJ2ZVRvKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJxdWFkcmF0aWNDdXJ2ZVRvXCIsIGFyZ3MpO1xuICB9XG4gIHJlY3QoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcInJlY3RcIiwgYXJncyk7XG4gIH1cbiAgcm91bmRSZWN0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJyb3VuZFJlY3RcIiwgYXJncyk7XG4gIH1cbiAgcG9seSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwicG9seVwiLCBhcmdzKTtcbiAgfVxuICByZWd1bGFyUG9seSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwicmVndWxhclBvbHlcIiwgYXJncyk7XG4gIH1cbiAgcm91bmRQb2x5KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJyb3VuZFBvbHlcIiwgYXJncyk7XG4gIH1cbiAgcm91bmRTaGFwZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwicm91bmRTaGFwZVwiLCBhcmdzKTtcbiAgfVxuICBmaWxsZXRSZWN0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJmaWxsZXRSZWN0XCIsIGFyZ3MpO1xuICB9XG4gIGNoYW1mZXJSZWN0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJjaGFtZmVyUmVjdFwiLCBhcmdzKTtcbiAgfVxuICBzdGFyKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJzdGFyXCIsIGFyZ3MpO1xuICB9XG4gIHN2ZyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwic3ZnXCIsIGFyZ3MpO1xuICB9XG4gIHJlc3RvcmUoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcInJlc3RvcmVcIiwgYXJncyk7XG4gIH1cbiAgLyoqIFNhdmVzIHRoZSBjdXJyZW50IGdyYXBoaWNzIHN0YXRlLCBpbmNsdWRpbmcgdHJhbnNmb3JtYXRpb25zLCBmaWxsIHN0eWxlcywgYW5kIHN0cm9rZSBzdHlsZXMsIG9udG8gYSBzdGFjay4gKi9cbiAgc2F2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJzYXZlXCIsIFtdKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggb2YgdGhlIGdyYXBoaWNzIGNvbnRleHQuXG4gICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAgICovXG4gIGdldFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmdldFRyYW5zZm9ybSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGN1cnJlbnQgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIHRoZSBpZGVudGl0eSBtYXRyaXgsIGVmZmVjdGl2ZWx5IHJlbW92aW5nXG4gICAqIGFueSB0cmFuc2Zvcm1hdGlvbnMgKHJvdGF0aW9uLCBzY2FsaW5nLCB0cmFuc2xhdGlvbikgcHJldmlvdXNseSBhcHBsaWVkLlxuICAgKiBAcmV0dXJucyBUaGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgR3JhcGhpY3NDb250ZXh0IGZvciBtZXRob2QgY2hhaW5pbmcuXG4gICAqL1xuICByZXNldFRyYW5zZm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJyZXNldFRyYW5zZm9ybVwiLCBbXSk7XG4gIH1cbiAgcm90YXRlVHJhbnNmb3JtKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJyb3RhdGVcIiwgYXJncyk7XG4gIH1cbiAgc2NhbGVUcmFuc2Zvcm0oLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcInNjYWxlXCIsIGFyZ3MpO1xuICB9XG4gIHNldFRyYW5zZm9ybSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwic2V0VHJhbnNmb3JtXCIsIGFyZ3MpO1xuICB9XG4gIHRyYW5zZm9ybSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwidHJhbnNmb3JtXCIsIGFyZ3MpO1xuICB9XG4gIHRyYW5zbGF0ZVRyYW5zZm9ybSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwidHJhbnNsYXRlXCIsIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIGRyYXdpbmcgY29tbWFuZHMgZnJvbSB0aGUgZ3JhcGhpY3MgY29udGV4dCwgZWZmZWN0aXZlbHkgcmVzZXR0aW5nIGl0LiBUaGlzIGluY2x1ZGVzIGNsZWFyaW5nIHRoZSBwYXRoLFxuICAgKiBhbmQgb3B0aW9uYWxseSByZXNldHRpbmcgdHJhbnNmb3JtYXRpb25zIHRvIHRoZSBpZGVudGl0eSBtYXRyaXguXG4gICAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBHcmFwaGljc0NvbnRleHQgZm9yIG1ldGhvZCBjaGFpbmluZy5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImNsZWFyXCIsIFtdKTtcbiAgfVxuICAvKipcbiAgICogVGhlIGZpbGwgc3R5bGUgdG8gdXNlLlxuICAgKiBAdHlwZSB7Q29udmVydGVkRmlsbFN0eWxlfVxuICAgKi9cbiAgZ2V0IGZpbGxTdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGV4dC5maWxsU3R5bGU7XG4gIH1cbiAgc2V0IGZpbGxTdHlsZSh2YWx1ZSkge1xuICAgIHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlID0gdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBzdHJva2Ugc3R5bGUgdG8gdXNlLlxuICAgKiBAdHlwZSB7Q29udmVydGVkU3Ryb2tlU3R5bGV9XG4gICAqL1xuICBnZXQgc3Ryb2tlU3R5bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRleHQuc3Ryb2tlU3R5bGU7XG4gIH1cbiAgc2V0IHN0cm9rZVN0eWxlKHZhbHVlKSB7XG4gICAgdGhpcy5fY29udGV4dC5zdHJva2VTdHlsZSA9IHZhbHVlO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEdyYXBoaWNzIG9iamVjdC5cbiAgICogTm90ZSB0aGF0IG9ubHkgdGhlIGNvbnRleHQgb2YgdGhlIG9iamVjdCBpcyBjbG9uZWQsIG5vdCBpdHMgdHJhbnNmb3JtIChwb3NpdGlvbixzY2FsZSxldGMpXG4gICAqIEBwYXJhbSBkZWVwIC0gV2hldGhlciB0byBjcmVhdGUgYSBkZWVwIGNsb25lIG9mIHRoZSBncmFwaGljcyBvYmplY3QuIElmIGZhbHNlLCB0aGUgY29udGV4dFxuICAgKiB3aWxsIGJlIHNoYXJlZCBiZXR3ZWVuIHRoZSB0d28gb2JqZWN0cyAoZGVmYXVsdCBmYWxzZSkuIElmIHRydWUsIHRoZSBjb250ZXh0IHdpbGwgYmVcbiAgICogY2xvbmVkIChyZWNvbW1lbmRlZCBpZiB5b3UgbmVlZCB0byBtb2RpZnkgdGhlIGNvbnRleHQgaW4gYW55IHdheSkuXG4gICAqIEByZXR1cm5zIC0gQSBjbG9uZSBvZiB0aGUgZ3JhcGhpY3Mgb2JqZWN0XG4gICAqL1xuICBjbG9uZShkZWVwID0gZmFsc2UpIHtcbiAgICBpZiAoZGVlcCkge1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaGljcyh0aGlzLl9jb250ZXh0LmNsb25lKCkpO1xuICAgIH1cbiAgICB0aGlzLl9vd25lZENvbnRleHQgPSBudWxsO1xuICAgIGNvbnN0IGNsb25lID0gbmV3IEdyYXBoaWNzKHRoaXMuX2NvbnRleHQpO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuICAvLyAtLS0tLS0tLSB2NyBkZXByZWNhdGlvbnMgLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBAcGFyYW0gd2lkdGhcbiAgICogQHBhcmFtIGNvbG9yXG4gICAqIEBwYXJhbSBhbHBoYVxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSA4LjAuMCBVc2Uge0BsaW5rIEdyYXBoaWNzI3NldFN0cm9rZVN0eWxlfSBpbnN0ZWFkXG4gICAqL1xuICBsaW5lU3R5bGUod2lkdGgsIGNvbG9yLCBhbHBoYSkge1xuICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJHcmFwaGljcyNsaW5lU3R5bGUgaXMgbm8gbG9uZ2VyIG5lZWRlZC4gVXNlIEdyYXBoaWNzI3NldFN0cm9rZVN0eWxlIHRvIHNldCB0aGUgc3Ryb2tlIHN0eWxlLlwiKTtcbiAgICBjb25zdCBzdHJva2VTdHlsZSA9IHt9O1xuICAgIHdpZHRoICYmIChzdHJva2VTdHlsZS53aWR0aCA9IHdpZHRoKTtcbiAgICBjb2xvciAmJiAoc3Ryb2tlU3R5bGUuY29sb3IgPSBjb2xvcik7XG4gICAgYWxwaGEgJiYgKHN0cm9rZVN0eWxlLmFscGhhID0gYWxwaGEpO1xuICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZVN0eWxlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gY29sb3JcbiAgICogQHBhcmFtIGFscGhhXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSB7QGxpbmsgR3JhcGhpY3MjZmlsbH0gaW5zdGVhZFxuICAgKi9cbiAgYmVnaW5GaWxsKGNvbG9yLCBhbHBoYSkge1xuICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJHcmFwaGljcyNiZWdpbkZpbGwgaXMgbm8gbG9uZ2VyIG5lZWRlZC4gVXNlIEdyYXBoaWNzI2ZpbGwgdG8gZmlsbCB0aGUgc2hhcGUgd2l0aCB0aGUgZGVzaXJlZCBzdHlsZS5cIik7XG4gICAgY29uc3QgZmlsbFN0eWxlID0ge307XG4gICAgY29sb3IgJiYgKGZpbGxTdHlsZS5jb2xvciA9IGNvbG9yKTtcbiAgICBhbHBoYSAmJiAoZmlsbFN0eWxlLmFscGhhID0gYWxwaGEpO1xuICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBmaWxsU3R5bGU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSB7QGxpbmsgR3JhcGhpY3MjZmlsbH0gaW5zdGVhZFxuICAgKi9cbiAgZW5kRmlsbCgpIHtcbiAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwiR3JhcGhpY3MjZW5kRmlsbCBpcyBubyBsb25nZXIgbmVlZGVkLiBVc2UgR3JhcGhpY3MjZmlsbCB0byBmaWxsIHRoZSBzaGFwZSB3aXRoIHRoZSBkZXNpcmVkIHN0eWxlLlwiKTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xuICAgIGNvbnN0IHN0cm9rZVN0eWxlID0gdGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlO1xuICAgIGlmIChzdHJva2VTdHlsZS53aWR0aCAhPT0gR3JhcGhpY3NDb250ZXh0LmRlZmF1bHRTdHJva2VTdHlsZS53aWR0aCB8fCBzdHJva2VTdHlsZS5jb2xvciAhPT0gR3JhcGhpY3NDb250ZXh0LmRlZmF1bHRTdHJva2VTdHlsZS5jb2xvciB8fCBzdHJva2VTdHlsZS5hbHBoYSAhPT0gR3JhcGhpY3NDb250ZXh0LmRlZmF1bHRTdHJva2VTdHlsZS5hbHBoYSkge1xuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3NcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgOC4wLjAgVXNlIHtAbGluayBHcmFwaGljcyNjaXJjbGV9IGluc3RlYWRcbiAgICovXG4gIGRyYXdDaXJjbGUoLi4uYXJncykge1xuICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJHcmFwaGljcyNkcmF3Q2lyY2xlIGhhcyBiZWVuIHJlbmFtZWQgdG8gR3JhcGhpY3MjY2lyY2xlXCIpO1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcImNpcmNsZVwiLCBhcmdzKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3NcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgOC4wLjAgVXNlIHtAbGluayBHcmFwaGljcyNlbGxpcHNlfSBpbnN0ZWFkXG4gICAqL1xuICBkcmF3RWxsaXBzZSguLi5hcmdzKSB7XG4gICAgZGVwcmVjYXRpb24odjhfMF8wLCBcIkdyYXBoaWNzI2RyYXdFbGxpcHNlIGhhcyBiZWVuIHJlbmFtZWQgdG8gR3JhcGhpY3MjZWxsaXBzZVwiKTtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJlbGxpcHNlXCIsIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gey4uLmFueX0gYXJnc1xuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSA4LjAuMCBVc2Uge0BsaW5rIEdyYXBoaWNzI3BvbHl9IGluc3RlYWRcbiAgICovXG4gIGRyYXdQb2x5Z29uKC4uLmFyZ3MpIHtcbiAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwiR3JhcGhpY3MjZHJhd1BvbHlnb24gaGFzIGJlZW4gcmVuYW1lZCB0byBHcmFwaGljcyNwb2x5XCIpO1xuICAgIHJldHVybiB0aGlzLl9jYWxsQ29udGV4dE1ldGhvZChcInBvbHlcIiwgYXJncyk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7Li4uYW55fSBhcmdzXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSB7QGxpbmsgR3JhcGhpY3MjcmVjdH0gaW5zdGVhZFxuICAgKi9cbiAgZHJhd1JlY3QoLi4uYXJncykge1xuICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJHcmFwaGljcyNkcmF3UmVjdCBoYXMgYmVlbiByZW5hbWVkIHRvIEdyYXBoaWNzI3JlY3RcIik7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwicmVjdFwiLCBhcmdzKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3NcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgOC4wLjAgVXNlIHtAbGluayBHcmFwaGljcyNyb3VuZFJlY3R9IGluc3RlYWRcbiAgICovXG4gIGRyYXdSb3VuZGVkUmVjdCguLi5hcmdzKSB7XG4gICAgZGVwcmVjYXRpb24odjhfMF8wLCBcIkdyYXBoaWNzI2RyYXdSb3VuZGVkUmVjdCBoYXMgYmVlbiByZW5hbWVkIHRvIEdyYXBoaWNzI3JvdW5kUmVjdFwiKTtcbiAgICByZXR1cm4gdGhpcy5fY2FsbENvbnRleHRNZXRob2QoXCJyb3VuZFJlY3RcIiwgYXJncyk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7Li4uYW55fSBhcmdzXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSB7QGxpbmsgR3JhcGhpY3Mjc3Rhcn0gaW5zdGVhZFxuICAgKi9cbiAgZHJhd1N0YXIoLi4uYXJncykge1xuICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJHcmFwaGljcyNkcmF3U3RhciBoYXMgYmVlbiByZW5hbWVkIHRvIEdyYXBoaWNzI3N0YXJcIik7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxDb250ZXh0TWV0aG9kKFwic3RhclwiLCBhcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgeyBHcmFwaGljcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JhcGhpY3MubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBsb2NhbFVuaWZvcm1NU0RGQml0ID0ge1xuICBuYW1lOiBcImxvY2FsLXVuaWZvcm0tbXNkZi1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBzdHJ1Y3QgTG9jYWxVbmlmb3JtcyB7XG4gICAgICAgICAgICAgICAgdUNvbG9yOnZlYzQ8ZjMyPixcbiAgICAgICAgICAgICAgICB1VHJhbnNmb3JtTWF0cml4Om1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVEaXN0YW5jZTogZjMyLFxuICAgICAgICAgICAgICAgIHVSb3VuZDpmMzIsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygwKSB2YXI8dW5pZm9ybT4gbG9jYWxVbmlmb3JtcyA6IExvY2FsVW5pZm9ybXM7XG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHZDb2xvciAqPSBsb2NhbFVuaWZvcm1zLnVDb2xvcjtcbiAgICAgICAgICAgIG1vZGVsTWF0cml4ICo9IGxvY2FsVW5pZm9ybXMudVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgYFxuICAgICksXG4gICAgZW5kOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBpZihsb2NhbFVuaWZvcm1zLnVSb3VuZCA9PSAxKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZQb3NpdGlvbiA9IHZlYzQocm91bmRQaXhlbHModlBvc2l0aW9uLnh5LCBnbG9iYWxVbmlmb3Jtcy51UmVzb2x1dGlvbiksIHZQb3NpdGlvbi56dyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICApXG4gIH0sXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBzdHJ1Y3QgTG9jYWxVbmlmb3JtcyB7XG4gICAgICAgICAgICAgICAgdUNvbG9yOnZlYzQ8ZjMyPixcbiAgICAgICAgICAgICAgICB1VHJhbnNmb3JtTWF0cml4Om1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVEaXN0YW5jZTogZjMyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygwKSB2YXI8dW5pZm9ybT4gbG9jYWxVbmlmb3JtcyA6IExvY2FsVW5pZm9ybXM7XG4gICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgIFxuICAgICAgICAgICAgb3V0Q29sb3IgPSB2ZWM0PGYzMj4oY2FsY3VsYXRlTVNERkFscGhhKG91dENvbG9yLCBsb2NhbFVuaWZvcm1zLnVDb2xvciwgbG9jYWxVbmlmb3Jtcy51RGlzdGFuY2UpKTtcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybU1TREZCaXRHbCA9IHtcbiAgbmFtZTogXCJsb2NhbC11bmlmb3JtLW1zZGYtYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdW5pZm9ybSBtYXQzIHVUcmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzQgdUNvbG9yO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCB1Um91bmQ7XG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHZDb2xvciAqPSB1Q29sb3I7XG4gICAgICAgICAgICBtb2RlbE1hdHJpeCAqPSB1VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBlbmQ6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGlmKHVSb3VuZCA9PSAxLilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbi54eSA9IHJvdW5kUGl4ZWxzKGdsX1Bvc2l0aW9uLnh5LCB1UmVzb2x1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICApXG4gIH0sXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IHVEaXN0YW5jZTtcbiAgICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGAgXG4gICAgICAgICAgICBvdXRDb2xvciA9IHZlYzQoY2FsY3VsYXRlTVNERkFscGhhKG91dENvbG9yLCB2Q29sb3IsIHVEaXN0YW5jZSkpO1xuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyBsb2NhbFVuaWZvcm1NU0RGQml0LCBsb2NhbFVuaWZvcm1NU0RGQml0R2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsVW5pZm9ybU1TREZCaXQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBtU0RGQml0ID0ge1xuICBuYW1lOiBcIm1zZGYtYml0XCIsXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBmbiBjYWxjdWxhdGVNU0RGQWxwaGEobXNkZkNvbG9yOnZlYzQ8ZjMyPiwgc2hhcGVDb2xvcjp2ZWM0PGYzMj4sIGRpc3RhbmNlOmYzMikgLT4gZjMyIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBNU0RGXG4gICAgICAgICAgICAgICAgdmFyIG1lZGlhbiA9IG1zZGZDb2xvci5yICsgbXNkZkNvbG9yLmcgKyBtc2RmQ29sb3IuYiAtXG4gICAgICAgICAgICAgICAgICAgIG1pbihtc2RmQ29sb3IuciwgbWluKG1zZGZDb2xvci5nLCBtc2RmQ29sb3IuYikpIC1cbiAgICAgICAgICAgICAgICAgICAgbWF4KG1zZGZDb2xvci5yLCBtYXgobXNkZkNvbG9yLmcsIG1zZGZDb2xvci5iKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTREZcbiAgICAgICAgICAgICAgICBtZWRpYW4gPSBtaW4obWVkaWFuLCBtc2RmQ29sb3IuYSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2NyZWVuUHhEaXN0YW5jZSA9IGRpc3RhbmNlICogKG1lZGlhbiAtIDAuNSk7XG4gICAgICAgICAgICAgICAgdmFyIGFscGhhID0gY2xhbXAoc2NyZWVuUHhEaXN0YW5jZSArIDAuNSwgMC4wLCAxLjApO1xuICAgICAgICAgICAgICAgIGlmIChtZWRpYW4gPCAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhID0gMC4wO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVkaWFuID4gMC45OSkge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IDEuMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBHYW1tYSBjb3JyZWN0aW9uIGZvciBjb3ZlcmFnZS1saWtlIGFscGhhXG4gICAgICAgICAgICAgICAgdmFyIGx1bWE6IGYzMiA9IGRvdChzaGFwZUNvbG9yLnJnYiwgdmVjMzxmMzI+KDAuMjk5LCAwLjU4NywgMC4xMTQpKTtcbiAgICAgICAgICAgICAgICB2YXIgZ2FtbWE6IGYzMiA9IG1peCgxLjAsIDEuMCAvIDIuMiwgbHVtYSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvdmVyYWdlOiBmMzIgPSBwb3coc2hhcGVDb2xvci5hICogYWxwaGEsIGdhbW1hKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBjb3ZlcmFnZTtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IG1TREZCaXRHbCA9IHtcbiAgbmFtZTogXCJtc2RmLWJpdFwiLFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgZmxvYXQgY2FsY3VsYXRlTVNERkFscGhhKHZlYzQgbXNkZkNvbG9yLCB2ZWM0IHNoYXBlQ29sb3IsIGZsb2F0IGRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gTVNERlxuICAgICAgICAgICAgICAgIGZsb2F0IG1lZGlhbiA9IG1zZGZDb2xvci5yICsgbXNkZkNvbG9yLmcgKyBtc2RmQ29sb3IuYiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbihtc2RmQ29sb3IuciwgbWluKG1zZGZDb2xvci5nLCBtc2RmQ29sb3IuYikpIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4KG1zZGZDb2xvci5yLCBtYXgobXNkZkNvbG9yLmcsIG1zZGZDb2xvci5iKSk7XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTREZcbiAgICAgICAgICAgICAgICBtZWRpYW4gPSBtaW4obWVkaWFuLCBtc2RmQ29sb3IuYSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmbG9hdCBzY3JlZW5QeERpc3RhbmNlID0gZGlzdGFuY2UgKiAobWVkaWFuIC0gMC41KTtcbiAgICAgICAgICAgICAgICBmbG9hdCBhbHBoYSA9IGNsYW1wKHNjcmVlblB4RGlzdGFuY2UgKyAwLjUsIDAuMCwgMS4wKTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKG1lZGlhbiA8IDAuMDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxwaGEgPSAwLjA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZWRpYW4gPiAwLjk5KSB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhID0gMS4wO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEdhbW1hIGNvcnJlY3Rpb24gZm9yIGNvdmVyYWdlLWxpa2UgYWxwaGFcbiAgICAgICAgICAgICAgICBmbG9hdCBsdW1hID0gZG90KHNoYXBlQ29sb3IucmdiLCB2ZWMzKDAuMjk5LCAwLjU4NywgMC4xMTQpKTtcbiAgICAgICAgICAgICAgICBmbG9hdCBnYW1tYSA9IG1peCgxLjAsIDEuMCAvIDIuMiwgbHVtYSk7XG4gICAgICAgICAgICAgICAgZmxvYXQgY292ZXJhZ2UgPSBwb3coc2hhcGVDb2xvci5hICogYWxwaGEsIGdhbW1hKTsgIFxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gY292ZXJhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCB7IG1TREZCaXQsIG1TREZCaXRHbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bVNERkJpdC5tanMubWFwXG4iLCJpbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi8uLi8uLi9tYXRocy9tYXRyaXgvTWF0cml4Lm1qcyc7XG5pbXBvcnQgeyBnZXRNYXhUZXh0dXJlc1BlckJhdGNoIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2JhdGNoZXIvZ2wvdXRpbHMvbWF4UmVjb21tZW5kZWRUZXh0dXJlcy5tanMnO1xuaW1wb3J0IHsgY29tcGlsZUhpZ2hTaGFkZXJHcHVQcm9ncmFtLCBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9jb21waWxlSGlnaFNoYWRlclRvUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgY29sb3JCaXQsIGNvbG9yQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvY29sb3JCaXQubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0LCBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2dlbmVyYXRlVGV4dHVyZUJhdGNoQml0Lm1qcyc7XG5pbXBvcnQgeyByb3VuZFBpeGVsc0JpdCwgcm91bmRQaXhlbHNCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9yb3VuZFBpeGVsc0JpdC5tanMnO1xuaW1wb3J0IHsgZ2V0QmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL2dldEJhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9TaGFkZXIubWpzJztcbmltcG9ydCB7IFVuaWZvcm1Hcm91cCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzJztcbmltcG9ydCB7IGxvY2FsVW5pZm9ybU1TREZCaXQsIGxvY2FsVW5pZm9ybU1TREZCaXRHbCB9IGZyb20gJy4vc2hhZGVyLWJpdHMvbG9jYWxVbmlmb3JtTVNERkJpdC5tanMnO1xuaW1wb3J0IHsgbVNERkJpdCwgbVNERkJpdEdsIH0gZnJvbSAnLi9zaGFkZXItYml0cy9tU0RGQml0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xubGV0IGdwdVByb2dyYW07XG5sZXQgZ2xQcm9ncmFtO1xuY2xhc3MgU2RmU2hhZGVyIGV4dGVuZHMgU2hhZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgdW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVDb2xvcjogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMSwgMSwgMSwgMV0pLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1VHJhbnNmb3JtTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgdURpc3RhbmNlOiB7IHZhbHVlOiA0LCB0eXBlOiBcImYzMlwiIH0sXG4gICAgICB1Um91bmQ6IHsgdmFsdWU6IDAsIHR5cGU6IFwiZjMyXCIgfVxuICAgIH0pO1xuICAgIGNvbnN0IG1heFRleHR1cmVzID0gZ2V0TWF4VGV4dHVyZXNQZXJCYXRjaCgpO1xuICAgIGdwdVByb2dyYW0gPz8gKGdwdVByb2dyYW0gPSBjb21waWxlSGlnaFNoYWRlckdwdVByb2dyYW0oe1xuICAgICAgbmFtZTogXCJzZGYtc2hhZGVyXCIsXG4gICAgICBiaXRzOiBbXG4gICAgICAgIGNvbG9yQml0LFxuICAgICAgICBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdChtYXhUZXh0dXJlcyksXG4gICAgICAgIGxvY2FsVW5pZm9ybU1TREZCaXQsXG4gICAgICAgIG1TREZCaXQsXG4gICAgICAgIHJvdW5kUGl4ZWxzQml0XG4gICAgICBdXG4gICAgfSkpO1xuICAgIGdsUHJvZ3JhbSA/PyAoZ2xQcm9ncmFtID0gY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0oe1xuICAgICAgbmFtZTogXCJzZGYtc2hhZGVyXCIsXG4gICAgICBiaXRzOiBbXG4gICAgICAgIGNvbG9yQml0R2wsXG4gICAgICAgIGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0R2wobWF4VGV4dHVyZXMpLFxuICAgICAgICBsb2NhbFVuaWZvcm1NU0RGQml0R2wsXG4gICAgICAgIG1TREZCaXRHbCxcbiAgICAgICAgcm91bmRQaXhlbHNCaXRHbFxuICAgICAgXVxuICAgIH0pKTtcbiAgICBzdXBlcih7XG4gICAgICBnbFByb2dyYW0sXG4gICAgICBncHVQcm9ncmFtLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIGxvY2FsVW5pZm9ybXM6IHVuaWZvcm1zLFxuICAgICAgICBiYXRjaFNhbXBsZXJzOiBnZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwKG1heFRleHR1cmVzKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IFNkZlNoYWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2RmU2hhZGVyLm1qcy5tYXBcbiIsImltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi4vLi4vYXNzZXRzL2NhY2hlL0NhY2hlLm1qcyc7XG5pbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBCaWdQb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9vbC9Qb29sR3JvdXAubWpzJztcbmltcG9ydCB7IEdyYXBoaWNzIH0gZnJvbSAnLi4vZ3JhcGhpY3Mvc2hhcmVkL0dyYXBoaWNzLm1qcyc7XG5pbXBvcnQgeyBTZGZTaGFkZXIgfSBmcm9tICcuLi90ZXh0L3NkZlNoYWRlci9TZGZTaGFkZXIubWpzJztcbmltcG9ydCB7IEJpdG1hcEZvbnRNYW5hZ2VyIH0gZnJvbSAnLi9CaXRtYXBGb250TWFuYWdlci5tanMnO1xuaW1wb3J0IHsgZ2V0Qml0bWFwVGV4dExheW91dCB9IGZyb20gJy4vdXRpbHMvZ2V0Qml0bWFwVGV4dExheW91dC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEJpdG1hcFRleHRQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9ncHVCaXRtYXBUZXh0ID0ge307XG4gICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCA9IHRoaXMuZGVzdHJveVJlbmRlcmFibGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICB9XG4gIHZhbGlkYXRlUmVuZGVyYWJsZShiaXRtYXBUZXh0KSB7XG4gICAgY29uc3QgZ3JhcGhpY3NSZW5kZXJhYmxlID0gdGhpcy5fZ2V0R3B1Qml0bWFwVGV4dChiaXRtYXBUZXh0KTtcbiAgICBpZiAoYml0bWFwVGV4dC5fZGlkVGV4dFVwZGF0ZSkge1xuICAgICAgYml0bWFwVGV4dC5fZGlkVGV4dFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fdXBkYXRlQ29udGV4dChiaXRtYXBUZXh0LCBncmFwaGljc1JlbmRlcmFibGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMuZ3JhcGhpY3MudmFsaWRhdGVSZW5kZXJhYmxlKGdyYXBoaWNzUmVuZGVyYWJsZSk7XG4gIH1cbiAgYWRkUmVuZGVyYWJsZShiaXRtYXBUZXh0LCBpbnN0cnVjdGlvblNldCkge1xuICAgIGNvbnN0IGdyYXBoaWNzUmVuZGVyYWJsZSA9IHRoaXMuX2dldEdwdUJpdG1hcFRleHQoYml0bWFwVGV4dCk7XG4gICAgc3luY1dpdGhQcm94eShiaXRtYXBUZXh0LCBncmFwaGljc1JlbmRlcmFibGUpO1xuICAgIGlmIChiaXRtYXBUZXh0Ll9kaWRUZXh0VXBkYXRlKSB7XG4gICAgICBiaXRtYXBUZXh0Ll9kaWRUZXh0VXBkYXRlID0gZmFsc2U7XG4gICAgICB0aGlzLl91cGRhdGVDb250ZXh0KGJpdG1hcFRleHQsIGdyYXBoaWNzUmVuZGVyYWJsZSk7XG4gICAgfVxuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmdyYXBoaWNzLmFkZFJlbmRlcmFibGUoZ3JhcGhpY3NSZW5kZXJhYmxlLCBpbnN0cnVjdGlvblNldCk7XG4gICAgaWYgKGdyYXBoaWNzUmVuZGVyYWJsZS5jb250ZXh0LmN1c3RvbVNoYWRlcikge1xuICAgICAgdGhpcy5fdXBkYXRlRGlzdGFuY2VGaWVsZChiaXRtYXBUZXh0KTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveVJlbmRlcmFibGUoYml0bWFwVGV4dCkge1xuICAgIGJpdG1hcFRleHQub2ZmKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQnlVaWQoYml0bWFwVGV4dC51aWQpO1xuICB9XG4gIF9kZXN0cm95UmVuZGVyYWJsZUJ5VWlkKHJlbmRlcmFibGVVaWQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5fZ3B1Qml0bWFwVGV4dFtyZW5kZXJhYmxlVWlkXS5jb250ZXh0O1xuICAgIGlmIChjb250ZXh0LmN1c3RvbVNoYWRlcikge1xuICAgICAgQmlnUG9vbC5yZXR1cm4oY29udGV4dC5jdXN0b21TaGFkZXIpO1xuICAgICAgY29udGV4dC5jdXN0b21TaGFkZXIgPSBudWxsO1xuICAgIH1cbiAgICBCaWdQb29sLnJldHVybih0aGlzLl9ncHVCaXRtYXBUZXh0W3JlbmRlcmFibGVVaWRdKTtcbiAgICB0aGlzLl9ncHVCaXRtYXBUZXh0W3JlbmRlcmFibGVVaWRdID0gbnVsbDtcbiAgfVxuICB1cGRhdGVSZW5kZXJhYmxlKGJpdG1hcFRleHQpIHtcbiAgICBjb25zdCBncmFwaGljc1JlbmRlcmFibGUgPSB0aGlzLl9nZXRHcHVCaXRtYXBUZXh0KGJpdG1hcFRleHQpO1xuICAgIHN5bmNXaXRoUHJveHkoYml0bWFwVGV4dCwgZ3JhcGhpY3NSZW5kZXJhYmxlKTtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcy5ncmFwaGljcy51cGRhdGVSZW5kZXJhYmxlKGdyYXBoaWNzUmVuZGVyYWJsZSk7XG4gICAgaWYgKGdyYXBoaWNzUmVuZGVyYWJsZS5jb250ZXh0LmN1c3RvbVNoYWRlcikge1xuICAgICAgdGhpcy5fdXBkYXRlRGlzdGFuY2VGaWVsZChiaXRtYXBUZXh0KTtcbiAgICB9XG4gIH1cbiAgX3VwZGF0ZUNvbnRleHQoYml0bWFwVGV4dCwgcHJveHlHcmFwaGljcykge1xuICAgIGNvbnN0IHsgY29udGV4dCB9ID0gcHJveHlHcmFwaGljcztcbiAgICBjb25zdCBiaXRtYXBGb250ID0gQml0bWFwRm9udE1hbmFnZXIuZ2V0Rm9udChiaXRtYXBUZXh0LnRleHQsIGJpdG1hcFRleHQuX3N0eWxlKTtcbiAgICBjb250ZXh0LmNsZWFyKCk7XG4gICAgaWYgKGJpdG1hcEZvbnQuZGlzdGFuY2VGaWVsZC50eXBlICE9PSBcIm5vbmVcIikge1xuICAgICAgaWYgKCFjb250ZXh0LmN1c3RvbVNoYWRlcikge1xuICAgICAgICBjb250ZXh0LmN1c3RvbVNoYWRlciA9IEJpZ1Bvb2wuZ2V0KFNkZlNoYWRlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoYXJzID0gQXJyYXkuZnJvbShiaXRtYXBUZXh0LnRleHQpO1xuICAgIGNvbnN0IHN0eWxlID0gYml0bWFwVGV4dC5fc3R5bGU7XG4gICAgbGV0IGN1cnJlbnRZID0gYml0bWFwRm9udC5iYXNlTGluZU9mZnNldDtcbiAgICBjb25zdCBiaXRtYXBUZXh0TGF5b3V0ID0gZ2V0Qml0bWFwVGV4dExheW91dChjaGFycywgc3R5bGUsIGJpdG1hcEZvbnQsIHRydWUpO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgY29uc3QgcGFkZGluZyA9IHN0eWxlLnBhZGRpbmc7XG4gICAgY29uc3Qgc2NhbGUgPSBiaXRtYXBUZXh0TGF5b3V0LnNjYWxlO1xuICAgIGxldCB0eCA9IGJpdG1hcFRleHRMYXlvdXQud2lkdGg7XG4gICAgbGV0IHR5ID0gYml0bWFwVGV4dExheW91dC5oZWlnaHQgKyBiaXRtYXBUZXh0TGF5b3V0Lm9mZnNldFk7XG4gICAgaWYgKHN0eWxlLl9zdHJva2UpIHtcbiAgICAgIHR4ICs9IHN0eWxlLl9zdHJva2Uud2lkdGggLyBzY2FsZTtcbiAgICAgIHR5ICs9IHN0eWxlLl9zdHJva2Uud2lkdGggLyBzY2FsZTtcbiAgICB9XG4gICAgY29udGV4dC50cmFuc2xhdGUoLWJpdG1hcFRleHQuX2FuY2hvci5feCAqIHR4IC0gcGFkZGluZywgLWJpdG1hcFRleHQuX2FuY2hvci5feSAqIHR5IC0gcGFkZGluZykuc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICBjb25zdCB0aW50ID0gYml0bWFwRm9udC5hcHBseUZpbGxBc1RpbnQgPyBzdHlsZS5fZmlsbC5jb2xvciA6IDE2Nzc3MjE1O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYml0bWFwVGV4dExheW91dC5saW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGluZSA9IGJpdG1hcFRleHRMYXlvdXQubGluZXNbaV07XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmUuY2hhclBvc2l0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBjaGFyID0gY2hhcnNbaW5kZXgrK107XG4gICAgICAgIGNvbnN0IGNoYXJEYXRhID0gYml0bWFwRm9udC5jaGFyc1tjaGFyXTtcbiAgICAgICAgaWYgKGNoYXJEYXRhPy50ZXh0dXJlKSB7XG4gICAgICAgICAgY29udGV4dC50ZXh0dXJlKFxuICAgICAgICAgICAgY2hhckRhdGEudGV4dHVyZSxcbiAgICAgICAgICAgIHRpbnQgPyB0aW50IDogXCJibGFja1wiLFxuICAgICAgICAgICAgTWF0aC5yb3VuZChsaW5lLmNoYXJQb3NpdGlvbnNbal0gKyBjaGFyRGF0YS54T2Zmc2V0KSxcbiAgICAgICAgICAgIE1hdGgucm91bmQoY3VycmVudFkgKyBjaGFyRGF0YS55T2Zmc2V0KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN1cnJlbnRZICs9IGJpdG1hcEZvbnQubGluZUhlaWdodDtcbiAgICB9XG4gIH1cbiAgX2dldEdwdUJpdG1hcFRleHQoYml0bWFwVGV4dCkge1xuICAgIHJldHVybiB0aGlzLl9ncHVCaXRtYXBUZXh0W2JpdG1hcFRleHQudWlkXSB8fCB0aGlzLmluaXRHcHVUZXh0KGJpdG1hcFRleHQpO1xuICB9XG4gIGluaXRHcHVUZXh0KGJpdG1hcFRleHQpIHtcbiAgICBjb25zdCBwcm94eVJlbmRlcmFibGUgPSBCaWdQb29sLmdldChHcmFwaGljcyk7XG4gICAgdGhpcy5fZ3B1Qml0bWFwVGV4dFtiaXRtYXBUZXh0LnVpZF0gPSBwcm94eVJlbmRlcmFibGU7XG4gICAgdGhpcy5fdXBkYXRlQ29udGV4dChiaXRtYXBUZXh0LCBwcm94eVJlbmRlcmFibGUpO1xuICAgIGJpdG1hcFRleHQub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIHRoaXMuX2dwdUJpdG1hcFRleHRbYml0bWFwVGV4dC51aWRdO1xuICB9XG4gIF91cGRhdGVEaXN0YW5jZUZpZWxkKGJpdG1hcFRleHQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5fZ2V0R3B1Qml0bWFwVGV4dChiaXRtYXBUZXh0KS5jb250ZXh0O1xuICAgIGNvbnN0IGZvbnRGYW1pbHkgPSBiaXRtYXBUZXh0Ll9zdHlsZS5mb250RmFtaWx5O1xuICAgIGNvbnN0IGR5bmFtaWNGb250ID0gQ2FjaGUuZ2V0KGAke2ZvbnRGYW1pbHl9LWJpdG1hcGApO1xuICAgIGNvbnN0IHsgYSwgYiwgYywgZCB9ID0gYml0bWFwVGV4dC5ncm91cFRyYW5zZm9ybTtcbiAgICBjb25zdCBkeCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICBjb25zdCBkeSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKTtcbiAgICBjb25zdCB3b3JsZFNjYWxlID0gKE1hdGguYWJzKGR4KSArIE1hdGguYWJzKGR5KSkgLyAyO1xuICAgIGNvbnN0IGZvbnRTY2FsZSA9IGR5bmFtaWNGb250LmJhc2VSZW5kZXJlZEZvbnRTaXplIC8gYml0bWFwVGV4dC5fc3R5bGUuZm9udFNpemU7XG4gICAgY29uc3QgZGlzdGFuY2UgPSB3b3JsZFNjYWxlICogZHluYW1pY0ZvbnQuZGlzdGFuY2VGaWVsZC5yYW5nZSAqICgxIC8gZm9udFNjYWxlKTtcbiAgICBjb250ZXh0LmN1c3RvbVNoYWRlci5yZXNvdXJjZXMubG9jYWxVbmlmb3Jtcy51bmlmb3Jtcy51RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgdWlkIGluIHRoaXMuX2dwdUJpdG1hcFRleHQpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQnlVaWQodWlkKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1Qml0bWFwVGV4dCA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuQml0bWFwVGV4dFBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcImJpdG1hcFRleHRcIlxufTtcbmZ1bmN0aW9uIHN5bmNXaXRoUHJveHkoY29udGFpbmVyLCBwcm94eSkge1xuICBwcm94eS5ncm91cFRyYW5zZm9ybSA9IGNvbnRhaW5lci5ncm91cFRyYW5zZm9ybTtcbiAgcHJveHkuZ3JvdXBDb2xvckFscGhhID0gY29udGFpbmVyLmdyb3VwQ29sb3JBbHBoYTtcbiAgcHJveHkuZ3JvdXBDb2xvciA9IGNvbnRhaW5lci5ncm91cENvbG9yO1xuICBwcm94eS5ncm91cEJsZW5kTW9kZSA9IGNvbnRhaW5lci5ncm91cEJsZW5kTW9kZTtcbiAgcHJveHkuZ2xvYmFsRGlzcGxheVN0YXR1cyA9IGNvbnRhaW5lci5nbG9iYWxEaXNwbGF5U3RhdHVzO1xuICBwcm94eS5ncm91cFRyYW5zZm9ybSA9IGNvbnRhaW5lci5ncm91cFRyYW5zZm9ybTtcbiAgcHJveHkubG9jYWxEaXNwbGF5U3RhdHVzID0gY29udGFpbmVyLmxvY2FsRGlzcGxheVN0YXR1cztcbiAgcHJveHkuZ3JvdXBBbHBoYSA9IGNvbnRhaW5lci5ncm91cEFscGhhO1xuICBwcm94eS5fcm91bmRQaXhlbHMgPSBjb250YWluZXIuX3JvdW5kUGl4ZWxzO1xufVxuXG5leHBvcnQgeyBCaXRtYXBUZXh0UGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Qml0bWFwVGV4dFBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQml0bWFwVGV4dFBpcGUgfSBmcm9tICcuL0JpdG1hcFRleHRQaXBlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZXh0ZW5zaW9ucy5hZGQoQml0bWFwVGV4dFBpcGUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVRdWFkQm91bmRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGF0YS91cGRhdGVRdWFkQm91bmRzLm1qcyc7XG5pbXBvcnQgeyBCaWdQb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9vbC9Qb29sR3JvdXAubWpzJztcbmltcG9ydCB7IEJhdGNoYWJsZVNwcml0ZSB9IGZyb20gJy4uL3Nwcml0ZS9CYXRjaGFibGVTcHJpdGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBIVE1MVGV4dFBpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX2dwdVRleHQgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kID0gdGhpcy5kZXN0cm95UmVuZGVyYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fcmVuZGVyZXIucnVubmVycy5yZXNvbHV0aW9uQ2hhbmdlLmFkZCh0aGlzKTtcbiAgfVxuICByZXNvbHV0aW9uQ2hhbmdlKCkge1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl9ncHVUZXh0KSB7XG4gICAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ3B1VGV4dFtpXTtcbiAgICAgIGlmICghZ3B1VGV4dClcbiAgICAgICAgY29udGludWU7XG4gICAgICBjb25zdCB0ZXh0ID0gZ3B1VGV4dC5iYXRjaGFibGVTcHJpdGUucmVuZGVyYWJsZTtcbiAgICAgIGlmICh0ZXh0Ll9hdXRvUmVzb2x1dGlvbikge1xuICAgICAgICB0ZXh0Ll9yZXNvbHV0aW9uID0gdGhpcy5fcmVuZGVyZXIucmVzb2x1dGlvbjtcbiAgICAgICAgdGV4dC5vblZpZXdVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKGh0bWxUZXh0KSB7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dldEdwdVRleHQoaHRtbFRleHQpO1xuICAgIGNvbnN0IG5ld0tleSA9IGh0bWxUZXh0Ll9nZXRLZXkoKTtcbiAgICBpZiAoZ3B1VGV4dC50ZXh0dXJlTmVlZHNVcGxvYWRpbmcpIHtcbiAgICAgIGdwdVRleHQudGV4dHVyZU5lZWRzVXBsb2FkaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGdwdVRleHQuY3VycmVudEtleSAhPT0gbmV3S2V5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFkZFJlbmRlcmFibGUoaHRtbFRleHQsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dldEdwdVRleHQoaHRtbFRleHQpO1xuICAgIGNvbnN0IGJhdGNoYWJsZVNwcml0ZSA9IGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlO1xuICAgIGlmIChodG1sVGV4dC5fZGlkVGV4dFVwZGF0ZSkge1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dChodG1sVGV4dCk7XG4gICAgfVxuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmFkZFRvQmF0Y2goYmF0Y2hhYmxlU3ByaXRlLCBpbnN0cnVjdGlvblNldCk7XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZShodG1sVGV4dCkge1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KGh0bWxUZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAoaHRtbFRleHQuX2RpZFRleHRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHQoaHRtbFRleHQpO1xuICAgIH1cbiAgICBiYXRjaGFibGVTcHJpdGUuX2JhdGNoZXIudXBkYXRlRWxlbWVudChiYXRjaGFibGVTcHJpdGUpO1xuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKGh0bWxUZXh0KSB7XG4gICAgaHRtbFRleHQub2ZmKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQnlJZChodG1sVGV4dC51aWQpO1xuICB9XG4gIF9kZXN0cm95UmVuZGVyYWJsZUJ5SWQoaHRtbFRleHRVaWQpIHtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ3B1VGV4dFtodG1sVGV4dFVpZF07XG4gICAgdGhpcy5fcmVuZGVyZXIuaHRtbFRleHQuZGVjcmVhc2VSZWZlcmVuY2VDb3VudChncHVUZXh0LmN1cnJlbnRLZXkpO1xuICAgIEJpZ1Bvb2wucmV0dXJuKGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlKTtcbiAgICB0aGlzLl9ncHVUZXh0W2h0bWxUZXh0VWlkXSA9IG51bGw7XG4gIH1cbiAgX3VwZGF0ZVRleHQoaHRtbFRleHQpIHtcbiAgICBjb25zdCBuZXdLZXkgPSBodG1sVGV4dC5fZ2V0S2V5KCk7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dldEdwdVRleHQoaHRtbFRleHQpO1xuICAgIGNvbnN0IGJhdGNoYWJsZVNwcml0ZSA9IGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlO1xuICAgIGlmIChncHVUZXh0LmN1cnJlbnRLZXkgIT09IG5ld0tleSkge1xuICAgICAgdGhpcy5fdXBkYXRlR3B1VGV4dChodG1sVGV4dCkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBodG1sVGV4dC5fZGlkVGV4dFVwZGF0ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBodG1sVGV4dC5fc3R5bGUucGFkZGluZztcbiAgICB1cGRhdGVRdWFkQm91bmRzKGJhdGNoYWJsZVNwcml0ZS5ib3VuZHMsIGh0bWxUZXh0Ll9hbmNob3IsIGJhdGNoYWJsZVNwcml0ZS50ZXh0dXJlLCBwYWRkaW5nKTtcbiAgfVxuICBhc3luYyBfdXBkYXRlR3B1VGV4dChodG1sVGV4dCkge1xuICAgIGh0bWxUZXh0Ll9kaWRUZXh0VXBkYXRlID0gZmFsc2U7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dldEdwdVRleHQoaHRtbFRleHQpO1xuICAgIGlmIChncHVUZXh0LmdlbmVyYXRpbmdUZXh0dXJlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG5ld0tleSA9IGh0bWxUZXh0Ll9nZXRLZXkoKTtcbiAgICB0aGlzLl9yZW5kZXJlci5odG1sVGV4dC5kZWNyZWFzZVJlZmVyZW5jZUNvdW50KGdwdVRleHQuY3VycmVudEtleSk7XG4gICAgZ3B1VGV4dC5nZW5lcmF0aW5nVGV4dHVyZSA9IHRydWU7XG4gICAgZ3B1VGV4dC5jdXJyZW50S2V5ID0gbmV3S2V5O1xuICAgIGNvbnN0IHJlc29sdXRpb24gPSBodG1sVGV4dC5yZXNvbHV0aW9uID8/IHRoaXMuX3JlbmRlcmVyLnJlc29sdXRpb247XG4gICAgY29uc3QgdGV4dHVyZSA9IGF3YWl0IHRoaXMuX3JlbmRlcmVyLmh0bWxUZXh0LmdldE1hbmFnZWRUZXh0dXJlKFxuICAgICAgaHRtbFRleHQudGV4dCxcbiAgICAgIHJlc29sdXRpb24sXG4gICAgICBodG1sVGV4dC5fc3R5bGUsXG4gICAgICBodG1sVGV4dC5fZ2V0S2V5KClcbiAgICApO1xuICAgIGNvbnN0IGJhdGNoYWJsZVNwcml0ZSA9IGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlO1xuICAgIGJhdGNoYWJsZVNwcml0ZS50ZXh0dXJlID0gZ3B1VGV4dC50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICBncHVUZXh0LmdlbmVyYXRpbmdUZXh0dXJlID0gZmFsc2U7XG4gICAgZ3B1VGV4dC50ZXh0dXJlTmVlZHNVcGxvYWRpbmcgPSB0cnVlO1xuICAgIGh0bWxUZXh0Lm9uVmlld1VwZGF0ZSgpO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBodG1sVGV4dC5fc3R5bGUucGFkZGluZztcbiAgICB1cGRhdGVRdWFkQm91bmRzKGJhdGNoYWJsZVNwcml0ZS5ib3VuZHMsIGh0bWxUZXh0Ll9hbmNob3IsIGJhdGNoYWJsZVNwcml0ZS50ZXh0dXJlLCBwYWRkaW5nKTtcbiAgfVxuICBfZ2V0R3B1VGV4dChodG1sVGV4dCkge1xuICAgIHJldHVybiB0aGlzLl9ncHVUZXh0W2h0bWxUZXh0LnVpZF0gfHwgdGhpcy5pbml0R3B1VGV4dChodG1sVGV4dCk7XG4gIH1cbiAgaW5pdEdwdVRleHQoaHRtbFRleHQpIHtcbiAgICBjb25zdCBncHVUZXh0RGF0YSA9IHtcbiAgICAgIHRleHR1cmU6IFRleHR1cmUuRU1QVFksXG4gICAgICBjdXJyZW50S2V5OiBcIi0tXCIsXG4gICAgICBiYXRjaGFibGVTcHJpdGU6IEJpZ1Bvb2wuZ2V0KEJhdGNoYWJsZVNwcml0ZSksXG4gICAgICB0ZXh0dXJlTmVlZHNVcGxvYWRpbmc6IGZhbHNlLFxuICAgICAgZ2VuZXJhdGluZ1RleHR1cmU6IGZhbHNlXG4gICAgfTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0RGF0YS5iYXRjaGFibGVTcHJpdGU7XG4gICAgYmF0Y2hhYmxlU3ByaXRlLnJlbmRlcmFibGUgPSBodG1sVGV4dDtcbiAgICBiYXRjaGFibGVTcHJpdGUudHJhbnNmb3JtID0gaHRtbFRleHQuZ3JvdXBUcmFuc2Zvcm07XG4gICAgYmF0Y2hhYmxlU3ByaXRlLnRleHR1cmUgPSBUZXh0dXJlLkVNUFRZO1xuICAgIGJhdGNoYWJsZVNwcml0ZS5ib3VuZHMgPSB7IG1pblg6IDAsIG1heFg6IDEsIG1pblk6IDAsIG1heFk6IDAgfTtcbiAgICBiYXRjaGFibGVTcHJpdGUucm91bmRQaXhlbHMgPSB0aGlzLl9yZW5kZXJlci5fcm91bmRQaXhlbHMgfCBodG1sVGV4dC5fcm91bmRQaXhlbHM7XG4gICAgaHRtbFRleHQuX3Jlc29sdXRpb24gPSBodG1sVGV4dC5fYXV0b1Jlc29sdXRpb24gPyB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uIDogaHRtbFRleHQucmVzb2x1dGlvbjtcbiAgICB0aGlzLl9ncHVUZXh0W2h0bWxUZXh0LnVpZF0gPSBncHVUZXh0RGF0YTtcbiAgICBodG1sVGV4dC5vbihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgICByZXR1cm4gZ3B1VGV4dERhdGE7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZ3B1VGV4dCkge1xuICAgICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCeUlkKGkpO1xuICAgIH1cbiAgICB0aGlzLl9ncHVUZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5IVE1MVGV4dFBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcImh0bWxUZXh0XCJcbn07XG5cbmV4cG9ydCB7IEhUTUxUZXh0UGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SFRNTFRleHRQaXBlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbnNzdmcgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5jb25zdCBuc3hodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5jbGFzcyBIVE1MVGV4dFJlbmRlckRhdGEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN2Z1Jvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnNzdmcsIFwic3ZnXCIpO1xuICAgIHRoaXMuZm9yZWlnbk9iamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuc3N2ZywgXCJmb3JlaWduT2JqZWN0XCIpO1xuICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuc3hodG1sLCBcImRpdlwiKTtcbiAgICB0aGlzLnN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuc3hodG1sLCBcInN0eWxlXCIpO1xuICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBjb25zdCB7IGZvcmVpZ25PYmplY3QsIHN2Z1Jvb3QsIHN0eWxlRWxlbWVudCwgZG9tRWxlbWVudCB9ID0gdGhpcztcbiAgICBmb3JlaWduT2JqZWN0LnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiMTAwMDBcIik7XG4gICAgZm9yZWlnbk9iamVjdC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIxMDAwMFwiKTtcbiAgICBmb3JlaWduT2JqZWN0LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICBzdmdSb290LmFwcGVuZENoaWxkKGZvcmVpZ25PYmplY3QpO1xuICAgIGZvcmVpZ25PYmplY3QuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICBmb3JlaWduT2JqZWN0LmFwcGVuZENoaWxkKGRvbUVsZW1lbnQpO1xuICB9XG59XG5cbmV4cG9ydCB7IEhUTUxUZXh0UmVuZGVyRGF0YSwgbnNzdmcsIG5zeGh0bWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhUTUxUZXh0UmVuZGVyRGF0YS5tanMubWFwXG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uLy4uL2NvbG9yL0NvbG9yLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gdGV4dFN0eWxlVG9DU1Moc3R5bGUpIHtcbiAgY29uc3Qgc3Ryb2tlID0gc3R5bGUuX3N0cm9rZTtcbiAgY29uc3QgZmlsbCA9IHN0eWxlLl9maWxsO1xuICBjb25zdCBjc3NTdHlsZVN0cmluZyA9IFtcbiAgICBgY29sb3I6ICR7Q29sb3Iuc2hhcmVkLnNldFZhbHVlKGZpbGwuY29sb3IpLnRvSGV4KCl9YCxcbiAgICBgZm9udC1zaXplOiAke3N0eWxlLmZvbnRTaXplfXB4YCxcbiAgICBgZm9udC1mYW1pbHk6ICR7c3R5bGUuZm9udEZhbWlseX1gLFxuICAgIGBmb250LXdlaWdodDogJHtzdHlsZS5mb250V2VpZ2h0fWAsXG4gICAgYGZvbnQtc3R5bGU6ICR7c3R5bGUuZm9udFN0eWxlfWAsXG4gICAgYGZvbnQtdmFyaWFudDogJHtzdHlsZS5mb250VmFyaWFudH1gLFxuICAgIGBsZXR0ZXItc3BhY2luZzogJHtzdHlsZS5sZXR0ZXJTcGFjaW5nfXB4YCxcbiAgICBgdGV4dC1hbGlnbjogJHtzdHlsZS5hbGlnbn1gLFxuICAgIGBwYWRkaW5nOiAke3N0eWxlLnBhZGRpbmd9cHhgLFxuICAgIGB3aGl0ZS1zcGFjZTogJHtzdHlsZS53aGl0ZVNwYWNlID09PSBcInByZVwiICYmIHN0eWxlLndvcmRXcmFwID8gXCJwcmUtd3JhcFwiIDogc3R5bGUud2hpdGVTcGFjZX1gLFxuICAgIC4uLnN0eWxlLmxpbmVIZWlnaHQgPyBbYGxpbmUtaGVpZ2h0OiAke3N0eWxlLmxpbmVIZWlnaHR9cHhgXSA6IFtdLFxuICAgIC4uLnN0eWxlLndvcmRXcmFwID8gW1xuICAgICAgYHdvcmQtd3JhcDogJHtzdHlsZS5icmVha1dvcmRzID8gXCJicmVhay1hbGxcIiA6IFwiYnJlYWstd29yZFwifWAsXG4gICAgICBgbWF4LXdpZHRoOiAke3N0eWxlLndvcmRXcmFwV2lkdGh9cHhgXG4gICAgXSA6IFtdLFxuICAgIC4uLnN0cm9rZSA/IFtzdHJva2VUb0NTUyhzdHJva2UpXSA6IFtdLFxuICAgIC4uLnN0eWxlLmRyb3BTaGFkb3cgPyBbZHJvcFNoYWRvd1RvQ1NTKHN0eWxlLmRyb3BTaGFkb3cpXSA6IFtdLFxuICAgIC4uLnN0eWxlLmNzc092ZXJyaWRlc1xuICBdLmpvaW4oXCI7XCIpO1xuICBjb25zdCBjc3NTdHlsZXMgPSBbYGRpdiB7ICR7Y3NzU3R5bGVTdHJpbmd9IH1gXTtcbiAgdGFnU3R5bGVUb0NTUyhzdHlsZS50YWdTdHlsZXMsIGNzc1N0eWxlcyk7XG4gIHJldHVybiBjc3NTdHlsZXMuam9pbihcIiBcIik7XG59XG5mdW5jdGlvbiBkcm9wU2hhZG93VG9DU1MoZHJvcFNoYWRvd1N0eWxlKSB7XG4gIGNvbnN0IGNvbG9yID0gQ29sb3Iuc2hhcmVkLnNldFZhbHVlKGRyb3BTaGFkb3dTdHlsZS5jb2xvcikuc2V0QWxwaGEoZHJvcFNoYWRvd1N0eWxlLmFscGhhKS50b0hleGEoKTtcbiAgY29uc3QgeCA9IE1hdGgucm91bmQoTWF0aC5jb3MoZHJvcFNoYWRvd1N0eWxlLmFuZ2xlKSAqIGRyb3BTaGFkb3dTdHlsZS5kaXN0YW5jZSk7XG4gIGNvbnN0IHkgPSBNYXRoLnJvdW5kKE1hdGguc2luKGRyb3BTaGFkb3dTdHlsZS5hbmdsZSkgKiBkcm9wU2hhZG93U3R5bGUuZGlzdGFuY2UpO1xuICBjb25zdCBwb3NpdGlvbiA9IGAke3h9cHggJHt5fXB4YDtcbiAgaWYgKGRyb3BTaGFkb3dTdHlsZS5ibHVyID4gMCkge1xuICAgIHJldHVybiBgdGV4dC1zaGFkb3c6ICR7cG9zaXRpb259ICR7ZHJvcFNoYWRvd1N0eWxlLmJsdXJ9cHggJHtjb2xvcn1gO1xuICB9XG4gIHJldHVybiBgdGV4dC1zaGFkb3c6ICR7cG9zaXRpb259ICR7Y29sb3J9YDtcbn1cbmZ1bmN0aW9uIHN0cm9rZVRvQ1NTKHN0cm9rZSkge1xuICByZXR1cm4gW1xuICAgIGAtd2Via2l0LXRleHQtc3Ryb2tlLXdpZHRoOiAke3N0cm9rZS53aWR0aH1weGAsXG4gICAgYC13ZWJraXQtdGV4dC1zdHJva2UtY29sb3I6ICR7Q29sb3Iuc2hhcmVkLnNldFZhbHVlKHN0cm9rZS5jb2xvcikudG9IZXgoKX1gLFxuICAgIGB0ZXh0LXN0cm9rZS13aWR0aDogJHtzdHJva2Uud2lkdGh9cHhgLFxuICAgIGB0ZXh0LXN0cm9rZS1jb2xvcjogJHtDb2xvci5zaGFyZWQuc2V0VmFsdWUoc3Ryb2tlLmNvbG9yKS50b0hleCgpfWAsXG4gICAgXCJwYWludC1vcmRlcjogc3Ryb2tlXCJcbiAgXS5qb2luKFwiO1wiKTtcbn1cbmNvbnN0IHRlbXBsYXRlcyA9IHtcbiAgZm9udFNpemU6IGBmb250LXNpemU6IHt7VkFMVUV9fXB4YCxcbiAgZm9udEZhbWlseTogYGZvbnQtZmFtaWx5OiB7e1ZBTFVFfX1gLFxuICBmb250V2VpZ2h0OiBgZm9udC13ZWlnaHQ6IHt7VkFMVUV9fWAsXG4gIGZvbnRTdHlsZTogYGZvbnQtc3R5bGU6IHt7VkFMVUV9fWAsXG4gIGZvbnRWYXJpYW50OiBgZm9udC12YXJpYW50OiB7e1ZBTFVFfX1gLFxuICBsZXR0ZXJTcGFjaW5nOiBgbGV0dGVyLXNwYWNpbmc6IHt7VkFMVUV9fXB4YCxcbiAgYWxpZ246IGB0ZXh0LWFsaWduOiB7e1ZBTFVFfX1gLFxuICBwYWRkaW5nOiBgcGFkZGluZzoge3tWQUxVRX19cHhgLFxuICB3aGl0ZVNwYWNlOiBgd2hpdGUtc3BhY2U6IHt7VkFMVUV9fWAsXG4gIGxpbmVIZWlnaHQ6IGBsaW5lLWhlaWdodDoge3tWQUxVRX19cHhgLFxuICB3b3JkV3JhcFdpZHRoOiBgbWF4LXdpZHRoOiB7e1ZBTFVFfX1weGBcbn07XG5jb25zdCB0cmFuc2Zvcm0gPSB7XG4gIGZpbGw6ICh2YWx1ZSkgPT4gYGNvbG9yOiAke0NvbG9yLnNoYXJlZC5zZXRWYWx1ZSh2YWx1ZSkudG9IZXgoKX1gLFxuICBicmVha1dvcmRzOiAodmFsdWUpID0+IGB3b3JkLXdyYXA6ICR7dmFsdWUgPyBcImJyZWFrLWFsbFwiIDogXCJicmVhay13b3JkXCJ9YCxcbiAgc3Ryb2tlOiBzdHJva2VUb0NTUyxcbiAgZHJvcFNoYWRvdzogZHJvcFNoYWRvd1RvQ1NTXG59O1xuZnVuY3Rpb24gdGFnU3R5bGVUb0NTUyh0YWdTdHlsZXMsIG91dCkge1xuICBmb3IgKGNvbnN0IGkgaW4gdGFnU3R5bGVzKSB7XG4gICAgY29uc3QgdGFnU3R5bGUgPSB0YWdTdHlsZXNbaV07XG4gICAgY29uc3QgY3NzVGFnU3R5bGUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGogaW4gdGFnU3R5bGUpIHtcbiAgICAgIGlmICh0cmFuc2Zvcm1bal0pIHtcbiAgICAgICAgY3NzVGFnU3R5bGUucHVzaCh0cmFuc2Zvcm1bal0odGFnU3R5bGVbal0pKTtcbiAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVzW2pdKSB7XG4gICAgICAgIGNzc1RhZ1N0eWxlLnB1c2godGVtcGxhdGVzW2pdLnJlcGxhY2UoXCJ7e1ZBTFVFfX1cIiwgdGFnU3R5bGVbal0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0LnB1c2goYCR7aX0geyAke2Nzc1RhZ1N0eWxlLmpvaW4oXCI7XCIpfSB9YCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgdGV4dFN0eWxlVG9DU1MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHRTdHlsZVRvQ1NTLm1qcy5tYXBcbiIsImltcG9ydCB7IHdhcm4gfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nL3dhcm4ubWpzJztcbmltcG9ydCB7IFRleHRTdHlsZSB9IGZyb20gJy4uL3RleHQvVGV4dFN0eWxlLm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRleHRTdHlsZUtleSB9IGZyb20gJy4uL3RleHQvdXRpbHMvZ2VuZXJhdGVUZXh0U3R5bGVLZXkubWpzJztcbmltcG9ydCB7IHRleHRTdHlsZVRvQ1NTIH0gZnJvbSAnLi91dGlscy90ZXh0U3R5bGVUb0NTUy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEhUTUxUZXh0U3R5bGUgZXh0ZW5kcyBUZXh0U3R5bGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLl9jc3NPdmVycmlkZXMgPSBbXTtcbiAgICB0aGlzLmNzc092ZXJyaWRlcyA/PyAodGhpcy5jc3NPdmVycmlkZXMgPSBvcHRpb25zLmNzc092ZXJyaWRlcyk7XG4gICAgdGhpcy50YWdTdHlsZXMgPSBvcHRpb25zLnRhZ1N0eWxlcyA/PyB7fTtcbiAgfVxuICAvKiogTGlzdCBvZiBzdHlsZSBvdmVycmlkZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIEhUTUwgdGV4dC4gKi9cbiAgc2V0IGNzc092ZXJyaWRlcyh2YWx1ZSkge1xuICAgIHRoaXMuX2Nzc092ZXJyaWRlcyA9IHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuICBnZXQgY3NzT3ZlcnJpZGVzKCkge1xuICAgIHJldHVybiB0aGlzLl9jc3NPdmVycmlkZXM7XG4gIH1cbiAgX2dlbmVyYXRlS2V5KCkge1xuICAgIHRoaXMuX3N0eWxlS2V5ID0gZ2VuZXJhdGVUZXh0U3R5bGVLZXkodGhpcykgKyB0aGlzLl9jc3NPdmVycmlkZXMuam9pbihcIi1cIik7XG4gICAgcmV0dXJuIHRoaXMuX3N0eWxlS2V5O1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9jc3NTdHlsZSA9IG51bGw7XG4gICAgc3VwZXIudXBkYXRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgSFRNTFRleHRTdHlsZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhpcyBvbmUuXG4gICAqIEByZXR1cm5zIE5ldyBjbG9uZWQgSFRNTFRleHRTdHlsZSBvYmplY3RcbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgSFRNTFRleHRTdHlsZSh7XG4gICAgICBhbGlnbjogdGhpcy5hbGlnbixcbiAgICAgIGJyZWFrV29yZHM6IHRoaXMuYnJlYWtXb3JkcyxcbiAgICAgIGRyb3BTaGFkb3c6IHRoaXMuZHJvcFNoYWRvdyA/IHsgLi4udGhpcy5kcm9wU2hhZG93IH0gOiBudWxsLFxuICAgICAgZmlsbDogdGhpcy5fZmlsbCxcbiAgICAgIGZvbnRGYW1pbHk6IHRoaXMuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGlzLmZvbnRTaXplLFxuICAgICAgZm9udFN0eWxlOiB0aGlzLmZvbnRTdHlsZSxcbiAgICAgIGZvbnRWYXJpYW50OiB0aGlzLmZvbnRWYXJpYW50LFxuICAgICAgZm9udFdlaWdodDogdGhpcy5mb250V2VpZ2h0LFxuICAgICAgbGV0dGVyU3BhY2luZzogdGhpcy5sZXR0ZXJTcGFjaW5nLFxuICAgICAgbGluZUhlaWdodDogdGhpcy5saW5lSGVpZ2h0LFxuICAgICAgcGFkZGluZzogdGhpcy5wYWRkaW5nLFxuICAgICAgc3Ryb2tlOiB0aGlzLl9zdHJva2UsXG4gICAgICB3aGl0ZVNwYWNlOiB0aGlzLndoaXRlU3BhY2UsXG4gICAgICB3b3JkV3JhcDogdGhpcy53b3JkV3JhcCxcbiAgICAgIHdvcmRXcmFwV2lkdGg6IHRoaXMud29yZFdyYXBXaWR0aCxcbiAgICAgIGNzc092ZXJyaWRlczogdGhpcy5jc3NPdmVycmlkZXNcbiAgICB9KTtcbiAgfVxuICBnZXQgY3NzU3R5bGUoKSB7XG4gICAgaWYgKCF0aGlzLl9jc3NTdHlsZSkge1xuICAgICAgdGhpcy5fY3NzU3R5bGUgPSB0ZXh0U3R5bGVUb0NTUyh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2Nzc1N0eWxlO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBzdHlsZSBvdmVycmlkZSwgdGhpcyBjYW4gYmUgYW55IENTUyBwcm9wZXJ0eVxuICAgKiBpdCB3aWxsIG92ZXJyaWRlIGFueSBidWlsdC1pbiBzdHlsZS4gVGhpcyBpcyB0aGVcbiAgICogcHJvcGVydHkgYW5kIHRoZSB2YWx1ZSBhcyBhIHN0cmluZyAoZS5nLiwgYGNvbG9yOiByZWRgKS5cbiAgICogVGhpcyB3aWxsIG92ZXJyaWRlIGFueSBvdGhlciBpbnRlcm5hbCBzdHlsZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gQ1NTIHN0eWxlKHMpIHRvIGFkZC5cbiAgICogQGV4YW1wbGVcbiAgICogc3R5bGUuYWRkT3ZlcnJpZGUoJ2JhY2tncm91bmQtY29sb3I6IHJlZCcpO1xuICAgKi9cbiAgYWRkT3ZlcnJpZGUoLi4udmFsdWUpIHtcbiAgICBjb25zdCB0b0FkZCA9IHZhbHVlLmZpbHRlcigodikgPT4gIXRoaXMuY3NzT3ZlcnJpZGVzLmluY2x1ZGVzKHYpKTtcbiAgICBpZiAodG9BZGQubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5jc3NPdmVycmlkZXMucHVzaCguLi50b0FkZCk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGFueSBvdmVycmlkZXMgdGhhdCBtYXRjaCB0aGUgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIENTUyBzdHlsZSB0byByZW1vdmUuXG4gICAqIEBleGFtcGxlXG4gICAqIHN0eWxlLnJlbW92ZU92ZXJyaWRlKCdiYWNrZ3JvdW5kLWNvbG9yOiByZWQnKTtcbiAgICovXG4gIHJlbW92ZU92ZXJyaWRlKC4uLnZhbHVlKSB7XG4gICAgY29uc3QgdG9SZW1vdmUgPSB2YWx1ZS5maWx0ZXIoKHYpID0+IHRoaXMuY3NzT3ZlcnJpZGVzLmluY2x1ZGVzKHYpKTtcbiAgICBpZiAodG9SZW1vdmUubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5jc3NPdmVycmlkZXMgPSB0aGlzLmNzc092ZXJyaWRlcy5maWx0ZXIoKHYpID0+ICF0b1JlbW92ZS5pbmNsdWRlcyh2KSk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuICBzZXQgZmlsbCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICB3YXJuKFwiW0hUTUxUZXh0U3R5bGVdIG9ubHkgY29sb3IgZmlsbCBpcyBub3Qgc3VwcG9ydGVkIGJ5IEhUTUxUZXh0XCIpO1xuICAgIH1cbiAgICBzdXBlci5maWxsID0gdmFsdWU7XG4gIH1cbiAgc2V0IHN0cm9rZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICB3YXJuKFwiW0hUTUxUZXh0U3R5bGVdIG9ubHkgY29sb3Igc3Ryb2tlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSFRNTFRleHRcIik7XG4gICAgfVxuICAgIHN1cGVyLnN0cm9rZSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCB7IEhUTUxUZXh0U3R5bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh0bWxUZXh0U3R5bGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgbG9hZEZvbnRBc0Jhc2U2NCB9IGZyb20gJy4vbG9hZEZvbnRBc0Jhc2U2NC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRGb250Q1NTKHN0eWxlLCB1cmwpIHtcbiAgY29uc3QgZGF0YVNyYyA9IGF3YWl0IGxvYWRGb250QXNCYXNlNjQodXJsKTtcbiAgcmV0dXJuIGBAZm9udC1mYWNlIHtcbiAgICAgICAgZm9udC1mYW1pbHk6IFwiJHtzdHlsZS5mb250RmFtaWx5fVwiO1xuICAgICAgICBzcmM6IHVybCgnJHtkYXRhU3JjfScpO1xuICAgICAgICBmb250LXdlaWdodDogJHtzdHlsZS5mb250V2VpZ2h0fTtcbiAgICAgICAgZm9udC1zdHlsZTogJHtzdHlsZS5mb250U3R5bGV9O1xuICAgIH1gO1xufVxuXG5leHBvcnQgeyBsb2FkRm9udENTUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZEZvbnRDU1MubWpzLm1hcFxuIiwiaW1wb3J0IHsgRE9NQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uL2Vudmlyb25tZW50L2FkYXB0ZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5hc3luYyBmdW5jdGlvbiBsb2FkRm9udEFzQmFzZTY0KHVybCkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IERPTUFkYXB0ZXIuZ2V0KCkuZmV0Y2godXJsKTtcbiAgY29uc3QgYmxvYiA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKTtcbiAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgY29uc3QgZGF0YVNyYyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4gcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcbiAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDtcbiAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcbiAgfSk7XG4gIHJldHVybiBkYXRhU3JjO1xufVxuXG5leHBvcnQgeyBsb2FkRm9udEFzQmFzZTY0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkRm9udEFzQmFzZTY0Lm1qcy5tYXBcbiIsImltcG9ydCB7IENhY2hlIH0gZnJvbSAnLi4vLi4vLi4vYXNzZXRzL2NhY2hlL0NhY2hlLm1qcyc7XG5pbXBvcnQgeyBsb2FkRm9udENTUyB9IGZyb20gJy4vbG9hZEZvbnRDU1MubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBGb250U3R5bGVQcm9taXNlQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuYXN5bmMgZnVuY3Rpb24gZ2V0Rm9udENzcyhmb250RmFtaWxpZXMsIHN0eWxlLCBkZWZhdWx0T3B0aW9ucykge1xuICBjb25zdCBmb250UHJvbWlzZXMgPSBmb250RmFtaWxpZXMuZmlsdGVyKChmb250RmFtaWx5KSA9PiBDYWNoZS5oYXMoYCR7Zm9udEZhbWlseX0tYW5kLXVybGApKS5tYXAoKGZvbnRGYW1pbHksIGkpID0+IHtcbiAgICBpZiAoIUZvbnRTdHlsZVByb21pc2VDYWNoZS5oYXMoZm9udEZhbWlseSkpIHtcbiAgICAgIGNvbnN0IHsgdXJsIH0gPSBDYWNoZS5nZXQoYCR7Zm9udEZhbWlseX0tYW5kLXVybGApO1xuICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgRm9udFN0eWxlUHJvbWlzZUNhY2hlLnNldChmb250RmFtaWx5LCBsb2FkRm9udENTUyh7XG4gICAgICAgICAgZm9udFdlaWdodDogc3R5bGUuZm9udFdlaWdodCxcbiAgICAgICAgICBmb250U3R5bGU6IHN0eWxlLmZvbnRTdHlsZSxcbiAgICAgICAgICBmb250RmFtaWx5XG4gICAgICAgIH0sIHVybCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRm9udFN0eWxlUHJvbWlzZUNhY2hlLnNldChmb250RmFtaWx5LCBsb2FkRm9udENTUyh7XG4gICAgICAgICAgZm9udFdlaWdodDogZGVmYXVsdE9wdGlvbnMuZm9udFdlaWdodCxcbiAgICAgICAgICBmb250U3R5bGU6IGRlZmF1bHRPcHRpb25zLmZvbnRTdHlsZSxcbiAgICAgICAgICBmb250RmFtaWx5XG4gICAgICAgIH0sIHVybCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRm9udFN0eWxlUHJvbWlzZUNhY2hlLmdldChmb250RmFtaWx5KTtcbiAgfSk7XG4gIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoZm9udFByb21pc2VzKSkuam9pbihcIlxcblwiKTtcbn1cblxuZXhwb3J0IHsgRm9udFN0eWxlUHJvbWlzZUNhY2hlLCBnZXRGb250Q3NzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRGb250Q3NzLm1qcy5tYXBcbiIsImltcG9ydCB7IENhbnZhc1RleHRNZXRyaWNzIH0gZnJvbSAnLi4vLi4vdGV4dC9jYW52YXMvQ2FudmFzVGV4dE1ldHJpY3MubWpzJztcbmltcG9ydCB7IEhUTUxUZXh0UmVuZGVyRGF0YSB9IGZyb20gJy4uL0hUTUxUZXh0UmVuZGVyRGF0YS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmxldCB0ZW1wSFRNTFRleHRSZW5kZXJEYXRhO1xuZnVuY3Rpb24gbWVhc3VyZUh0bWxUZXh0KHRleHQsIHN0eWxlLCBmb250U3R5bGVDU1MsIGh0bWxUZXh0UmVuZGVyRGF0YSkge1xuICBodG1sVGV4dFJlbmRlckRhdGEgPSBodG1sVGV4dFJlbmRlckRhdGEgfHwgdGVtcEhUTUxUZXh0UmVuZGVyRGF0YSB8fCAodGVtcEhUTUxUZXh0UmVuZGVyRGF0YSA9IG5ldyBIVE1MVGV4dFJlbmRlckRhdGEoKSk7XG4gIGNvbnN0IHsgZG9tRWxlbWVudCwgc3R5bGVFbGVtZW50LCBzdmdSb290IH0gPSBodG1sVGV4dFJlbmRlckRhdGE7XG4gIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0gYDxzdHlsZT4ke3N0eWxlLmNzc1N0eWxlfTs8L3N0eWxlPjxkaXYgc3R5bGU9J3BhZGRpbmc6MCc+JHt0ZXh0fTwvZGl2PmA7XG4gIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJ0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDsgZGlzcGxheTogaW5saW5lLWJsb2NrXCIpO1xuICBpZiAoZm9udFN0eWxlQ1NTKSB7XG4gICAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gZm9udFN0eWxlQ1NTO1xuICB9XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3ZnUm9vdCk7XG4gIGNvbnN0IGNvbnRlbnRCb3VuZHMgPSBkb21FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBzdmdSb290LnJlbW92ZSgpO1xuICBjb25zdCBkZXNjZW5kZXJQYWRkaW5nID0gQ2FudmFzVGV4dE1ldHJpY3MubWVhc3VyZUZvbnQoc3R5bGUuZm9udFN0eWxlKS5kZXNjZW50O1xuICBjb25zdCBkb3VibGVQYWRkaW5nID0gc3R5bGUucGFkZGluZyAqIDI7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGNvbnRlbnRCb3VuZHMud2lkdGggLSBkb3VibGVQYWRkaW5nLFxuICAgIGhlaWdodDogY29udGVudEJvdW5kcy5oZWlnaHQgKyBkZXNjZW5kZXJQYWRkaW5nIC0gZG91YmxlUGFkZGluZ1xuICB9O1xufVxuXG5leHBvcnQgeyBtZWFzdXJlSHRtbFRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lYXN1cmVIdG1sVGV4dC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlUG9vbCB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZVBvb2wubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvdHlwZXMubWpzJztcbmltcG9ydCB7IGlzU2FmYXJpIH0gZnJvbSAnLi4vLi4vdXRpbHMvYnJvd3Nlci9pc1NhZmFyaS5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBnZXRQbzJUZXh0dXJlRnJvbVNvdXJjZSB9IGZyb20gJy4uL3RleHQvdXRpbHMvZ2V0UG8yVGV4dHVyZUZyb21Tb3VyY2UubWpzJztcbmltcG9ydCB7IEhUTUxUZXh0UmVuZGVyRGF0YSB9IGZyb20gJy4vSFRNTFRleHRSZW5kZXJEYXRhLm1qcyc7XG5pbXBvcnQgeyBIVE1MVGV4dFN0eWxlIH0gZnJvbSAnLi9IdG1sVGV4dFN0eWxlLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0Rm9udEZhbWlsaWVzIH0gZnJvbSAnLi91dGlscy9leHRyYWN0Rm9udEZhbWlsaWVzLm1qcyc7XG5pbXBvcnQgeyBnZXRGb250Q3NzIH0gZnJvbSAnLi91dGlscy9nZXRGb250Q3NzLm1qcyc7XG5pbXBvcnQgeyBnZXRTVkdVcmwgfSBmcm9tICcuL3V0aWxzL2dldFNWR1VybC5tanMnO1xuaW1wb3J0IHsgZ2V0VGVtcG9yYXJ5Q2FudmFzRnJvbUltYWdlIH0gZnJvbSAnLi91dGlscy9nZXRUZW1wb3JhcnlDYW52YXNGcm9tSW1hZ2UubWpzJztcbmltcG9ydCB7IGxvYWRTVkdJbWFnZSB9IGZyb20gJy4vdXRpbHMvbG9hZFNWR0ltYWdlLm1qcyc7XG5pbXBvcnQgeyBtZWFzdXJlSHRtbFRleHQgfSBmcm9tICcuL3V0aWxzL21lYXN1cmVIdG1sVGV4dC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEhUTUxUZXh0U3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlcyA9IHt9O1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY3JlYXRlQ2FudmFzID0gcmVuZGVyZXIudHlwZSA9PT0gUmVuZGVyZXJUeXBlLldFQkdQVTtcbiAgfVxuICBnZXRUZXh0dXJlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVpbGRUZXh0dXJlUHJvbWlzZShcbiAgICAgIG9wdGlvbnMudGV4dCxcbiAgICAgIG9wdGlvbnMucmVzb2x1dGlvbixcbiAgICAgIG9wdGlvbnMuc3R5bGVcbiAgICApO1xuICB9XG4gIGdldE1hbmFnZWRUZXh0dXJlKHRleHQsIHJlc29sdXRpb24sIHN0eWxlLCB0ZXh0S2V5KSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldKSB7XG4gICAgICB0aGlzLl9pbmNyZWFzZVJlZmVyZW5jZUNvdW50KHRleHRLZXkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldLnByb21pc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLl9idWlsZFRleHR1cmVQcm9taXNlKHRleHQsIHJlc29sdXRpb24sIHN0eWxlKS50aGVuKCh0ZXh0dXJlKSA9PiB7XG4gICAgICB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XS50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH0pO1xuICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldID0ge1xuICAgICAgdGV4dHVyZTogbnVsbCxcbiAgICAgIHByb21pc2UsXG4gICAgICB1c2FnZUNvdW50OiAxXG4gICAgfTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuICBhc3luYyBfYnVpbGRUZXh0dXJlUHJvbWlzZSh0ZXh0LCByZXNvbHV0aW9uLCBzdHlsZSkge1xuICAgIGNvbnN0IGh0bWxUZXh0RGF0YSA9IEJpZ1Bvb2wuZ2V0KEhUTUxUZXh0UmVuZGVyRGF0YSk7XG4gICAgY29uc3QgZm9udEZhbWlsaWVzID0gZXh0cmFjdEZvbnRGYW1pbGllcyh0ZXh0LCBzdHlsZSk7XG4gICAgY29uc3QgZm9udENTUyA9IGF3YWl0IGdldEZvbnRDc3MoXG4gICAgICBmb250RmFtaWxpZXMsXG4gICAgICBzdHlsZSxcbiAgICAgIEhUTUxUZXh0U3R5bGUuZGVmYXVsdFRleHRTdHlsZVxuICAgICk7XG4gICAgY29uc3QgbWVhc3VyZWQgPSBtZWFzdXJlSHRtbFRleHQodGV4dCwgc3R5bGUsIGZvbnRDU1MsIGh0bWxUZXh0RGF0YSk7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubWF4KDEsIG1lYXN1cmVkLndpZHRoKSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChNYXRoLmNlaWwoTWF0aC5tYXgoMSwgbWVhc3VyZWQuaGVpZ2h0KSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGNvbnN0IGltYWdlID0gaHRtbFRleHREYXRhLmltYWdlO1xuICAgIGNvbnN0IHV2U2FmZU9mZnNldCA9IDI7XG4gICAgaW1hZ2Uud2lkdGggPSAod2lkdGggfCAwKSArIHV2U2FmZU9mZnNldDtcbiAgICBpbWFnZS5oZWlnaHQgPSAoaGVpZ2h0IHwgMCkgKyB1dlNhZmVPZmZzZXQ7XG4gICAgY29uc3Qgc3ZnVVJMID0gZ2V0U1ZHVXJsKHRleHQsIHN0eWxlLCByZXNvbHV0aW9uLCBmb250Q1NTLCBodG1sVGV4dERhdGEpO1xuICAgIGF3YWl0IGxvYWRTVkdJbWFnZShpbWFnZSwgc3ZnVVJMLCBpc1NhZmFyaSgpICYmIGZvbnRGYW1pbGllcy5sZW5ndGggPiAwKTtcbiAgICBsZXQgcmVzb3VyY2UgPSBpbWFnZTtcbiAgICBpZiAodGhpcy5fY3JlYXRlQ2FudmFzKSB7XG4gICAgICByZXNvdXJjZSA9IGdldFRlbXBvcmFyeUNhbnZhc0Zyb21JbWFnZShpbWFnZSwgcmVzb2x1dGlvbik7XG4gICAgfVxuICAgIGNvbnN0IHRleHR1cmUgPSBnZXRQbzJUZXh0dXJlRnJvbVNvdXJjZShcbiAgICAgIHJlc291cmNlLFxuICAgICAgaW1hZ2Uud2lkdGggLSB1dlNhZmVPZmZzZXQsXG4gICAgICBpbWFnZS5oZWlnaHQgLSB1dlNhZmVPZmZzZXQsXG4gICAgICByZXNvbHV0aW9uXG4gICAgKTtcbiAgICBpZiAodGhpcy5fY3JlYXRlQ2FudmFzKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci50ZXh0dXJlLmluaXRTb3VyY2UodGV4dHVyZS5zb3VyY2UpO1xuICAgIH1cbiAgICBCaWdQb29sLnJldHVybihodG1sVGV4dERhdGEpO1xuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG4gIF9pbmNyZWFzZVJlZmVyZW5jZUNvdW50KHRleHRLZXkpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XS51c2FnZUNvdW50Kys7XG4gIH1cbiAgZGVjcmVhc2VSZWZlcmVuY2VDb3VudCh0ZXh0S2V5KSB7XG4gICAgY29uc3QgYWN0aXZlVGV4dHVyZSA9IHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldO1xuICAgIGlmICghYWN0aXZlVGV4dHVyZSlcbiAgICAgIHJldHVybjtcbiAgICBhY3RpdmVUZXh0dXJlLnVzYWdlQ291bnQtLTtcbiAgICBpZiAoYWN0aXZlVGV4dHVyZS51c2FnZUNvdW50ID09PSAwKSB7XG4gICAgICBpZiAoYWN0aXZlVGV4dHVyZS50ZXh0dXJlKSB7XG4gICAgICAgIHRoaXMuX2NsZWFuVXAoYWN0aXZlVGV4dHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVUZXh0dXJlLnByb21pc2UudGhlbigodGV4dHVyZSkgPT4ge1xuICAgICAgICAgIGFjdGl2ZVRleHR1cmUudGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgICAgdGhpcy5fY2xlYW5VcChhY3RpdmVUZXh0dXJlKTtcbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgIHdhcm4oXCJIVE1MVGV4dFN5c3RlbTogRmFpbGVkIHRvIGNsZWFuIHRleHR1cmVcIik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0gPSBudWxsO1xuICAgIH1cbiAgfVxuICBfY2xlYW5VcChhY3RpdmVUZXh0dXJlKSB7XG4gICAgVGV4dHVyZVBvb2wucmV0dXJuVGV4dHVyZShhY3RpdmVUZXh0dXJlLnRleHR1cmUpO1xuICAgIGFjdGl2ZVRleHR1cmUudGV4dHVyZS5zb3VyY2UucmVzb3VyY2UgPSBudWxsO1xuICAgIGFjdGl2ZVRleHR1cmUudGV4dHVyZS5zb3VyY2UudXBsb2FkTWV0aG9kSWQgPSBcInVua25vd25cIjtcbiAgfVxuICBnZXRSZWZlcmVuY2VDb3VudCh0ZXh0S2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldLnVzYWdlQ291bnQ7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlcyA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5IVE1MVGV4dFN5c3RlbS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMU3lzdGVtLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVU3lzdGVtLFxuICAgIEV4dGVuc2lvblR5cGUuQ2FudmFzU3lzdGVtXG4gIF0sXG4gIG5hbWU6IFwiaHRtbFRleHRcIlxufTtcbkhUTUxUZXh0U3lzdGVtLmRlZmF1bHRGb250T3B0aW9ucyA9IHtcbiAgZm9udEZhbWlseTogXCJBcmlhbFwiLFxuICBmb250U3R5bGU6IFwibm9ybWFsXCIsXG4gIGZvbnRXZWlnaHQ6IFwibm9ybWFsXCJcbn07XG5cbmV4cG9ydCB7IEhUTUxUZXh0U3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IVE1MVGV4dFN5c3RlbS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGV4dHJhY3RGb250RmFtaWxpZXModGV4dCwgc3R5bGUpIHtcbiAgY29uc3QgZm9udEZhbWlseSA9IHN0eWxlLmZvbnRGYW1pbHk7XG4gIGNvbnN0IGZvbnRGYW1pbGllcyA9IFtdO1xuICBjb25zdCBkZWR1cGUgPSB7fTtcbiAgY29uc3QgcmVnZXggPSAvZm9udC1mYW1pbHk6KFteO1wiXFxzXSspL2c7XG4gIGNvbnN0IG1hdGNoZXMgPSB0ZXh0Lm1hdGNoKHJlZ2V4KTtcbiAgZnVuY3Rpb24gYWRkRm9udEZhbWlseShmb250RmFtaWx5Mikge1xuICAgIGlmICghZGVkdXBlW2ZvbnRGYW1pbHkyXSkge1xuICAgICAgZm9udEZhbWlsaWVzLnB1c2goZm9udEZhbWlseTIpO1xuICAgICAgZGVkdXBlW2ZvbnRGYW1pbHkyXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGZvbnRGYW1pbHkpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb250RmFtaWx5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBhZGRGb250RmFtaWx5KGZvbnRGYW1pbHlbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhZGRGb250RmFtaWx5KGZvbnRGYW1pbHkpO1xuICB9XG4gIGlmIChtYXRjaGVzKSB7XG4gICAgbWF0Y2hlcy5mb3JFYWNoKChtYXRjaCkgPT4ge1xuICAgICAgY29uc3QgZm9udEZhbWlseTIgPSBtYXRjaC5zcGxpdChcIjpcIilbMV0udHJpbSgpO1xuICAgICAgYWRkRm9udEZhbWlseShmb250RmFtaWx5Mik7XG4gICAgfSk7XG4gIH1cbiAgZm9yIChjb25zdCBpIGluIHN0eWxlLnRhZ1N0eWxlcykge1xuICAgIGNvbnN0IGZvbnRGYW1pbHkyID0gc3R5bGUudGFnU3R5bGVzW2ldLmZvbnRGYW1pbHk7XG4gICAgYWRkRm9udEZhbWlseShmb250RmFtaWx5Mik7XG4gIH1cbiAgcmV0dXJuIGZvbnRGYW1pbGllcztcbn1cblxuZXhwb3J0IHsgZXh0cmFjdEZvbnRGYW1pbGllcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdEZvbnRGYW1pbGllcy5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdldFNWR1VybCh0ZXh0LCBzdHlsZSwgcmVzb2x1dGlvbiwgZm9udENTUywgaHRtbFRleHREYXRhKSB7XG4gIGNvbnN0IHsgZG9tRWxlbWVudCwgc3R5bGVFbGVtZW50LCBzdmdSb290IH0gPSBodG1sVGV4dERhdGE7XG4gIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0gYDxzdHlsZT4ke3N0eWxlLmNzc1N0eWxlfTwvc3R5bGU+PGRpdiBzdHlsZT0ncGFkZGluZzowOyc+JHt0ZXh0fTwvZGl2PmA7XG4gIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgYHRyYW5zZm9ybTogc2NhbGUoJHtyZXNvbHV0aW9ufSk7dHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7IGRpc3BsYXk6IGlubGluZS1ibG9ja2ApO1xuICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBmb250Q1NTO1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGh0bWxUZXh0RGF0YS5pbWFnZTtcbiAgc3ZnUm9vdC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aC50b1N0cmluZygpKTtcbiAgc3ZnUm9vdC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgaGVpZ2h0LnRvU3RyaW5nKCkpO1xuICByZXR1cm4gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhzdmdSb290KTtcbn1cblxuZXhwb3J0IHsgZ2V0U1ZHVXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTVkdVcmwubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBsb2FkU1ZHSW1hZ2UoaW1hZ2UsIHVybCwgZGVsYXkpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZTIpID0+IHNldFRpbWVvdXQocmVzb2x2ZTIsIDEwMCkpO1xuICAgIH1cbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfTtcbiAgICBpbWFnZS5zcmMgPSBgZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwke2VuY29kZVVSSUNvbXBvbmVudCh1cmwpfWA7XG4gICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgbG9hZFNWR0ltYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkU1ZHSW1hZ2UubWpzLm1hcFxuIiwiaW1wb3J0IHsgRE9NQWRhcHRlciB9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50L2FkYXB0ZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgY29uc3QgeyB1c2VyQWdlbnQgfSA9IERPTUFkYXB0ZXIuZ2V0KCkuZ2V0TmF2aWdhdG9yKCk7XG4gIHJldHVybiAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KHVzZXJBZ2VudCk7XG59XG5cbmV4cG9ydCB7IGlzU2FmYXJpIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NhZmFyaS5tanMubWFwXG4iLCJpbXBvcnQgeyBDYW52YXNQb29sIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9DYW52YXNQb29sLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2V0VGVtcG9yYXJ5Q2FudmFzRnJvbUltYWdlKGltYWdlLCByZXNvbHV0aW9uKSB7XG4gIGNvbnN0IGNhbnZhc0FuZENvbnRleHQgPSBDYW52YXNQb29sLmdldE9wdGltYWxDYW52YXNBbmRDb250ZXh0KFxuICAgIGltYWdlLndpZHRoLFxuICAgIGltYWdlLmhlaWdodCxcbiAgICByZXNvbHV0aW9uXG4gICk7XG4gIGNvbnN0IHsgY29udGV4dCB9ID0gY2FudmFzQW5kQ29udGV4dDtcbiAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG4gIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgQ2FudmFzUG9vbC5yZXR1cm5DYW52YXNBbmRDb250ZXh0KGNhbnZhc0FuZENvbnRleHQpO1xuICByZXR1cm4gY2FudmFzQW5kQ29udGV4dC5jYW52YXM7XG59XG5cbmV4cG9ydCB7IGdldFRlbXBvcmFyeUNhbnZhc0Zyb21JbWFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VGVtcG9yYXJ5Q2FudmFzRnJvbUltYWdlLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEhUTUxUZXh0UGlwZSB9IGZyb20gJy4vSFRNTFRleHRQaXBlLm1qcyc7XG5pbXBvcnQgeyBIVE1MVGV4dFN5c3RlbSB9IGZyb20gJy4vSFRNTFRleHRTeXN0ZW0ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChIVE1MVGV4dFN5c3RlbSk7XG5leHRlbnNpb25zLmFkZChIVE1MVGV4dFBpcGUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVRdWFkQm91bmRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZGF0YS91cGRhdGVRdWFkQm91bmRzLm1qcyc7XG5pbXBvcnQgeyBCaWdQb29sIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcG9vbC9Qb29sR3JvdXAubWpzJztcbmltcG9ydCB7IEJhdGNoYWJsZVNwcml0ZSB9IGZyb20gJy4uLy4uL3Nwcml0ZS9CYXRjaGFibGVTcHJpdGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBDYW52YXNUZXh0UGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZ3B1VGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQgPSB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5ydW5uZXJzLnJlc29sdXRpb25DaGFuZ2UuYWRkKHRoaXMpO1xuICB9XG4gIHJlc29sdXRpb25DaGFuZ2UoKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dwdVRleHQpIHtcbiAgICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9ncHVUZXh0W2ldO1xuICAgICAgaWYgKCFncHVUZXh0KVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNvbnN0IHRleHQgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZS5yZW5kZXJhYmxlO1xuICAgICAgaWYgKHRleHQuX2F1dG9SZXNvbHV0aW9uKSB7XG4gICAgICAgIHRleHQuX3Jlc29sdXRpb24gPSB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uO1xuICAgICAgICB0ZXh0Lm9uVmlld1VwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YWxpZGF0ZVJlbmRlcmFibGUodGV4dCkge1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KHRleHQpO1xuICAgIGNvbnN0IG5ld0tleSA9IHRleHQuX2dldEtleSgpO1xuICAgIGlmIChncHVUZXh0LmN1cnJlbnRLZXkgIT09IG5ld0tleSkge1xuICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLl9yZW5kZXJlci5jYW52YXNUZXh0LmdldFRleHR1cmVTaXplKFxuICAgICAgICB0ZXh0LnRleHQsXG4gICAgICAgIHRleHQucmVzb2x1dGlvbixcbiAgICAgICAgdGV4dC5fc3R5bGVcbiAgICAgICk7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIGlzIG9ubHkgYmVpbmcgdXNlZCBieSB0aGlzIHRleHQ6XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLmNhbnZhc1RleHQuZ2V0UmVmZXJlbmNlQ291bnQoZ3B1VGV4dC5jdXJyZW50S2V5KSA9PT0gMSAmJiB3aWR0aCA9PT0gZ3B1VGV4dC50ZXh0dXJlLl9zb3VyY2Uud2lkdGggJiYgaGVpZ2h0ID09PSBncHVUZXh0LnRleHR1cmUuX3NvdXJjZS5oZWlnaHRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFkZFJlbmRlcmFibGUodGV4dCwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ2V0R3B1VGV4dCh0ZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAodGV4dC5fZGlkVGV4dFVwZGF0ZSkge1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dCh0ZXh0KTtcbiAgICB9XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMuYmF0Y2guYWRkVG9CYXRjaChiYXRjaGFibGVTcHJpdGUsIGluc3RydWN0aW9uU2V0KTtcbiAgfVxuICB1cGRhdGVSZW5kZXJhYmxlKHRleHQpIHtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ2V0R3B1VGV4dCh0ZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAodGV4dC5fZGlkVGV4dFVwZGF0ZSkge1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dCh0ZXh0KTtcbiAgICB9XG4gICAgYmF0Y2hhYmxlU3ByaXRlLl9iYXRjaGVyLnVwZGF0ZUVsZW1lbnQoYmF0Y2hhYmxlU3ByaXRlKTtcbiAgfVxuICBkZXN0cm95UmVuZGVyYWJsZSh0ZXh0KSB7XG4gICAgdGV4dC5vZmYoXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCeUlkKHRleHQudWlkKTtcbiAgfVxuICBfZGVzdHJveVJlbmRlcmFibGVCeUlkKHRleHRVaWQpIHtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ3B1VGV4dFt0ZXh0VWlkXTtcbiAgICB0aGlzLl9yZW5kZXJlci5jYW52YXNUZXh0LmRlY3JlYXNlUmVmZXJlbmNlQ291bnQoZ3B1VGV4dC5jdXJyZW50S2V5KTtcbiAgICBCaWdQb29sLnJldHVybihncHVUZXh0LmJhdGNoYWJsZVNwcml0ZSk7XG4gICAgdGhpcy5fZ3B1VGV4dFt0ZXh0VWlkXSA9IG51bGw7XG4gIH1cbiAgX3VwZGF0ZVRleHQodGV4dCkge1xuICAgIGNvbnN0IG5ld0tleSA9IHRleHQuX2dldEtleSgpO1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KHRleHQpO1xuICAgIGNvbnN0IGJhdGNoYWJsZVNwcml0ZSA9IGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlO1xuICAgIGlmIChncHVUZXh0LmN1cnJlbnRLZXkgIT09IG5ld0tleSkge1xuICAgICAgdGhpcy5fdXBkYXRlR3B1VGV4dCh0ZXh0KTtcbiAgICB9XG4gICAgdGV4dC5fZGlkVGV4dFVwZGF0ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0ZXh0Ll9zdHlsZS5wYWRkaW5nO1xuICAgIHVwZGF0ZVF1YWRCb3VuZHMoYmF0Y2hhYmxlU3ByaXRlLmJvdW5kcywgdGV4dC5fYW5jaG9yLCBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSwgcGFkZGluZyk7XG4gIH1cbiAgX3VwZGF0ZUdwdVRleHQodGV4dCkge1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KHRleHQpO1xuICAgIGNvbnN0IGJhdGNoYWJsZVNwcml0ZSA9IGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlO1xuICAgIGlmIChncHVUZXh0LnRleHR1cmUpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmNhbnZhc1RleHQuZGVjcmVhc2VSZWZlcmVuY2VDb3VudChncHVUZXh0LmN1cnJlbnRLZXkpO1xuICAgIH1cbiAgICBncHVUZXh0LnRleHR1cmUgPSBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSA9IHRoaXMuX3JlbmRlcmVyLmNhbnZhc1RleHQuZ2V0TWFuYWdlZFRleHR1cmUodGV4dCk7XG4gICAgZ3B1VGV4dC5jdXJyZW50S2V5ID0gdGV4dC5fZ2V0S2V5KCk7XG4gICAgYmF0Y2hhYmxlU3ByaXRlLnRleHR1cmUgPSBncHVUZXh0LnRleHR1cmU7XG4gIH1cbiAgX2dldEdwdVRleHQodGV4dCkge1xuICAgIHJldHVybiB0aGlzLl9ncHVUZXh0W3RleHQudWlkXSB8fCB0aGlzLmluaXRHcHVUZXh0KHRleHQpO1xuICB9XG4gIGluaXRHcHVUZXh0KHRleHQpIHtcbiAgICBjb25zdCBncHVUZXh0RGF0YSA9IHtcbiAgICAgIHRleHR1cmU6IG51bGwsXG4gICAgICBjdXJyZW50S2V5OiBcIi0tXCIsXG4gICAgICBiYXRjaGFibGVTcHJpdGU6IEJpZ1Bvb2wuZ2V0KEJhdGNoYWJsZVNwcml0ZSlcbiAgICB9O1xuICAgIGdwdVRleHREYXRhLmJhdGNoYWJsZVNwcml0ZS5yZW5kZXJhYmxlID0gdGV4dDtcbiAgICBncHVUZXh0RGF0YS5iYXRjaGFibGVTcHJpdGUudHJhbnNmb3JtID0gdGV4dC5ncm91cFRyYW5zZm9ybTtcbiAgICBncHVUZXh0RGF0YS5iYXRjaGFibGVTcHJpdGUuYm91bmRzID0geyBtaW5YOiAwLCBtYXhYOiAxLCBtaW5ZOiAwLCBtYXhZOiAwIH07XG4gICAgZ3B1VGV4dERhdGEuYmF0Y2hhYmxlU3ByaXRlLnJvdW5kUGl4ZWxzID0gdGhpcy5fcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgdGV4dC5fcm91bmRQaXhlbHM7XG4gICAgdGhpcy5fZ3B1VGV4dFt0ZXh0LnVpZF0gPSBncHVUZXh0RGF0YTtcbiAgICB0ZXh0Ll9yZXNvbHV0aW9uID0gdGV4dC5fYXV0b1Jlc29sdXRpb24gPyB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uIDogdGV4dC5yZXNvbHV0aW9uO1xuICAgIHRoaXMuX3VwZGF0ZVRleHQodGV4dCk7XG4gICAgdGV4dC5vbihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgICByZXR1cm4gZ3B1VGV4dERhdGE7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZ3B1VGV4dCkge1xuICAgICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCeUlkKGkpO1xuICAgIH1cbiAgICB0aGlzLl9ncHVUZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5DYW52YXNUZXh0UGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwidGV4dFwiXG59O1xuXG5leHBvcnQgeyBDYW52YXNUZXh0UGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FudmFzVGV4dFBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vbWF0aHMvc2hhcGVzL1JlY3RhbmdsZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNoZWNrUm93KGRhdGEsIHdpZHRoLCB5KSB7XG4gIGZvciAobGV0IHggPSAwLCBpbmRleCA9IDQgKiB5ICogd2lkdGg7IHggPCB3aWR0aDsgKyt4LCBpbmRleCArPSA0KSB7XG4gICAgaWYgKGRhdGFbaW5kZXggKyAzXSAhPT0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNoZWNrQ29sdW1uKGRhdGEsIHdpZHRoLCB4LCB0b3AsIGJvdHRvbSkge1xuICBjb25zdCBzdHJpZGUgPSA0ICogd2lkdGg7XG4gIGZvciAobGV0IHkgPSB0b3AsIGluZGV4ID0gdG9wICogc3RyaWRlICsgNCAqIHg7IHkgPD0gYm90dG9tOyArK3ksIGluZGV4ICs9IHN0cmlkZSkge1xuICAgIGlmIChkYXRhW2luZGV4ICsgM10gIT09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBnZXRDYW52YXNCb3VuZGluZ0JveChjYW52YXMsIHJlc29sdXRpb24gPSAxKSB7XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7XG4gICAgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlXG4gIH0pO1xuICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGNhbnZhcyAyRCBjb250ZXh0XCIpO1xuICB9XG4gIGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICBjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHRvcCA9IDA7XG4gIGxldCByaWdodCA9IHdpZHRoIC0gMTtcbiAgbGV0IGJvdHRvbSA9IGhlaWdodCAtIDE7XG4gIHdoaWxlICh0b3AgPCBoZWlnaHQgJiYgY2hlY2tSb3coZGF0YSwgd2lkdGgsIHRvcCkpXG4gICAgKyt0b3A7XG4gIGlmICh0b3AgPT09IGhlaWdodClcbiAgICByZXR1cm4gUmVjdGFuZ2xlLkVNUFRZO1xuICB3aGlsZSAoY2hlY2tSb3coZGF0YSwgd2lkdGgsIGJvdHRvbSkpXG4gICAgLS1ib3R0b207XG4gIHdoaWxlIChjaGVja0NvbHVtbihkYXRhLCB3aWR0aCwgbGVmdCwgdG9wLCBib3R0b20pKVxuICAgICsrbGVmdDtcbiAgd2hpbGUgKGNoZWNrQ29sdW1uKGRhdGEsIHdpZHRoLCByaWdodCwgdG9wLCBib3R0b20pKVxuICAgIC0tcmlnaHQ7XG4gICsrcmlnaHQ7XG4gICsrYm90dG9tO1xuICByZXR1cm4gbmV3IFJlY3RhbmdsZShsZWZ0IC8gcmVzb2x1dGlvbiwgdG9wIC8gcmVzb2x1dGlvbiwgKHJpZ2h0IC0gbGVmdCkgLyByZXNvbHV0aW9uLCAoYm90dG9tIC0gdG9wKSAvIHJlc29sdXRpb24pO1xufVxuXG5leHBvcnQgeyBnZXRDYW52YXNCb3VuZGluZ0JveCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q2FudmFzQm91bmRpbmdCb3gubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9jb2xvci9Db2xvci5tanMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgbmV4dFBvdzIgfSBmcm9tICcuLi8uLi8uLi9tYXRocy9taXNjL3BvdzIubWpzJztcbmltcG9ydCB7IENhbnZhc1Bvb2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL0NhbnZhc1Bvb2wubWpzJztcbmltcG9ydCB7IFRleHR1cmVQb29sIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlUG9vbC5tanMnO1xuaW1wb3J0IHsgZ2V0Q2FudmFzQm91bmRpbmdCb3ggfSBmcm9tICcuLi8uLi8uLi91dGlscy9jYW52YXMvZ2V0Q2FudmFzQm91bmRpbmdCb3gubWpzJztcbmltcG9ydCB7IGRlcHJlY2F0aW9uIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy9kZXByZWNhdGlvbi5tanMnO1xuaW1wb3J0IHsgVGV4dFN0eWxlIH0gZnJvbSAnLi4vVGV4dFN0eWxlLm1qcyc7XG5pbXBvcnQgeyBnZXRQbzJUZXh0dXJlRnJvbVNvdXJjZSB9IGZyb20gJy4uL3V0aWxzL2dldFBvMlRleHR1cmVGcm9tU291cmNlLm1qcyc7XG5pbXBvcnQgeyBDYW52YXNUZXh0TWV0cmljcyB9IGZyb20gJy4vQ2FudmFzVGV4dE1ldHJpY3MubWpzJztcbmltcG9ydCB7IGZvbnRTdHJpbmdGcm9tVGV4dFN0eWxlIH0gZnJvbSAnLi91dGlscy9mb250U3RyaW5nRnJvbVRleHRTdHlsZS5tanMnO1xuaW1wb3J0IHsgZ2V0Q2FudmFzRmlsbFN0eWxlIH0gZnJvbSAnLi91dGlscy9nZXRDYW52YXNGaWxsU3R5bGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBDYW52YXNUZXh0U3lzdGVtIHtcbiAgY29uc3RydWN0b3IoX3JlbmRlcmVyKSB7XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZXMgPSB7fTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgfVxuICBnZXRUZXh0dXJlU2l6ZSh0ZXh0LCByZXNvbHV0aW9uLCBzdHlsZSkge1xuICAgIGNvbnN0IG1lYXN1cmVkID0gQ2FudmFzVGV4dE1ldHJpY3MubWVhc3VyZVRleHQodGV4dCB8fCBcIiBcIiwgc3R5bGUpO1xuICAgIGxldCB3aWR0aCA9IE1hdGguY2VpbChNYXRoLmNlaWwoTWF0aC5tYXgoMSwgbWVhc3VyZWQud2lkdGgpICsgc3R5bGUucGFkZGluZyAqIDIpICogcmVzb2x1dGlvbik7XG4gICAgbGV0IGhlaWdodCA9IE1hdGguY2VpbChNYXRoLmNlaWwoTWF0aC5tYXgoMSwgbWVhc3VyZWQuaGVpZ2h0KSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIHdpZHRoID0gTWF0aC5jZWlsKHdpZHRoIC0gMWUtNik7XG4gICAgaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAtIDFlLTYpO1xuICAgIHdpZHRoID0gbmV4dFBvdzIod2lkdGgpO1xuICAgIGhlaWdodCA9IG5leHRQb3cyKGhlaWdodCk7XG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9O1xuICB9XG4gIGdldFRleHR1cmUob3B0aW9ucywgcmVzb2x1dGlvbiwgc3R5bGUsIF90ZXh0S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBkZXByZWNhdGlvbihcIjguMC4wXCIsIFwiQ2FudmFzVGV4dFN5c3RlbS5nZXRUZXh0dXJlOiBVc2Ugb2JqZWN0IFRleHRPcHRpb25zIGluc3RlYWQgb2Ygc2VwYXJhdGUgYXJndW1lbnRzXCIpO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgdGV4dDogb3B0aW9ucyxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHJlc29sdXRpb25cbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghKG9wdGlvbnMuc3R5bGUgaW5zdGFuY2VvZiBUZXh0U3R5bGUpKSB7XG4gICAgICBvcHRpb25zLnN0eWxlID0gbmV3IFRleHRTdHlsZShvcHRpb25zLnN0eWxlKTtcbiAgICB9XG4gICAgY29uc3QgeyB0ZXh0dXJlLCBjYW52YXNBbmRDb250ZXh0IH0gPSB0aGlzLmNyZWF0ZVRleHR1cmVBbmRDYW52YXMoXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgICB0aGlzLl9yZW5kZXJlci50ZXh0dXJlLmluaXRTb3VyY2UodGV4dHVyZS5fc291cmNlKTtcbiAgICBDYW52YXNQb29sLnJldHVybkNhbnZhc0FuZENvbnRleHQoY2FudmFzQW5kQ29udGV4dCk7XG4gICAgcmV0dXJuIHRleHR1cmU7XG4gIH1cbiAgY3JlYXRlVGV4dHVyZUFuZENhbnZhcyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyB0ZXh0LCBzdHlsZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCByZXNvbHV0aW9uID0gb3B0aW9ucy5yZXNvbHV0aW9uID8/IHRoaXMuX3JlbmRlcmVyLnJlc29sdXRpb247XG4gICAgY29uc3QgbWVhc3VyZWQgPSBDYW52YXNUZXh0TWV0cmljcy5tZWFzdXJlVGV4dCh0ZXh0IHx8IFwiIFwiLCBzdHlsZSk7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubWF4KDEsIG1lYXN1cmVkLndpZHRoKSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChNYXRoLmNlaWwoTWF0aC5tYXgoMSwgbWVhc3VyZWQuaGVpZ2h0KSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGNvbnN0IGNhbnZhc0FuZENvbnRleHQgPSBDYW52YXNQb29sLmdldE9wdGltYWxDYW52YXNBbmRDb250ZXh0KHdpZHRoLCBoZWlnaHQpO1xuICAgIGNvbnN0IHsgY2FudmFzIH0gPSBjYW52YXNBbmRDb250ZXh0O1xuICAgIHRoaXMucmVuZGVyVGV4dFRvQ2FudmFzKHRleHQsIHN0eWxlLCByZXNvbHV0aW9uLCBjYW52YXNBbmRDb250ZXh0KTtcbiAgICBjb25zdCB0ZXh0dXJlID0gZ2V0UG8yVGV4dHVyZUZyb21Tb3VyY2UoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uKTtcbiAgICBpZiAoc3R5bGUudHJpbSkge1xuICAgICAgY29uc3QgdHJpbW1lZCA9IGdldENhbnZhc0JvdW5kaW5nQm94KGNhbnZhcywgcmVzb2x1dGlvbik7XG4gICAgICB0ZXh0dXJlLmZyYW1lLmNvcHlGcm9tKHRyaW1tZWQpO1xuICAgICAgdGV4dHVyZS51cGRhdGVVdnMoKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdGV4dHVyZSwgY2FudmFzQW5kQ29udGV4dCB9O1xuICB9XG4gIGdldE1hbmFnZWRUZXh0dXJlKHRleHQpIHtcbiAgICB0ZXh0Ll9yZXNvbHV0aW9uID0gdGV4dC5fYXV0b1Jlc29sdXRpb24gPyB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uIDogdGV4dC5yZXNvbHV0aW9uO1xuICAgIGNvbnN0IHRleHRLZXkgPSB0ZXh0Ll9nZXRLZXkoKTtcbiAgICBpZiAodGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0pIHtcbiAgICAgIHRoaXMuX2luY3JlYXNlUmVmZXJlbmNlQ291bnQodGV4dEtleSk7XG4gICAgICByZXR1cm4gdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0udGV4dHVyZTtcbiAgICB9XG4gICAgY29uc3QgeyB0ZXh0dXJlLCBjYW52YXNBbmRDb250ZXh0IH0gPSB0aGlzLmNyZWF0ZVRleHR1cmVBbmRDYW52YXModGV4dCk7XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0gPSB7XG4gICAgICBjYW52YXNBbmRDb250ZXh0LFxuICAgICAgdGV4dHVyZSxcbiAgICAgIHVzYWdlQ291bnQ6IDFcbiAgICB9O1xuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG4gIF9pbmNyZWFzZVJlZmVyZW5jZUNvdW50KHRleHRLZXkpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XS51c2FnZUNvdW50Kys7XG4gIH1cbiAgZGVjcmVhc2VSZWZlcmVuY2VDb3VudCh0ZXh0S2V5KSB7XG4gICAgY29uc3QgYWN0aXZlVGV4dHVyZSA9IHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldO1xuICAgIGFjdGl2ZVRleHR1cmUudXNhZ2VDb3VudC0tO1xuICAgIGlmIChhY3RpdmVUZXh0dXJlLnVzYWdlQ291bnQgPT09IDApIHtcbiAgICAgIENhbnZhc1Bvb2wucmV0dXJuQ2FudmFzQW5kQ29udGV4dChhY3RpdmVUZXh0dXJlLmNhbnZhc0FuZENvbnRleHQpO1xuICAgICAgVGV4dHVyZVBvb2wucmV0dXJuVGV4dHVyZShhY3RpdmVUZXh0dXJlLnRleHR1cmUpO1xuICAgICAgY29uc3Qgc291cmNlID0gYWN0aXZlVGV4dHVyZS50ZXh0dXJlLnNvdXJjZTtcbiAgICAgIHNvdXJjZS5yZXNvdXJjZSA9IG51bGw7XG4gICAgICBzb3VyY2UudXBsb2FkTWV0aG9kSWQgPSBcInVua25vd25cIjtcbiAgICAgIHNvdXJjZS5hbHBoYU1vZGUgPSBcIm5vLXByZW11bHRpcGx5LWFscGhhXCI7XG4gICAgICB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XSA9IG51bGw7XG4gICAgfVxuICB9XG4gIGdldFJlZmVyZW5jZUNvdW50KHRleHRLZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0udXNhZ2VDb3VudDtcbiAgfVxuICAvKipcbiAgICogUmVuZGVycyB0ZXh0IHRvIGl0cyBjYW52YXMsIGFuZCB1cGRhdGVzIGl0cyB0ZXh0dXJlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0IHRoaXMgaXMgdXNlZCBpbnRlcm5hbGx5IHRvIGVuc3VyZSB0aGUgdGV4dHVyZSBpcyBjb3JyZWN0IGJlZm9yZSByZW5kZXJpbmcsXG4gICAqIGJ1dCBpdCBjYW4gYmUgdXNlZCBjYWxsZWQgZXh0ZXJuYWxseSwgZm9yIGV4YW1wbGUgZnJvbSB0aGlzIGNsYXNzIHRvICdwcmUtZ2VuZXJhdGUnIHRoZSB0ZXh0dXJlIGZyb20gYSBwaWVjZSBvZiB0ZXh0LFxuICAgKiBhbmQgdGhlbiBzaGFyZWQgYWNyb3NzIG11bHRpcGxlIFNwcml0ZXMuXG4gICAqIEBwYXJhbSB0ZXh0XG4gICAqIEBwYXJhbSBzdHlsZVxuICAgKiBAcGFyYW0gcmVzb2x1dGlvblxuICAgKiBAcGFyYW0gY2FudmFzQW5kQ29udGV4dFxuICAgKi9cbiAgcmVuZGVyVGV4dFRvQ2FudmFzKHRleHQsIHN0eWxlLCByZXNvbHV0aW9uLCBjYW52YXNBbmRDb250ZXh0KSB7XG4gICAgY29uc3QgeyBjYW52YXMsIGNvbnRleHQgfSA9IGNhbnZhc0FuZENvbnRleHQ7XG4gICAgY29uc3QgZm9udCA9IGZvbnRTdHJpbmdGcm9tVGV4dFN0eWxlKHN0eWxlKTtcbiAgICBjb25zdCBtZWFzdXJlZCA9IENhbnZhc1RleHRNZXRyaWNzLm1lYXN1cmVUZXh0KHRleHQgfHwgXCIgXCIsIHN0eWxlKTtcbiAgICBjb25zdCBsaW5lcyA9IG1lYXN1cmVkLmxpbmVzO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBtZWFzdXJlZC5saW5lSGVpZ2h0O1xuICAgIGNvbnN0IGxpbmVXaWR0aHMgPSBtZWFzdXJlZC5saW5lV2lkdGhzO1xuICAgIGNvbnN0IG1heExpbmVXaWR0aCA9IG1lYXN1cmVkLm1heExpbmVXaWR0aDtcbiAgICBjb25zdCBmb250UHJvcGVydGllcyA9IG1lYXN1cmVkLmZvbnRQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgY29udGV4dC5yZXNldFRyYW5zZm9ybSgpO1xuICAgIGNvbnRleHQuc2NhbGUocmVzb2x1dGlvbiwgcmVzb2x1dGlvbik7XG4gICAgY29uc3QgcGFkZGluZyA9IHN0eWxlLnBhZGRpbmcgKiAyO1xuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG1lYXN1cmVkLndpZHRoICsgNCArIHBhZGRpbmcsIG1lYXN1cmVkLmhlaWdodCArIDQgKyBwYWRkaW5nKTtcbiAgICBpZiAoc3R5bGUuX3N0cm9rZT8ud2lkdGgpIHtcbiAgICAgIGNvbnN0IHN0cm9rZVN0eWxlID0gc3R5bGUuX3N0cm9rZTtcbiAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlU3R5bGUud2lkdGg7XG4gICAgICBjb250ZXh0Lm1pdGVyTGltaXQgPSBzdHJva2VTdHlsZS5taXRlckxpbWl0O1xuICAgICAgY29udGV4dC5saW5lSm9pbiA9IHN0cm9rZVN0eWxlLmpvaW47XG4gICAgICBjb250ZXh0LmxpbmVDYXAgPSBzdHJva2VTdHlsZS5jYXA7XG4gICAgfVxuICAgIGNvbnRleHQuZm9udCA9IGZvbnQ7XG4gICAgbGV0IGxpbmVQb3NpdGlvblg7XG4gICAgbGV0IGxpbmVQb3NpdGlvblk7XG4gICAgY29uc3QgcGFzc2VzQ291bnQgPSBzdHlsZS5kcm9wU2hhZG93ID8gMiA6IDE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXNzZXNDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBpc1NoYWRvd1Bhc3MgPSBzdHlsZS5kcm9wU2hhZG93ICYmIGkgPT09IDA7XG4gICAgICBjb25zdCBkc09mZnNldFRleHQgPSBpc1NoYWRvd1Bhc3MgPyBNYXRoLmNlaWwoTWF0aC5tYXgoMSwgaGVpZ2h0KSArIHN0eWxlLnBhZGRpbmcgKiAyKSA6IDA7XG4gICAgICBjb25zdCBkc09mZnNldFNoYWRvdyA9IGRzT2Zmc2V0VGV4dCAqIHJlc29sdXRpb247XG4gICAgICBpZiAoaXNTaGFkb3dQYXNzKSB7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJibGFja1wiO1xuICAgICAgICBjb25zdCBzaGFkb3dPcHRpb25zID0gc3R5bGUuZHJvcFNoYWRvdztcbiAgICAgICAgY29uc3QgZHJvcFNoYWRvd0NvbG9yID0gc2hhZG93T3B0aW9ucy5jb2xvcjtcbiAgICAgICAgY29uc3QgZHJvcFNoYWRvd0FscGhhID0gc2hhZG93T3B0aW9ucy5hbHBoYTtcbiAgICAgICAgY29udGV4dC5zaGFkb3dDb2xvciA9IENvbG9yLnNoYXJlZC5zZXRWYWx1ZShkcm9wU2hhZG93Q29sb3IpLnNldEFscGhhKGRyb3BTaGFkb3dBbHBoYSkudG9SZ2JhU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGRyb3BTaGFkb3dCbHVyID0gc2hhZG93T3B0aW9ucy5ibHVyICogcmVzb2x1dGlvbjtcbiAgICAgICAgY29uc3QgZHJvcFNoYWRvd0Rpc3RhbmNlID0gc2hhZG93T3B0aW9ucy5kaXN0YW5jZSAqIHJlc29sdXRpb247XG4gICAgICAgIGNvbnRleHQuc2hhZG93Qmx1ciA9IGRyb3BTaGFkb3dCbHVyO1xuICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSBNYXRoLmNvcyhzaGFkb3dPcHRpb25zLmFuZ2xlKSAqIGRyb3BTaGFkb3dEaXN0YW5jZTtcbiAgICAgICAgY29udGV4dC5zaGFkb3dPZmZzZXRZID0gTWF0aC5zaW4oc2hhZG93T3B0aW9ucy5hbmdsZSkgKiBkcm9wU2hhZG93RGlzdGFuY2UgKyBkc09mZnNldFNoYWRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBzdHlsZS5fZmlsbD8uYWxwaGEgPz8gMTtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBzdHlsZS5fZmlsbCA/IGdldENhbnZhc0ZpbGxTdHlsZShzdHlsZS5fZmlsbCwgY29udGV4dCkgOiBudWxsO1xuICAgICAgICBpZiAoc3R5bGUuX3N0cm9rZT8ud2lkdGgpIHtcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZ2V0Q2FudmFzRmlsbFN0eWxlKHN0eWxlLl9zdHJva2UsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSBcImJsYWNrXCI7XG4gICAgICB9XG4gICAgICBsZXQgbGluZVBvc2l0aW9uWVNoaWZ0ID0gKGxpbmVIZWlnaHQgLSBmb250UHJvcGVydGllcy5mb250U2l6ZSkgLyAyO1xuICAgICAgaWYgKGxpbmVIZWlnaHQgLSBmb250UHJvcGVydGllcy5mb250U2l6ZSA8IDApIHtcbiAgICAgICAgbGluZVBvc2l0aW9uWVNoaWZ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gc3R5bGUuX3N0cm9rZT8ud2lkdGggPz8gMDtcbiAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBsaW5lcy5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgbGluZVBvc2l0aW9uWCA9IHN0cm9rZVdpZHRoIC8gMjtcbiAgICAgICAgbGluZVBvc2l0aW9uWSA9IHN0cm9rZVdpZHRoIC8gMiArIGkyICogbGluZUhlaWdodCArIGZvbnRQcm9wZXJ0aWVzLmFzY2VudCArIGxpbmVQb3NpdGlvbllTaGlmdDtcbiAgICAgICAgaWYgKHN0eWxlLmFsaWduID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICBsaW5lUG9zaXRpb25YICs9IG1heExpbmVXaWR0aCAtIGxpbmVXaWR0aHNbaTJdO1xuICAgICAgICB9IGVsc2UgaWYgKHN0eWxlLmFsaWduID09PSBcImNlbnRlclwiKSB7XG4gICAgICAgICAgbGluZVBvc2l0aW9uWCArPSAobWF4TGluZVdpZHRoIC0gbGluZVdpZHRoc1tpMl0pIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGUuX3N0cm9rZT8ud2lkdGgpIHtcbiAgICAgICAgICB0aGlzLl9kcmF3TGV0dGVyU3BhY2luZyhcbiAgICAgICAgICAgIGxpbmVzW2kyXSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgY2FudmFzQW5kQ29udGV4dCxcbiAgICAgICAgICAgIGxpbmVQb3NpdGlvblggKyBzdHlsZS5wYWRkaW5nLFxuICAgICAgICAgICAgbGluZVBvc2l0aW9uWSArIHN0eWxlLnBhZGRpbmcgLSBkc09mZnNldFRleHQsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGUuX2ZpbGwgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRoaXMuX2RyYXdMZXR0ZXJTcGFjaW5nKFxuICAgICAgICAgICAgbGluZXNbaTJdLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBjYW52YXNBbmRDb250ZXh0LFxuICAgICAgICAgICAgbGluZVBvc2l0aW9uWCArIHN0eWxlLnBhZGRpbmcsXG4gICAgICAgICAgICBsaW5lUG9zaXRpb25ZICsgc3R5bGUucGFkZGluZyAtIGRzT2Zmc2V0VGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgdGV4dCB3aXRoIGxldHRlci1zcGFjaW5nLlxuICAgKiBAcGFyYW0gdGV4dCAtIFRoZSB0ZXh0IHRvIGRyYXdcbiAgICogQHBhcmFtIHN0eWxlXG4gICAqIEBwYXJhbSBjYW52YXNBbmRDb250ZXh0XG4gICAqIEBwYXJhbSB4IC0gSG9yaXpvbnRhbCBwb3NpdGlvbiB0byBkcmF3IHRoZSB0ZXh0XG4gICAqIEBwYXJhbSB5IC0gVmVydGljYWwgcG9zaXRpb24gdG8gZHJhdyB0aGUgdGV4dFxuICAgKiBAcGFyYW0gaXNTdHJva2UgLSBJcyB0aGlzIGRyYXdpbmcgZm9yIHRoZSBvdXRzaWRlIHN0cm9rZSBvZiB0aGVcbiAgICogIHRleHQ/IElmIG5vdCwgaXQncyBmb3IgdGhlIGluc2lkZSBmaWxsXG4gICAqL1xuICBfZHJhd0xldHRlclNwYWNpbmcodGV4dCwgc3R5bGUsIGNhbnZhc0FuZENvbnRleHQsIHgsIHksIGlzU3Ryb2tlID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IGNvbnRleHQgfSA9IGNhbnZhc0FuZENvbnRleHQ7XG4gICAgY29uc3QgbGV0dGVyU3BhY2luZyA9IHN0eWxlLmxldHRlclNwYWNpbmc7XG4gICAgbGV0IHVzZUV4cGVyaW1lbnRhbExldHRlclNwYWNpbmcgPSBmYWxzZTtcbiAgICBpZiAoQ2FudmFzVGV4dE1ldHJpY3MuZXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZ1N1cHBvcnRlZCkge1xuICAgICAgaWYgKENhbnZhc1RleHRNZXRyaWNzLmV4cGVyaW1lbnRhbExldHRlclNwYWNpbmcpIHtcbiAgICAgICAgY29udGV4dC5sZXR0ZXJTcGFjaW5nID0gYCR7bGV0dGVyU3BhY2luZ31weGA7XG4gICAgICAgIGNvbnRleHQudGV4dExldHRlclNwYWNpbmcgPSBgJHtsZXR0ZXJTcGFjaW5nfXB4YDtcbiAgICAgICAgdXNlRXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0LmxldHRlclNwYWNpbmcgPSBcIjBweFwiO1xuICAgICAgICBjb250ZXh0LnRleHRMZXR0ZXJTcGFjaW5nID0gXCIwcHhcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxldHRlclNwYWNpbmcgPT09IDAgfHwgdXNlRXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZykge1xuICAgICAgaWYgKGlzU3Ryb2tlKSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgeCwgeSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSB4O1xuICAgIGNvbnN0IHN0cmluZ0FycmF5ID0gQ2FudmFzVGV4dE1ldHJpY3MuZ3JhcGhlbWVTZWdtZW50ZXIodGV4dCk7XG4gICAgbGV0IHByZXZpb3VzV2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoO1xuICAgIGxldCBjdXJyZW50V2lkdGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRDaGFyID0gc3RyaW5nQXJyYXlbaV07XG4gICAgICBpZiAoaXNTdHJva2UpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KGN1cnJlbnRDaGFyLCBjdXJyZW50UG9zaXRpb24sIHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChjdXJyZW50Q2hhciwgY3VycmVudFBvc2l0aW9uLCB5KTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0U3RyID0gXCJcIjtcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHN0cmluZ0FycmF5Lmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHRleHRTdHIgKz0gc3RyaW5nQXJyYXlbal07XG4gICAgICB9XG4gICAgICBjdXJyZW50V2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHRTdHIpLndpZHRoO1xuICAgICAgY3VycmVudFBvc2l0aW9uICs9IHByZXZpb3VzV2lkdGggLSBjdXJyZW50V2lkdGggKyBsZXR0ZXJTcGFjaW5nO1xuICAgICAgcHJldmlvdXNXaWR0aCA9IGN1cnJlbnRXaWR0aDtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlcyA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5DYW52YXNUZXh0U3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJjYW52YXNUZXh0XCJcbn07XG5cbmV4cG9ydCB7IENhbnZhc1RleHRTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbnZhc1RleHRTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dFBpcGUgfSBmcm9tICcuL2NhbnZhcy9DYW52YXNUZXh0UGlwZS5tanMnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dFN5c3RlbSB9IGZyb20gJy4vY2FudmFzL0NhbnZhc1RleHRTeXN0ZW0ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChDYW52YXNUZXh0U3lzdGVtKTtcbmV4dGVuc2lvbnMuYWRkKENhbnZhc1RleHRQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgVGV4dHVyZVBvb2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmVQb29sLm1qcyc7XG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tICcuLi8uLi9jb250YWluZXIvYm91bmRzL0JvdW5kcy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBCb3VuZHMgPSBuZXcgQm91bmRzKCk7XG5mdW5jdGlvbiBnZXRQbzJUZXh0dXJlRnJvbVNvdXJjZShpbWFnZSwgd2lkdGgsIGhlaWdodCwgcmVzb2x1dGlvbikge1xuICBjb25zdCBib3VuZHMgPSB0ZW1wQm91bmRzO1xuICBib3VuZHMubWluWCA9IDA7XG4gIGJvdW5kcy5taW5ZID0gMDtcbiAgYm91bmRzLm1heFggPSBpbWFnZS53aWR0aCAvIHJlc29sdXRpb24gfCAwO1xuICBib3VuZHMubWF4WSA9IGltYWdlLmhlaWdodCAvIHJlc29sdXRpb24gfCAwO1xuICBjb25zdCB0ZXh0dXJlID0gVGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUoXG4gICAgYm91bmRzLndpZHRoLFxuICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgcmVzb2x1dGlvbixcbiAgICBmYWxzZVxuICApO1xuICB0ZXh0dXJlLnNvdXJjZS51cGxvYWRNZXRob2RJZCA9IFwiaW1hZ2VcIjtcbiAgdGV4dHVyZS5zb3VyY2UucmVzb3VyY2UgPSBpbWFnZTtcbiAgdGV4dHVyZS5zb3VyY2UuYWxwaGFNb2RlID0gXCJwcmVtdWx0aXBseS1hbHBoYS1vbi11cGxvYWRcIjtcbiAgdGV4dHVyZS5mcmFtZS53aWR0aCA9IHdpZHRoIC8gcmVzb2x1dGlvbjtcbiAgdGV4dHVyZS5mcmFtZS5oZWlnaHQgPSBoZWlnaHQgLyByZXNvbHV0aW9uO1xuICB0ZXh0dXJlLnNvdXJjZS5lbWl0KFwidXBkYXRlXCIsIHRleHR1cmUuc291cmNlKTtcbiAgdGV4dHVyZS51cGRhdGVVdnMoKTtcbiAgcmV0dXJuIHRleHR1cmU7XG59XG5cbmV4cG9ydCB7IGdldFBvMlRleHR1cmVGcm9tU291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRQbzJUZXh0dXJlRnJvbVNvdXJjZS5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVzaXplUGx1Z2luIiwiaW5pdCIsIm9wdGlvbnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInRoaXMiLCJzZXQiLCJkb20iLCJnbG9iYWxUaGlzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInF1ZXVlUmVzaXplIiwiX3Jlc2l6ZVRvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2l6ZSIsImdldCIsIl9jYW5jZWxSZXNpemUiLCJfcmVzaXplSWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndpZHRoIiwiaGVpZ2h0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJyZW5kZXJlciIsInJlbmRlciIsInJlc2l6ZVRvIiwiZGVzdHJveSIsImV4dGVuc2lvbiIsIkFwcGxpY2F0aW9uIiwiVGlja2VyUGx1Z2luIiwiYXNzaWduIiwiYXV0b1N0YXJ0Iiwic2hhcmVkVGlja2VyIiwidGlja2VyIiwiX3RpY2tlciIsInJlbW92ZSIsImFkZCIsIkxPVyIsInN0b3AiLCJzdGFydCIsIlRpY2tlciIsInNoYXJlZCIsIm9sZFRpY2tlciIsIkZpbHRlclBpcGUiLCJjb25zdHJ1Y3RvciIsIl9yZW5kZXJlciIsInB1c2giLCJmaWx0ZXJFZmZlY3QiLCJjb250YWluZXIiLCJpbnN0cnVjdGlvblNldCIsInJlbmRlclBpcGVzIiwiYmF0Y2giLCJicmVhayIsInJlbmRlclBpcGVJZCIsImNhbkJ1bmRsZSIsImFjdGlvbiIsInBvcCIsIl9maWx0ZXJFZmZlY3QiLCJfY29udGFpbmVyIiwiZXhlY3V0ZSIsImluc3RydWN0aW9uIiwiZmlsdGVyIiwidHlwZSIsIldlYkdMUGlwZXMiLCJXZWJHUFVQaXBlcyIsIkNhbnZhc1BpcGVzIiwibmFtZSIsInRlbXBNYXRyaXgiLCJNYXRyaXgiLCJnZXRGYXN0R2xvYmFsQm91bmRzIiwidGFyZ2V0IiwiYm91bmRzIiwiY2xlYXIiLCJfZ2V0R2xvYmFsQm91bmRzUmVjdXJzaXZlIiwiaXNWYWxpZCIsInJlbmRlckdyb3VwIiwiYXBwbHlNYXRyaXgiLCJsb2NhbFRyYW5zZm9ybSIsInBhcmVudFJlbmRlckdyb3VwIiwid29ybGRUcmFuc2Zvcm0iLCJsb2NhbERpc3BsYXlTdGF0dXMiLCJtZWFzdXJhYmxlIiwibWFuYWdlRWZmZWN0cyIsImVmZmVjdHMiLCJsZW5ndGgiLCJsb2NhbEJvdW5kcyIsImJvdW5kc0FyZWEiLCJhZGRSZWN0Iiwidmlld0JvdW5kcyIsImFkZEZyYW1lIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImdyb3VwVHJhbnNmb3JtIiwiY2hpbGRyZW4iLCJpIiwiYWR2YW5jZWQiLCJhZGRCb3VuZHMiLCJjb3B5VG8iLCJpbnZlcnQiLCJyZWxhdGl2ZUdyb3VwVHJhbnNmb3JtIiwicmV0dXJuIiwicXVhZEdlb21ldHJ5IiwiR2VvbWV0cnkiLCJhdHRyaWJ1dGVzIiwiYVBvc2l0aW9uIiwiYnVmZmVyIiwiRmxvYXQzMkFycmF5IiwiZm9ybWF0Iiwic3RyaWRlIiwib2Zmc2V0IiwiaW5kZXhCdWZmZXIiLCJVaW50MzJBcnJheSIsIkZpbHRlclN5c3RlbSIsIl9maWx0ZXJTdGFja0luZGV4IiwiX2ZpbHRlclN0YWNrIiwiX2ZpbHRlckdsb2JhbFVuaWZvcm1zIiwiVW5pZm9ybUdyb3VwIiwidUlucHV0U2l6ZSIsInZhbHVlIiwidUlucHV0UGl4ZWwiLCJ1SW5wdXRDbGFtcCIsInVPdXRwdXRGcmFtZSIsInVHbG9iYWxGcmFtZSIsInVPdXRwdXRUZXh0dXJlIiwiX2dsb2JhbEZpbHRlckJpbmRHcm91cCIsIkJpbmRHcm91cCIsImFjdGl2ZUJhY2tUZXh0dXJlIiwiX2FjdGl2ZUZpbHRlckRhdGEiLCJiYWNrVGV4dHVyZSIsImZpbHRlcnMiLCJfZ2V0RmlsdGVyRGF0YSIsImZpbHRlckRhdGEiLCJza2lwIiwicmVuZGVyYWJsZXMiLCJtYXRyaXgiLCJyZW5kZXJhYmxlIiwiZ2xvYmFsRGlzcGxheVN0YXR1cyIsImdldEdsb2JhbFJlbmRlcmFibGVCb3VuZHMiLCJmaWx0ZXJBcmVhIiwiY29sb3JUZXh0dXJlU291cmNlIiwicmVuZGVyVGFyZ2V0IiwiY29sb3JUZXh0dXJlIiwic291cmNlIiwicmVzb2x1dGlvbiIsIkluZmluaXR5IiwicGFkZGluZyIsImFudGlhbGlhcyIsImJsZW5kUmVxdWlyZWQiLCJlbmFibGVkIiwiTWF0aCIsIm1pbiIsIl9yZXNvbHV0aW9uIiwiY29tcGF0aWJsZVJlbmRlcmVycyIsImJhY2tCdWZmZXIiLCJ1c2VCYWNrQnVmZmVyIiwid2FybiIsInZpZXdQb3J0Iiwicm9vdFZpZXdQb3J0Iiwic2NhbGUiLCJmaXRCb3VuZHMiLCJjZWlsIiwicGFkIiwiaXNQb3NpdGl2ZSIsInByZXZpb3VzUmVuZGVyU3VyZmFjZSIsInJlbmRlclN1cmZhY2UiLCJpbnB1dFRleHR1cmUiLCJUZXh0dXJlUG9vbCIsImdldE9wdGltYWxUZXh0dXJlIiwiYmluZCIsImdsb2JhbFVuaWZvcm1zIiwiVGV4dHVyZSIsIkVNUFRZIiwiZmluaXNoUmVuZGVyUGFzcyIsInByZXZpb3VzQm91bmRzIiwiZ2V0UmVuZGVyVGFyZ2V0IiwiZ2V0QmFja1RleHR1cmUiLCJzZXRSZXNvdXJjZSIsInN0eWxlIiwiYXBwbHkiLCJyZXR1cm5UZXh0dXJlIiwiZmxpcCIsImZsb3AiLCJ0IiwibGFzdFJlbmRlclN1cmZhY2UiLCJiYWNrZ3JvdW5kUmVzb2x1dGlvbiIsIngiLCJ5IiwiZmxvb3IiLCJjb3B5VG9UZXh0dXJlIiwiYXBwbHlGaWx0ZXIiLCJpbnB1dCIsIm91dHB1dCIsIlBvaW50IiwiaXNGaW5hbFRhcmdldCIsInJvb3RSZW5kZXJUYXJnZXQiLCJjdXJyZW50SW5kZXgiLCJmaWx0ZXJVbmlmb3JtcyIsInVuaWZvcm1zIiwib3V0cHV0RnJhbWUiLCJpbnB1dFNpemUiLCJpbnB1dFBpeGVsIiwiaW5wdXRDbGFtcCIsImdsb2JhbEZyYW1lIiwib3V0cHV0VGV4dHVyZSIsImxhc3RJbmRleCIsImZpbHRlckRhdGEyIiwiZnJhbWUiLCJwaXhlbFdpZHRoIiwicGl4ZWxIZWlnaHQiLCJyb290VGV4dHVyZSIsImlzUm9vdCIsInVwZGF0ZSIsInVuaWZvcm1CYXRjaCIsImJhdGNoVW5pZm9ybXMiLCJnZXRVYm9SZXNvdXJjZSIsImdyb3VwcyIsImVuY29kZXIiLCJkcmF3IiwiZ2VvbWV0cnkiLCJzaGFkZXIiLCJzdGF0ZSIsIl9zdGF0ZSIsInRvcG9sb2d5IiwiV0VCR0wiLCJCb3VuZHMiLCJjYWxjdWxhdGVTcHJpdGVNYXRyaXgiLCJvdXRwdXRNYXRyaXgiLCJzcHJpdGUiLCJkYXRhIiwibWFwcGVkTWF0cml4IiwiX3NvdXJjZSIsInByZXBlbmQiLCJ0ZXh0dXJlIiwidHJhbnNsYXRlIiwiYW5jaG9yIiwiV2ViR0xTeXN0ZW0iLCJXZWJHUFVTeXN0ZW0iLCJsb2NhbFVuaWZvcm1CaXQiLCJ2ZXJ0ZXgiLCJoZWFkZXIiLCJtYWluIiwiZW5kIiwibG9jYWxVbmlmb3JtQml0R3JvdXAyIiwicmVwbGFjZSIsImxvY2FsVW5pZm9ybUJpdEdsIiwiY29sb3IzMkJpdFRvVW5pZm9ybSIsImFiZ3IiLCJvdXQiLCJhbHBoYSIsIkdyYXBoaWNzUGlwZSIsImFkYXB0b3IiLCJTdGF0ZSIsImZvcjJkIiwiX2dyYXBoaWNzQmF0Y2hlc0hhc2giLCJjcmVhdGUiLCJfZGVzdHJveVJlbmRlcmFibGVCb3VuZCIsImRlc3Ryb3lSZW5kZXJhYmxlIiwiX2FkYXB0b3IiLCJ2YWxpZGF0ZVJlbmRlcmFibGUiLCJncmFwaGljcyIsImNvbnRleHQiLCJ3YXNCYXRjaGVkIiwidWlkIiwiZ3B1Q29udGV4dCIsImdyYXBoaWNzQ29udGV4dCIsInVwZGF0ZUdwdUNvbnRleHQiLCJpc0JhdGNoYWJsZSIsImFkZFJlbmRlcmFibGUiLCJfZGlkR3JhcGhpY3NVcGRhdGUiLCJfcmVidWlsZCIsIl9hZGRUb0JhdGNoZXIiLCJ1cGRhdGVSZW5kZXJhYmxlIiwiYmF0Y2hlcyIsIl9iYXRjaGVyIiwidXBkYXRlRWxlbWVudCIsIl9yZW1vdmVCYXRjaEZvclJlbmRlcmFibGUiLCJvZmYiLCJpc1JlbmRlcmFibGUiLCJnZXRHcHVDb250ZXh0IiwiY3VzdG9tU2hhZGVyIiwiYmxlbmRNb2RlIiwiZ3JvdXBCbGVuZE1vZGUiLCJsb2NhbFVuaWZvcm1zIiwicmVzb3VyY2VzIiwidVRyYW5zZm9ybU1hdHJpeCIsInVSb3VuZCIsIl9yb3VuZFBpeGVscyIsImdyb3VwQ29sb3JBbHBoYSIsInVDb2xvciIsIl9pbml0QmF0Y2hlc0ZvclJlbmRlcmFibGUiLCJiYXRjaGVkIiwiYmF0Y2hQaXBlIiwiX2dldEJhdGNoZXNGb3JSZW5kZXJhYmxlIiwiYWRkVG9CYXRjaCIsInJvdW5kUGl4ZWxzIiwibWFwIiwiYmF0Y2hDbG9uZSIsIkJhdGNoYWJsZUdyYXBoaWNzIiwib24iLCJncmFwaGljc1VpZCIsImZvckVhY2giLCJHcmFwaGljc0NvbnRleHRTeXN0ZW0iLCJNZXNoUGlwZSIsImxvY2FsVW5pZm9ybXNCaW5kR3JvdXAiLCJfbWVzaERhdGFIYXNoIiwiX2dwdUJhdGNoYWJsZU1lc2hIYXNoIiwibWVzaCIsIm1lc2hEYXRhIiwiX2dldE1lc2hEYXRhIiwiaXNCYXRjaGVkIiwiX2dlb21ldHJ5IiwiaW5kaWNlcyIsImluZGV4U2l6ZSIsInBvc2l0aW9ucyIsInZlcnRleFNpemUiLCJiYXRjaGFibGVNZXNoIiwiX2dldEJhdGNoYWJsZU1lc2giLCJjaGVja0FuZFVwZGF0ZVRleHR1cmUiLCJiYXRjaGVyIiwiZ3B1QmF0Y2hhYmxlTWVzaCIsIl90ZXh0dXJlIiwiZ3B1TWVzaCIsImdldEFkanVzdGVkQmxlbmRNb2RlQmxlbmQiLCJfaW5pdE1lc2hEYXRhIiwiX2luaXRCYXRjaGFibGVNZXNoIiwiQmF0Y2hhYmxlTWVzaCIsInRyYW5zZm9ybSIsImJhdGNoZXJOYW1lIiwicGFja0FzUXVhZCIsImluZGV4T2Zmc2V0IiwiYXR0cmlidXRlT2Zmc2V0IiwiX2JhdGNoIiwiX3V2VXBkYXRlSWQiLCJfdGV4dHVyZU1hdHJpeFVwZGF0ZUlkIiwicmVzZXQiLCJ1dnMiLCJ1dkJ1ZmZlciIsImdldEJ1ZmZlciIsInRyYW5zZm9ybWVkVXZzIiwidGV4dHVyZU1hdHJpeCIsImlzU2ltcGxlIiwiX3RyYW5zZm9ybWVkVXZzIiwiX3VwZGF0ZUlEIiwibXVsdGlwbHlVdnMiLCJjb2xvciIsImF0dHJpYnV0ZVNpemUiLCJfTWVzaEdlb21ldHJ5IiwiYXJncyIsImRlZmF1bHRPcHRpb25zIiwic2hyaW5rVG9GaXQiLCJzaHJpbmtCdWZmZXJzVG9GaXQiLCJzdXBlciIsImxhYmVsIiwidXNhZ2UiLCJWRVJURVgiLCJDT1BZX0RTVCIsImFVViIsIklOREVYIiwiYmF0Y2hNb2RlIiwiTWVzaEdlb21ldHJ5IiwiX1BsYW5lR2VvbWV0cnkiLCJkZXByZWNhdGlvbiIsInZlcnRpY2VzWCIsInZlcnRpY2VzWSIsImJ1aWxkIiwidG90YWwiLCJ2ZXJ0cyIsInNpemVYIiwic2l6ZVkiLCJ0b3RhbFN1YiIsInhwb3MiLCJ5cG9zIiwidmFsdWUyIiwidmFsdWUzIiwidmFsdWU0IiwiYnVmZmVycyIsIlBsYW5lR2VvbWV0cnkiLCJfTmluZVNsaWNlR2VvbWV0cnkiLCJfb3JpZ2luYWxXaWR0aCIsIm9yaWdpbmFsV2lkdGgiLCJfb3JpZ2luYWxIZWlnaHQiLCJvcmlnaW5hbEhlaWdodCIsIl9sZWZ0V2lkdGgiLCJsZWZ0V2lkdGgiLCJfcmlnaHRXaWR0aCIsInJpZ2h0V2lkdGgiLCJfdG9wSGVpZ2h0IiwidG9wSGVpZ2h0IiwiX2JvdHRvbUhlaWdodCIsImJvdHRvbUhlaWdodCIsInVwZGF0ZVV2cyIsInVwZGF0ZVBvc2l0aW9ucyIsInciLCJzY2FsZVciLCJoIiwic2NhbGVIIiwiX3V2dyIsIl91dmgiLCJOaW5lU2xpY2VHZW9tZXRyeSIsIk5pbmVTbGljZVNwcml0ZVBpcGUiLCJfZ3B1U3ByaXRlSGFzaCIsImdwdVNwcml0ZSIsIl9nZXRHcHVTcHJpdGUiLCJfZGlkU3ByaXRlVXBkYXRlIiwiX3VwZGF0ZUJhdGNoYWJsZVNwcml0ZSIsImJhdGNoYWJsZVNwcml0ZSIsIl9pbml0R1BVU3ByaXRlIiwidGlsaW5nQml0IiwiZnJhZ21lbnQiLCJ0aWxpbmdCaXRHbCIsImdwdVByb2dyYW0iLCJnbFByb2dyYW0iLCJUaWxpbmdTcHJpdGVTaGFkZXIiLCJTaGFkZXIiLCJiaXRzIiwicm91bmRQaXhlbHNCaXQiLCJ0aWxpbmdVbmlmb3JtcyIsInVNYXBDb29yZCIsInVDbGFtcEZyYW1lIiwidUNsYW1wT2Zmc2V0IiwidVRleHR1cmVUcmFuc2Zvcm0iLCJ1U2l6ZUFuY2hvciIsInVUZXh0dXJlIiwidVNhbXBsZXIiLCJ1cGRhdGVVbmlmb3JtcyIsImFuY2hvclgiLCJhbmNob3JZIiwidGV4dHVyZVdpZHRoIiwidGV4dHVyZUhlaWdodCIsImEiLCJiIiwiYyIsImQiLCJ0eCIsInR5IiwibWFwQ29vcmQiLCJRdWFkR2VvbWV0cnkiLCJzaGFyZWRRdWFkIiwiVGlsaW5nU3ByaXRlUGlwZSIsImRlZmF1bHQyZCIsIl90aWxpbmdTcHJpdGVEYXRhSGFzaCIsInRpbGluZ1Nwcml0ZURhdGEiLCJfZ2V0VGlsaW5nU3ByaXRlRGF0YSIsImNvdWxkQmF0Y2giLCJjYW5CYXRjaCIsIl91cGRhdGVDYW5CYXRjaCIsInRpbGluZ1Nwcml0ZSIsIl9kaWRUaWxpbmdTcHJpdGVVcGRhdGUiLCJfdXBkYXRlQmF0Y2hhYmxlTWVzaCIsImJpbmRHcm91cCIsIl90aWxlVHJhbnNmb3JtIiwiX2luaXRUaWxpbmdTcHJpdGVEYXRhIiwic2xpY2UiLCJyZW5kZXJhYmxlRGF0YSIsImFkZHJlc3NNb2RlIiwiX2FwcGx5QW5jaG9yVG9UZXh0dXJlIiwiY29weUZyb20iLCJhcnJheSIsImluZGV4Iiwic2l6ZSIsInNldFV2cyIsInNldFBvc2l0aW9ucyIsIl9ub25Qb3dPZjJ3cmFwcGluZyIsInN1cHBvcnRzIiwibm9uUG93T2Yyd3JhcHBpbmciLCJpc1Bvd2VyT2ZUd28iLCJCYXRjaGFibGVTcHJpdGUiLCJfYXR0cmlidXRlU3RhcnQiLCJHcmFwaGljcyIsIlZpZXciLCJHcmFwaGljc0NvbnRleHQiLCJyZXN0IiwiX2NvbnRleHQiLCJfb3duZWRDb250ZXh0Iiwib25WaWV3VXBkYXRlIiwiYWxsb3dDaGlsZHJlbiIsImNvbnRhaW5zUG9pbnQiLCJwb2ludCIsIl9kaWRWaWV3Q2hhbmdlVGljayIsImRpZFZpZXdVcGRhdGUiLCJvbkNoaWxkVmlld1VwZGF0ZSIsIl9jYWxsQ29udGV4dE1ldGhvZCIsIm1ldGhvZCIsInNldEZpbGxTdHlsZSIsInNldFN0cm9rZVN0eWxlIiwiZmlsbCIsInN0cm9rZSIsImJlZ2luUGF0aCIsImN1dCIsImFyYyIsImFyY1RvIiwiYXJjVG9TdmciLCJiZXppZXJDdXJ2ZVRvIiwiY2xvc2VQYXRoIiwiZWxsaXBzZSIsImNpcmNsZSIsInBhdGgiLCJsaW5lVG8iLCJtb3ZlVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwicmVjdCIsInJvdW5kUmVjdCIsInBvbHkiLCJyZWd1bGFyUG9seSIsInJvdW5kUG9seSIsInJvdW5kU2hhcGUiLCJmaWxsZXRSZWN0IiwiY2hhbWZlclJlY3QiLCJzdGFyIiwic3ZnIiwicmVzdG9yZSIsInNhdmUiLCJnZXRUcmFuc2Zvcm0iLCJyZXNldFRyYW5zZm9ybSIsInJvdGF0ZVRyYW5zZm9ybSIsInNjYWxlVHJhbnNmb3JtIiwic2V0VHJhbnNmb3JtIiwidHJhbnNsYXRlVHJhbnNmb3JtIiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJjbG9uZSIsImRlZXAiLCJsaW5lU3R5bGUiLCJiZWdpbkZpbGwiLCJlbmRGaWxsIiwiZGVmYXVsdFN0cm9rZVN0eWxlIiwiZHJhd0NpcmNsZSIsImRyYXdFbGxpcHNlIiwiZHJhd1BvbHlnb24iLCJkcmF3UmVjdCIsImRyYXdSb3VuZGVkUmVjdCIsImRyYXdTdGFyIiwibG9jYWxVbmlmb3JtTVNERkJpdCIsImxvY2FsVW5pZm9ybU1TREZCaXRHbCIsIm1TREZCaXQiLCJtU0RGQml0R2wiLCJTZGZTaGFkZXIiLCJ1RGlzdGFuY2UiLCJtYXhUZXh0dXJlcyIsImNvbG9yQml0IiwiZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQiLCJiYXRjaFNhbXBsZXJzIiwiZ2V0QmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cCIsIkJpdG1hcFRleHRQaXBlIiwiX2dwdUJpdG1hcFRleHQiLCJiaXRtYXBUZXh0IiwiZ3JhcGhpY3NSZW5kZXJhYmxlIiwiX2dldEdwdUJpdG1hcFRleHQiLCJfZGlkVGV4dFVwZGF0ZSIsIl91cGRhdGVDb250ZXh0Iiwic3luY1dpdGhQcm94eSIsIl91cGRhdGVEaXN0YW5jZUZpZWxkIiwiX2Rlc3Ryb3lSZW5kZXJhYmxlQnlVaWQiLCJyZW5kZXJhYmxlVWlkIiwicHJveHlHcmFwaGljcyIsImJpdG1hcEZvbnQiLCJCaXRtYXBGb250TWFuYWdlciIsImdldEZvbnQiLCJ0ZXh0IiwiX3N0eWxlIiwiZGlzdGFuY2VGaWVsZCIsImNoYXJzIiwiQXJyYXkiLCJmcm9tIiwiY3VycmVudFkiLCJiYXNlTGluZU9mZnNldCIsImJpdG1hcFRleHRMYXlvdXQiLCJnZXRCaXRtYXBUZXh0TGF5b3V0Iiwib2Zmc2V0WSIsIl9zdHJva2UiLCJfYW5jaG9yIiwiX3giLCJfeSIsInRpbnQiLCJhcHBseUZpbGxBc1RpbnQiLCJfZmlsbCIsImxpbmVzIiwibGluZSIsImoiLCJjaGFyUG9zaXRpb25zIiwiY2hhciIsImNoYXJEYXRhIiwicm91bmQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImxpbmVIZWlnaHQiLCJpbml0R3B1VGV4dCIsInByb3h5UmVuZGVyYWJsZSIsImZvbnRGYW1pbHkiLCJkeW5hbWljRm9udCIsIkNhY2hlIiwiZHgiLCJzcXJ0IiwiZHkiLCJ3b3JsZFNjYWxlIiwiYWJzIiwiZm9udFNjYWxlIiwiYmFzZVJlbmRlcmVkRm9udFNpemUiLCJmb250U2l6ZSIsImRpc3RhbmNlIiwicmFuZ2UiLCJwcm94eSIsImdyb3VwQ29sb3IiLCJncm91cEFscGhhIiwiSFRNTFRleHRQaXBlIiwiX2dwdVRleHQiLCJydW5uZXJzIiwicmVzb2x1dGlvbkNoYW5nZSIsImdwdVRleHQiLCJfYXV0b1Jlc29sdXRpb24iLCJodG1sVGV4dCIsIl9nZXRHcHVUZXh0IiwibmV3S2V5IiwiX2dldEtleSIsInRleHR1cmVOZWVkc1VwbG9hZGluZyIsImN1cnJlbnRLZXkiLCJfdXBkYXRlVGV4dCIsIl9kZXN0cm95UmVuZGVyYWJsZUJ5SWQiLCJodG1sVGV4dFVpZCIsImRlY3JlYXNlUmVmZXJlbmNlQ291bnQiLCJfdXBkYXRlR3B1VGV4dCIsImNhdGNoIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsInVwZGF0ZVF1YWRCb3VuZHMiLCJnZW5lcmF0aW5nVGV4dHVyZSIsImdldE1hbmFnZWRUZXh0dXJlIiwiZ3B1VGV4dERhdGEiLCJuc3N2ZyIsIm5zeGh0bWwiLCJIVE1MVGV4dFJlbmRlckRhdGEiLCJzdmdSb290IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJmb3JlaWduT2JqZWN0IiwiZG9tRWxlbWVudCIsInN0eWxlRWxlbWVudCIsImltYWdlIiwiSW1hZ2UiLCJzZXRBdHRyaWJ1dGUiLCJvdmVyZmxvdyIsImFwcGVuZENoaWxkIiwiZHJvcFNoYWRvd1RvQ1NTIiwiZHJvcFNoYWRvd1N0eWxlIiwiQ29sb3IiLCJzZXRWYWx1ZSIsInNldEFscGhhIiwidG9IZXhhIiwicG9zaXRpb24iLCJjb3MiLCJhbmdsZSIsInNpbiIsImJsdXIiLCJzdHJva2VUb0NTUyIsInRvSGV4Iiwiam9pbiIsInRlbXBsYXRlcyIsImZvbnRXZWlnaHQiLCJmb250U3R5bGUiLCJmb250VmFyaWFudCIsImxldHRlclNwYWNpbmciLCJhbGlnbiIsIndoaXRlU3BhY2UiLCJ3b3JkV3JhcFdpZHRoIiwiYnJlYWtXb3JkcyIsImRyb3BTaGFkb3ciLCJIVE1MVGV4dFN0eWxlIiwiVGV4dFN0eWxlIiwiX2Nzc092ZXJyaWRlcyIsImNzc092ZXJyaWRlcyIsInRhZ1N0eWxlcyIsIl9nZW5lcmF0ZUtleSIsIl9zdHlsZUtleSIsImdlbmVyYXRlVGV4dFN0eWxlS2V5IiwiX2Nzc1N0eWxlIiwid29yZFdyYXAiLCJjc3NTdHlsZSIsImNzc1N0eWxlcyIsInRhZ1N0eWxlIiwiY3NzVGFnU3R5bGUiLCJ0YWdTdHlsZVRvQ1NTIiwidGV4dFN0eWxlVG9DU1MiLCJhZGRPdmVycmlkZSIsInRvQWRkIiwidiIsImluY2x1ZGVzIiwicmVtb3ZlT3ZlcnJpZGUiLCJ0b1JlbW92ZSIsImFzeW5jIiwibG9hZEZvbnRDU1MiLCJ1cmwiLCJkYXRhU3JjIiwicmVzcG9uc2UiLCJmZXRjaCIsImJsb2IiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbmxvYWRlbmQiLCJyZXN1bHQiLCJvbmVycm9yIiwicmVhZEFzRGF0YVVSTCIsImxvYWRGb250QXNCYXNlNjQiLCJGb250U3R5bGVQcm9taXNlQ2FjaGUiLCJNYXAiLCJ0ZW1wSFRNTFRleHRSZW5kZXJEYXRhIiwiSFRNTFRleHRTeXN0ZW0iLCJfYWN0aXZlVGV4dHVyZXMiLCJfY3JlYXRlQ2FudmFzIiwiV0VCR1BVIiwiZ2V0VGV4dHVyZSIsIl9idWlsZFRleHR1cmVQcm9taXNlIiwidGV4dEtleSIsIl9pbmNyZWFzZVJlZmVyZW5jZUNvdW50IiwicHJvbWlzZSIsInRoZW4iLCJ1c2FnZUNvdW50IiwiaHRtbFRleHREYXRhIiwiZm9udEZhbWlsaWVzIiwiZGVkdXBlIiwibWF0Y2hlcyIsIm1hdGNoIiwiYWRkRm9udEZhbWlseSIsImZvbnRGYW1pbHkyIiwiaXNBcnJheSIsInNwbGl0IiwidHJpbSIsImV4dHJhY3RGb250RmFtaWxpZXMiLCJmb250Q1NTIiwiZm9udFByb21pc2VzIiwiaGFzIiwiYWxsIiwiZ2V0Rm9udENzcyIsImRlZmF1bHRUZXh0U3R5bGUiLCJtZWFzdXJlZCIsImZvbnRTdHlsZUNTUyIsImh0bWxUZXh0UmVuZGVyRGF0YSIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiYm9keSIsImNvbnRlbnRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkZXNjZW5kZXJQYWRkaW5nIiwiQ2FudmFzVGV4dE1ldHJpY3MiLCJtZWFzdXJlRm9udCIsImRlc2NlbnQiLCJkb3VibGVQYWRkaW5nIiwibWVhc3VyZUh0bWxUZXh0IiwibWF4Iiwic3ZnVVJMIiwidG9TdHJpbmciLCJYTUxTZXJpYWxpemVyIiwic2VyaWFsaXplVG9TdHJpbmciLCJnZXRTVkdVcmwiLCJkZWxheSIsInJlc29sdmUyIiwic2V0VGltZW91dCIsIm9ubG9hZCIsInNyYyIsImVuY29kZVVSSUNvbXBvbmVudCIsImNyb3NzT3JpZ2luIiwibG9hZFNWR0ltYWdlIiwidXNlckFnZW50IiwiZ2V0TmF2aWdhdG9yIiwidGVzdCIsImlzU2FmYXJpIiwicmVzb3VyY2UiLCJjYW52YXNBbmRDb250ZXh0IiwiQ2FudmFzUG9vbCIsImdldE9wdGltYWxDYW52YXNBbmRDb250ZXh0IiwiY2xlYXJSZWN0IiwiZHJhd0ltYWdlIiwicmV0dXJuQ2FudmFzQW5kQ29udGV4dCIsImNhbnZhcyIsImdldFRlbXBvcmFyeUNhbnZhc0Zyb21JbWFnZSIsImdldFBvMlRleHR1cmVGcm9tU291cmNlIiwiaW5pdFNvdXJjZSIsImFjdGl2ZVRleHR1cmUiLCJfY2xlYW5VcCIsInVwbG9hZE1ldGhvZElkIiwiZ2V0UmVmZXJlbmNlQ291bnQiLCJDYW52YXNTeXN0ZW0iLCJkZWZhdWx0Rm9udE9wdGlvbnMiLCJDYW52YXNUZXh0UGlwZSIsImNhbnZhc1RleHQiLCJnZXRUZXh0dXJlU2l6ZSIsInRleHRVaWQiLCJjaGVja1JvdyIsImNoZWNrQ29sdW1uIiwidG9wIiwiYm90dG9tIiwiQ2FudmFzVGV4dFN5c3RlbSIsIm1lYXN1cmVUZXh0IiwiX3RleHRLZXkiLCJjcmVhdGVUZXh0dXJlQW5kQ2FudmFzIiwicmVuZGVyVGV4dFRvQ2FudmFzIiwidHJpbW1lZCIsImdldENvbnRleHQiLCJ3aWxsUmVhZEZyZXF1ZW50bHkiLCJUeXBlRXJyb3IiLCJnZXRJbWFnZURhdGEiLCJsZWZ0IiwicmlnaHQiLCJSZWN0YW5nbGUiLCJnZXRDYW52YXNCb3VuZGluZ0JveCIsImFscGhhTW9kZSIsImZvbnQiLCJmb250U3RyaW5nRnJvbVRleHRTdHlsZSIsImxpbmVXaWR0aHMiLCJtYXhMaW5lV2lkdGgiLCJmb250UHJvcGVydGllcyIsImxpbmVXaWR0aCIsIm1pdGVyTGltaXQiLCJsaW5lSm9pbiIsImxpbmVDYXAiLCJjYXAiLCJsaW5lUG9zaXRpb25YIiwibGluZVBvc2l0aW9uWSIsInBhc3Nlc0NvdW50IiwiaXNTaGFkb3dQYXNzIiwiZHNPZmZzZXRUZXh0IiwiZHNPZmZzZXRTaGFkb3ciLCJzaGFkb3dPcHRpb25zIiwiZHJvcFNoYWRvd0NvbG9yIiwiZHJvcFNoYWRvd0FscGhhIiwic2hhZG93Q29sb3IiLCJ0b1JnYmFTdHJpbmciLCJkcm9wU2hhZG93Qmx1ciIsImRyb3BTaGFkb3dEaXN0YW5jZSIsInNoYWRvd0JsdXIiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsImdsb2JhbEFscGhhIiwiZ2V0Q2FudmFzRmlsbFN0eWxlIiwibGluZVBvc2l0aW9uWVNoaWZ0Iiwic3Ryb2tlV2lkdGgiLCJpMiIsImFzY2VudCIsIl9kcmF3TGV0dGVyU3BhY2luZyIsImlzU3Ryb2tlIiwidXNlRXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZyIsImV4cGVyaW1lbnRhbExldHRlclNwYWNpbmdTdXBwb3J0ZWQiLCJleHBlcmltZW50YWxMZXR0ZXJTcGFjaW5nIiwidGV4dExldHRlclNwYWNpbmciLCJzdHJva2VUZXh0IiwiZmlsbFRleHQiLCJjdXJyZW50UG9zaXRpb24iLCJzdHJpbmdBcnJheSIsImdyYXBoZW1lU2VnbWVudGVyIiwicHJldmlvdXNXaWR0aCIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRDaGFyIiwidGV4dFN0ciIsInRlbXBCb3VuZHMiLCJlbWl0Il0sInNvdXJjZVJvb3QiOiIifQ==