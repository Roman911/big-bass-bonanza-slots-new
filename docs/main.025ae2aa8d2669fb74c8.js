/*! For license information please see main.025ae2aa8d2669fb74c8.js.LICENSE.txt */
(()=>{"use strict";var t,e,n,r={5484:(t,e,n)=>{var r=n(4730);const o=n.p+"assets/icon-10.png",i=n.p+"assets/icon-40fs.png",a=n.p+"assets/icon-box.png",u=n.p+"assets/icon-dragonfly.png",c=n.p+"assets/icon-fish.png",s=n.p+"assets/icon-J.png",l=n.p+"assets/icon-K.png",f=n.p+"assets/icon-man.png",p=n.p+"assets/icon-Q.png",d=n.p+"assets/icon-rod.png",h=n.p+"assets/icon-scatter.png";function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function v(){var t=S(),e=t.m(v),n=(Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__).constructor;function r(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===n||"GeneratorFunction"===(e.displayName||e.name))}var o={throw:1,return:2,break:3,continue:3};function i(t){var e,n;return function(r){e||(e={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(t,e){return n(r.a,o[t],e)},delegateYield:function(t,o,i){return e.resultName=o,n(r.d,y(t),i)},finish:function(t){return n(r.f,t)}},n=function(t,n,o){r.p=e.prev,r.n=e.next;try{return t(n,o)}finally{e.next=r.n}}),e.resultName&&(e[e.resultName]=r.v,e.resultName=void 0),e.sent=r.v,e.next=r.n;try{return t.call(this,e)}finally{r.p=e.prev,r.n=e.next}}}return(v=function(){return{wrap:function(e,n,r,o){return t.w(i(e),n,r,o&&o.reverse())},isGeneratorFunction:r,mark:t.m,awrap:function(t,e){return new P(t,e)},AsyncIterator:x,async:function(t,e,n,o,a){return(r(e)?w:b)(i(t),e,n,o,a)},keys:g,values:y}})()}function y(t){if(null!=t){var e=t["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}throw new TypeError(m(t)+" is not iterable")}function g(t){var e=Object(t),n=[];for(var r in e)n.unshift(r);return function t(){for(;n.length;)if((r=n.pop())in e)return t.value=r,t.done=!1,t;return t.done=!0,t}}function b(t,e,n,r,o){var i=w(t,e,n,r,o);return i.next().then((function(t){return t.done?t.value:i.next()}))}function w(t,e,n,r,o){return new x(S().w(t,e,n,r),o||Promise)}function x(t,e){function n(r,o,i,a){try{var u=t[r](o),c=u.value;return c instanceof P?e.resolve(c.v).then((function(t){n("next",t,i,a)}),(function(t){n("throw",t,i,a)})):e.resolve(c).then((function(t){u.value=t,i(u)}),(function(t){return n("throw",t,i,a)}))}catch(t){a(t)}}var r;this.next||(O(x.prototype),O(x.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),O(this,"_invoke",(function(t,o,i){function a(){return new e((function(e,r){n(t,i,e,r)}))}return r=r?r.then(a,a):a()}),!0)}function S(){var t,e,n="function"==typeof Symbol?Symbol:{},r=n.iterator||"@@iterator",o=n.toStringTag||"@@toStringTag";function i(n,r,o,i){var c=r&&r.prototype instanceof u?r:u,s=Object.create(c.prototype);return O(s,"_invoke",function(n,r,o){var i,u,c,s=0,l=o||[],f=!1,p={p:0,n:0,v:t,a:d,f:d.bind(t,4),d:function(e,n){return i=e,u=0,c=t,p.n=n,a}};function d(n,r){for(u=n,c=r,e=0;!f&&s&&!o&&e<l.length;e++){var o,i=l[e],d=p.p,h=i[2];n>3?(o=h===r)&&(c=i[(u=i[4])?5:(u=3,3)],i[4]=i[5]=t):i[0]<=d&&((o=n<2&&d<i[1])?(u=0,p.v=r,p.n=i[1]):d<h&&(o=n<3||i[0]>r||r>h)&&(i[4]=n,i[5]=r,p.n=h,u=0))}if(o||n>1)return a;throw f=!0,r}return function(o,l,h){if(s>1)throw TypeError("Generator is already running");for(f&&1===l&&d(l,h),u=l,c=h;(e=u<2?t:c)||!f;){i||(u?u<3?(u>1&&(p.n=-1),d(u,c)):p.n=c:p.v=c);try{if(s=2,i){if(u||(o="next"),e=i[o]){if(!(e=e.call(i,c)))throw TypeError("iterator result is not an object");if(!e.done)return e;c=e.value,u<2&&(u=0)}else 1===u&&(e=i.return)&&e.call(i),u<2&&(c=TypeError("The iterator does not provide a '"+o+"' method"),u=1);i=t}else if((e=(f=p.n<0)?c:n.call(r,p))!==a)break}catch(e){i=t,u=1,c=e}finally{s=1}}return{value:e,done:f}}}(n,o,i),!0),s}var a={};function u(){}function c(){}function s(){}e=Object.getPrototypeOf;var l=[][r]?e(e([][r]())):(O(e={},r,(function(){return this})),e),f=s.prototype=u.prototype=Object.create(l);function p(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,s):(t.__proto__=s,O(t,o,"GeneratorFunction")),t.prototype=Object.create(f),t}return c.prototype=s,O(f,"constructor",s),O(s,"constructor",c),c.displayName="GeneratorFunction",O(s,o,"GeneratorFunction"),O(f),O(f,o,"Generator"),O(f,r,(function(){return this})),O(f,"toString",(function(){return"[object Generator]"})),(S=function(){return{w:i,m:p}})()}function O(t,e,n,r){var o=Object.defineProperty;try{o({},"",{})}catch(t){o=0}O=function(t,e,n,r){function i(e,n){O(t,e,(function(t){return this._invoke(e,n,t)}))}e?o?o(t,e,{value:n,enumerable:!r,configurable:!r,writable:!r}):t[e]=n:(i("next",0),i("throw",1),i("return",2))},O(t,e,n,r)}function P(t,e){this.v=t,this.k=e}function k(t,e,n,r,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,o)}var j;(j=v().mark((function t(){var e,n,m,y,g,b,w,x,S,O,P,k,j,T,_,M,E,N,L,C,q,A,G;return v().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return N=function(t){return function(e){return--e*e*((t+1)*e+t)+1}},E=function(t,e,n){return t*(1-n)+e*n},M=function(t,e,n,r,o,i,a){var u={object:t,property:e,propertyBeginValue:t[e],target:n,easing:o,time:r,change:i,complete:a,start:Date.now()};return _.push(u),u},T=function(){k=!1},j=function(){if(!k){k=!0;for(var t=0;t<y.length;t++){var e=y[t],n=e.position+10+15*t+8;M(e,"position",n,2500+200*t+1600,N(.5),null,t===y.length-1?T:null)}}},e=new r.lgM,t.next=8,e.init({backgroundAlpha:0,width:880,height:480,text:"center"});case 8:return document.getElementById("app").appendChild(e.canvas),t.next=11,r.sP.load([o,i,a,u,c,s,l,f,p,d,h]);case 11:for(n=160,m=[r.gPd.from(o),r.gPd.from(i),r.gPd.from(a),r.gPd.from(u),r.gPd.from(c),r.gPd.from(s),r.gPd.from(l),r.gPd.from(f),r.gPd.from(p),r.gPd.from(d),r.gPd.from(h)],y=[],g=new r.mcf,b=0,w=0;w<5;w++){for((x=new r.mcf).x=180*w,g.addChild(x),(S={container:x,symbols:[],position:0,previousPosition:0,blur:new r.eV2}).blur.blurX=0,S.blur.blurY=0,x.filters=[S.blur],O=0;O<10;O++)(P=new r.kxk(m[Math.floor(Math.random()*m.length)])).y=O*n,P.scale.x=P.scale.y=Math.min(n/P.width,n/P.height),P.x=Math.round((n-P.width)/2),S.symbols.push(P),x.addChild(P);y.push(S)}e.stage.addChild(g),k=!1,e.ticker.add((function(){for(var t=0;t<y.length;t++){var e=y[t];e.blur.blurY=8*(e.position-e.previousPosition),e.previousPosition=e.position;for(var r=0;r<e.symbols.length;r++){var o=e.symbols[r],i=o.y;o.y=(e.position+r)%e.symbols.length*n-n,o.y<0&&i>n&&(o.texture=m[Math.floor(Math.random()*m.length)],o.scale.x=o.scale.y=Math.min(n/o.texture.width,n/o.texture.height),o.x=Math.round((n-o.width)/2)),1===b?(0===t&&4===r||1===t&&9===r||2===t&&4===r||3===t&&9===r||4===t&&4===r)&&(o.texture=m[Math.floor(10)],o.scale.x=o.scale.y=Math.min(n/o.texture.width,n/o.texture.height),o.x=Math.round((n-o.width)/2)):(0===t&&6===r||1===t&&6===r||2===t&&6===r||3===t&&6===r||4===t&&6===r)&&(o.texture=m[Math.floor(7)],o.scale.x=o.scale.y=Math.min(n/o.texture.width,n/o.texture.height),o.x=Math.round((n-o.width)/2))}}})),_=[],e.ticker.add((function(){for(var t=Date.now(),e=[],n=0;n<_.length;n++){var r=_[n],o=Math.min(1,(t-r.start)/r.time);r.object[r.property]=E(r.propertyBeginValue,r.target,r.easing(o)),r.change&&r.change(r),1===o&&(r.object[r.property]=r.target,r.complete&&r.complete(r),e.push(r))}for(var i=0;i<e.length;i++)_.splice(_.indexOf(e[i]),1)})),L={btn:document.querySelector(".btn_spin"),winner:document.querySelector(".winner"),winElements:document.querySelectorAll(".win"),modalOverlay:document.querySelector(".modal_overlay"),modalSignup:document.querySelector(".modal_signup"),textSpin:document.querySelector(".text-win"),textNiceOne:document.querySelector(".text-nice-one"),hand:document.querySelector(".hand.content"),handModal:document.querySelector(".hand.reg"),sounds:{win:new Audio("https://n1md7.github.io/slot-game/sound/win.mp3"),spin:new Audio("https://n1md7.github.io/slot-game/sound/spin.mp3")}},C=function(t,e,n){t.forEach((function(t,r){setTimeout((function(){t.classList.add(e)}),r*n)}))},q=function(t,e,n){setTimeout((function(){t.classList.add("show"),e.classList.add("show")}),n)},A=function(){setTimeout((function(){L.textNiceOne.classList.add("active")}),5500),setTimeout((function(){L.hand.classList.add("show"),L.textNiceOne.classList.remove("active")}),7500)},G=function(){setTimeout((function(){L.sounds.win.play(),L.winner.classList.add("active"),C(L.winElements,"active",160)}),3800),setTimeout((function(){L.textSpin.classList.add("active")}),5500),q(L.modalOverlay,L.modalSignup,9e3),setTimeout((function(){L.handModal.classList.add("show")}),1e4)},setTimeout((function(){L.hand.classList.add("show")}),2e3),L.btn.addEventListener("click",(function(){L.sounds.spin.play(),j(),0===b?(L.hand.classList.remove("show"),A()):(G(),L.btn.style.opacity=.5,L.btn.style.pointerEvents="none"),b++}));case 30:case"end":return t.stop()}}),t)})),function(){var t=this,e=arguments;return new Promise((function(n,r){var o=j.apply(t,e);function i(t){k(o,n,r,i,a,"next",t)}function a(t){k(o,n,r,i,a,"throw",t)}i(void 0)}))})()}},o={};function i(t){var e=o[t];if(void 0!==e)return e.exports;var n=o[t]={exports:{}};return r[t](n,n.exports,i),n.exports}i.m=r,t=[],i.O=(e,n,r,o)=>{if(!n){var a=1/0;for(l=0;l<t.length;l++){for(var[n,r,o]=t[l],u=!0,c=0;c<n.length;c++)(!1&o||a>=o)&&Object.keys(i.O).every((t=>i.O[t](n[c])))?n.splice(c--,1):(u=!1,o<a&&(a=o));if(u){t.splice(l--,1);var s=r();void 0!==s&&(e=s)}}return e}o=o||0;for(var l=t.length;l>0&&t[l-1][2]>o;l--)t[l]=t[l-1];t[l]=[n,r,o]},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,n)=>(i.f[n](t,e),e)),[])),i.u=t=>t+"."+{151:"394ba8a9913e262bff18",162:"ded8b2bbae5ffaa13e35",228:"819bc536211ce27892f3",544:"a686756468cb62acdb91",751:"de407cad77af56f0bc13",852:"2c0f6d0f2b0cb6aa4b92"}[t]+".js",i.miniCssF=t=>{},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),e={},n="big-bass-bonanza-slots:",i.l=(t,r,o,a)=>{if(e[t])e[t].push(r);else{var u,c;if(void 0!==o)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var f=s[l];if(f.getAttribute("src")==t||f.getAttribute("data-webpack")==n+o){u=f;break}}u||(c=!0,(u=document.createElement("script")).charset="utf-8",u.timeout=120,i.nc&&u.setAttribute("nonce",i.nc),u.setAttribute("data-webpack",n+o),u.src=t),e[t]=[r];var p=(n,r)=>{u.onerror=u.onload=null,clearTimeout(d);var o=e[t];if(delete e[t],u.parentNode&&u.parentNode.removeChild(u),o&&o.forEach((t=>t(r))),n)return n(r)},d=setTimeout(p.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=p.bind(null,u.onerror),u.onload=p.bind(null,u.onload),c&&document.head.appendChild(u)}},i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&"SCRIPT"===e.currentScript.tagName.toUpperCase()&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=n[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t={792:0};i.f.j=(e,n)=>{var r=i.o(t,e)?t[e]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=t[e]=[n,o]));n.push(r[2]=o);var a=i.p+i.u(e),u=new Error;i.l(a,(n=>{if(i.o(t,e)&&(0!==(r=t[e])&&(t[e]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;u.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",u.name="ChunkLoadError",u.type=o,u.request=a,r[1](u)}}),"chunk-"+e,e)}},i.O.j=e=>0===t[e];var e=(e,n)=>{var r,o,[a,u,c]=n,s=0;if(a.some((e=>0!==t[e]))){for(r in u)i.o(u,r)&&(i.m[r]=u[r]);if(c)var l=c(i)}for(e&&e(n);s<a.length;s++)o=a[s],i.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return i.O(l)},n=self.webpackChunkbig_bass_bonanza_slots=self.webpackChunkbig_bass_bonanza_slots||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var a=i.O(void 0,[730],(()=>i(5484)));a=i.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,